{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"src/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"src/images/logo.png","path":"images/logo.png","modified":0,"renderable":0},{"_id":"src/images/wx.png","path":"images/wx.png","modified":0,"renderable":0},{"_id":"themes/vue/source/css/benchmark.styl","path":"css/benchmark.styl","modified":0,"renderable":1},{"_id":"themes/vue/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/vue/source/css/search.styl","path":"css/search.styl","modified":0,"renderable":1},{"_id":"themes/vue/source/css/page.styl","path":"css/page.styl","modified":0,"renderable":1},{"_id":"themes/vue/source/images/check.png","path":"images/check.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/feed.png","path":"images/feed.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/down.png","path":"images/down.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/github.png","path":"images/github.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/search.png","path":"images/search.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/icons.png","path":"images/icons.png","modified":0,"renderable":1},{"_id":"themes/vue/source/images/menu.png","path":"images/menu.png","modified":0,"renderable":1},{"_id":"themes/vue/source/js/common.js","path":"js/common.js","modified":0,"renderable":1},{"_id":"themes/vue/source/js/smooth-scroll.min.js","path":"js/smooth-scroll.min.js","modified":0,"renderable":1},{"_id":"themes/vue/source/js/vue.min.js","path":"js/vue.min.js","modified":0,"renderable":1},{"_id":"src/images/zfb.jpg","path":"images/zfb.jpg","modified":0,"renderable":0},{"_id":"themes/vue/source/js/vue.js","path":"js/vue.js","modified":0,"renderable":1}],"Cache":[{"_id":"src/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481537919000},{"_id":"themes/vue/_config.yml","hash":"e794a92e73ebe72ec38a5b419efbdc3d563ca0b3","modified":1481694925000},{"_id":"src/.DS_Store","hash":"a9477ae80b4a8b9a37448eb9e155a3a0653a7f54","modified":1481560645000},{"_id":"src/index.md","hash":"fd945de1e31344f0d8be59bcc87e3f5fda468e11","modified":1481458830000},{"_id":"themes/vue/.DS_Store","hash":"ff0949507754415a293af4cdbc9f6b2b0d8647c1","modified":1481560550000},{"_id":"src/_posts/index.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481626910000},{"_id":"src/about/guide.md","hash":"0ec5708597e323ab43c9af6d0395fc87b4105686","modified":1481548159000},{"_id":"src/about/index.md","hash":"6a004205a610870e47155f0370c30de0260304dc","modified":1481548181000},{"_id":"src/images/logo.png","hash":"a11b8d7ae3fe9792cda482165b51a0dc9f5dd929","modified":1480756089000},{"_id":"src/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1481560645000},{"_id":"src/study/.DS_Store","hash":"0c49eb67a65f113283609ac835e1c2deb02a74c0","modified":1481560535000},{"_id":"src/support-me/index.md","hash":"ca75bc802622118e50389cdd6b783579de0c65bd","modified":1481549114000},{"_id":"themes/vue/layout/.DS_Store","hash":"b2974a5f3ab04d291ce2cf4a27b6c962d2f73287","modified":1481560535000},{"_id":"themes/vue/layout/page.ejs","hash":"8946d8a4d4fa1f9d4b44237bd35a77de8c71c351","modified":1481634627000},{"_id":"themes/vue/layout/index.ejs","hash":"bf286aaf7eba29b57575ab8993d997b93faabdad","modified":1481633352000},{"_id":"themes/vue/layout/layout.ejs","hash":"da1a39bdbac74bbe8ed76e1bf763b9fc77c16960","modified":1481634059000},{"_id":"themes/vue/layout/post.ejs","hash":"aa03915a3540de78cfe8fe1c8f9e897974bf35a0","modified":1481458830000},{"_id":"themes/vue/source/.DS_Store","hash":"6bb10a6a927a3485cca1d10341685ec53965dfcf","modified":1481560535000},{"_id":"src/images/wx.png","hash":"f7210ddec02195aedb4d7c2e351fe63f4c4c6b01","modified":1480770057000},{"_id":"themes/vue/layout/partials/ga.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481458830000},{"_id":"themes/vue/layout/partials/sponsors.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481694753000},{"_id":"src/study/java/index.md","hash":"dc67c3a22b1fff0721be333f51d7fb01a9e7c6b2","modified":1481601354000},{"_id":"src/study/java/one.md","hash":"e113474ca826f86a2df1db08c0e87a51bfce0461","modified":1481601111000},{"_id":"src/study/java/three.md","hash":"d0569ac38b51a10b4b974b1d0022c6c1b0434fda","modified":1481601111000},{"_id":"src/study/java/two.md","hash":"7b7d340301ef7dd3494644670d495648d12b4311","modified":1481601111000},{"_id":"src/study/java/zero.md","hash":"dd4b860be0f786f7aea4d761e73b91f34fd5b079","modified":1481601111000},{"_id":"src/study/linux/index.md","hash":"ada86d06bf3bdd615b4935ae109a67dff7a6704c","modified":1481619862000},{"_id":"src/study/linux/one.md","hash":"6413f39cef6c5d0d1c30ad3123677865666ab763","modified":1481546322000},{"_id":"src/study/linux/three.md","hash":"c8c903a8af139a733f307ca2e911fb46785fc530","modified":1481619504000},{"_id":"src/study/linux/two.md","hash":"444d48eb984ae5aa19eff89be49d900a29411c93","modified":1481625947000},{"_id":"src/study/nodejs/index.md","hash":"4796db523cee09a5bf95c176f609a2418b0c43ec","modified":1481546768000},{"_id":"src/study/nodejs/one.md","hash":"b0649785a06c2f1d26b934822deb9921cb6039a0","modified":1481546891000},{"_id":"themes/vue/layout/_widget/popular_posts.ejs","hash":"08233ac2027ec2aa76ca89435c2035a07904e34a","modified":1481629993000},{"_id":"themes/vue/layout/partials/community_dropdown.ejs","hash":"70c14574e6d9864743e8a7e70341fc1588ac6b53","modified":1481604177000},{"_id":"themes/vue/layout/partials/contributors.ejs","hash":"cdab8ca978571e78ad2a49bfbe7094d457ac0b29","modified":1481543877000},{"_id":"themes/vue/layout/partials/ecosystem_dropdown.ejs","hash":"4a8feff8e2e153a17d70c9bb8e6a990082c74214","modified":1481458830000},{"_id":"themes/vue/layout/partials/header.ejs","hash":"f4bf4e2172838abb985a1a5881ec8aa3a6d9da86","modified":1481543304000},{"_id":"themes/vue/layout/partials/language_dropdown.ejs","hash":"6d9ce9bf41e257d8d790f05430737ac14429f5db","modified":1481458830000},{"_id":"themes/vue/layout/partials/main_menu.ejs","hash":"0efb02c7f725e96224f2311bbb4d7c6bd197f70e","modified":1481633429000},{"_id":"themes/vue/layout/partials/popular_posts.ejs","hash":"580ddeaa5777692c510e9181258e0d3f4d212d59","modified":1481633954000},{"_id":"themes/vue/layout/partials/sidebar.ejs","hash":"32fc054a91a982a02f0db2cbf860f9268bb97b6f","modified":1481547135000},{"_id":"themes/vue/source/css/_common.styl","hash":"b7fc6a54a23efdcfa154e2c95a6f8177bd18ab43","modified":1481458830000},{"_id":"themes/vue/source/css/_header.styl","hash":"b6dbced753e1a6ce0087478e46255a7d28e0f999","modified":1481458830000},{"_id":"themes/vue/source/css/_migration.styl","hash":"5ea4f20818827c0d57a36a3006b736366c3b446f","modified":1481458830000},{"_id":"themes/vue/source/css/_demo.styl","hash":"952a576a1887e056d70c98386b9d4eb7949ee3d2","modified":1481458830000},{"_id":"themes/vue/source/css/_sponsor.styl","hash":"6a4e1503b1e4f0e98e1e008ba846036fee3199aa","modified":1481458830000},{"_id":"themes/vue/source/css/_syntax.styl","hash":"edb004001fe151bebfdf63bbc250ba75777b5468","modified":1481458830000},{"_id":"themes/vue/source/css/benchmark.styl","hash":"95d4607b2b59623a673e131e1a267d0311fe89e6","modified":1481458830000},{"_id":"themes/vue/source/css/index.styl","hash":"0e7d5b0d0a07a4ada74072c8d471c16c121a59c0","modified":1481458830000},{"_id":"themes/vue/source/css/search.styl","hash":"5117f05598154cfc84da04ec1a257bd186653ba2","modified":1481458830000},{"_id":"themes/vue/source/css/page.styl","hash":"97a967a9718e5fd41136eeb115064ad3b0fa23bc","modified":1481458830000},{"_id":"themes/vue/source/css/_settings.styl","hash":"c25843e8e63122df3f37f7583832ac577079d84b","modified":1481458830000},{"_id":"themes/vue/source/css/_sidebar.styl","hash":"cf214c13aa0d286de019ed16633a21a0ed5660df","modified":1481458830000},{"_id":"themes/vue/source/images/check.png","hash":"682cf89e1802afb1dfddf07a6aed828a45b824af","modified":1481458830000},{"_id":"themes/vue/source/images/feed.png","hash":"0a746dab71dca2025f63584dbd222dc5e0707ba8","modified":1481458830000},{"_id":"themes/vue/source/images/down.png","hash":"42505e12d686cf580f793bd9193acbac1e3e3a91","modified":1481458830000},{"_id":"themes/vue/source/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1481560574000},{"_id":"themes/vue/source/images/github.png","hash":"238f0619c61c38ce6b589177caf66c525358062e","modified":1481007947000},{"_id":"themes/vue/source/images/logo.png","hash":"191c79a779be9e301b0f9af00bdbf606c2c20e6f","modified":1480776275000},{"_id":"themes/vue/source/images/search.png","hash":"12d664cc51b8d53c9214830bc9b92fb340526a7b","modified":1481458830000},{"_id":"themes/vue/source/images/icons.png","hash":"91225ef7011e59dbe6b4b9f2666133fb5e1bc976","modified":1481458830000},{"_id":"themes/vue/source/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1481458830000},{"_id":"themes/vue/source/js/common.js","hash":"ead9592d106a121200ef4c3d9634f78be89a70c6","modified":1481458830000},{"_id":"themes/vue/source/js/smooth-scroll.min.js","hash":"86d3196a003a5cdc673a4c6ebb75db3ceee1a1a7","modified":1481458830000},{"_id":"themes/vue/source/js/vue.min.js","hash":"cda36ef24ebbeedae37311d6e14187081ef2b4cc","modified":1481458830000},{"_id":"src/images/zfb.jpg","hash":"93442d2b05ac8ddfbd0ed2a9f0f5b17fa6b2633f","modified":1480769943000},{"_id":"themes/vue/source/js/vue.js","hash":"9f0baea28019a11d56b0a0b77f03d66578266790","modified":1481458830000},{"_id":"public/javaImprove/index.html","hash":"0ed7682ee310ebe97b2a3d2512580f0fe911104b","modified":1481694936131},{"_id":"public/javaImprove/two.html","hash":"2ed0b4cc7aaca040ceea63517d7336c9c519954d","modified":1481694936191},{"_id":"public/atom.xml","hash":"436b5773bb80df33e5d5f21cf0e9f01859e6b709","modified":1481694936197},{"_id":"public/index.html","hash":"19b0ce20d95f4b4313568f771a7afe9e377ecf42","modified":1481694936208},{"_id":"public/2016/12/13/index/index.html","hash":"20a4a510ac995a7144e205dd2694b5bdce87dc24","modified":1481694936208},{"_id":"public/archives/index.html","hash":"4540e9a0b6fe1d52d02f019fb50f95f634667d12","modified":1481694936208},{"_id":"public/archives/2016/index.html","hash":"4540e9a0b6fe1d52d02f019fb50f95f634667d12","modified":1481694936209},{"_id":"public/archives/2016/12/index.html","hash":"4540e9a0b6fe1d52d02f019fb50f95f634667d12","modified":1481694936209},{"_id":"public/about/index.html","hash":"052900184340bac6bb45e6a28d48b76a030c6e3f","modified":1481694936209},{"_id":"public/about/guide.html","hash":"aedd564c3f8614533bbfdd67ae913ed9dcad3980","modified":1481694936209},{"_id":"public/support-me/index.html","hash":"62b233ea1f42ae3ab43c8996b8fc69416a25ec7c","modified":1481694936209},{"_id":"public/study/java/one.html","hash":"92554c0a0accc1565c8afb2013fb9ab24f3e8c3d","modified":1481694936209},{"_id":"public/study/java/index.html","hash":"3e1a0d84791ee545819df66ad87404b2cc5def7e","modified":1481694936209},{"_id":"public/study/java/three.html","hash":"83c4e20d2b6c3e9a98d8b5da087166ab01d3c29e","modified":1481694936212},{"_id":"public/study/java/two.html","hash":"56159592ec45b180307a1d4c40d2ea6be07a7963","modified":1481694936212},{"_id":"public/study/java/zero.html","hash":"b2014f3762f78e9729e3b7e869863f95aaf21f2f","modified":1481694936212},{"_id":"public/study/linux/index.html","hash":"48cddc5bdddf1dbd6981cc75b59e686e8592762a","modified":1481694936212},{"_id":"public/study/linux/one.html","hash":"f8e3a213740a77d65a89e63ce633ac7851113383","modified":1481694936212},{"_id":"public/study/linux/three.html","hash":"e028f6db616b76b7284cc0f97f76bdd6fd4bdbd4","modified":1481694936212},{"_id":"public/study/nodejs/index.html","hash":"780325c67d33c312da04659a97a6a6c0d51f8f0b","modified":1481694936212},{"_id":"public/study/nodejs/one.html","hash":"92920c00c9f8d3947e12a4d0a93a36814079b1d9","modified":1481694936212},{"_id":"public/study/linux/two.html","hash":"c2ae9edeb523a29422b06f7b73afc1f9b5c6f88f","modified":1481694936212},{"_id":"public/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1481694936212},{"_id":"public/images/logo.png","hash":"191c79a779be9e301b0f9af00bdbf606c2c20e6f","modified":1481694936216},{"_id":"public/images/check.png","hash":"682cf89e1802afb1dfddf07a6aed828a45b824af","modified":1481694936216},{"_id":"public/images/feed.png","hash":"0a746dab71dca2025f63584dbd222dc5e0707ba8","modified":1481694936216},{"_id":"public/images/down.png","hash":"42505e12d686cf580f793bd9193acbac1e3e3a91","modified":1481694936216},{"_id":"public/images/github.png","hash":"238f0619c61c38ce6b589177caf66c525358062e","modified":1481694936216},{"_id":"public/images/search.png","hash":"12d664cc51b8d53c9214830bc9b92fb340526a7b","modified":1481694936216},{"_id":"public/images/icons.png","hash":"91225ef7011e59dbe6b4b9f2666133fb5e1bc976","modified":1481694936216},{"_id":"public/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1481694936216},{"_id":"public/images/wx.png","hash":"f7210ddec02195aedb4d7c2e351fe63f4c4c6b01","modified":1481694936692},{"_id":"public/css/benchmark.css","hash":"3424ee8c27052da2ab9f544027f49e1550385e9d","modified":1481694936697},{"_id":"public/css/index.css","hash":"6ac49413e4fbbdf86f69032fe26693377585d0ec","modified":1481694936697},{"_id":"public/css/page.css","hash":"93706b0e38dcc6e0293cb8da794b623fd68c34c6","modified":1481694936697},{"_id":"public/css/search.css","hash":"ac9a0e8c8da7919174caea15d9704c192ea3a2c4","modified":1481694936697},{"_id":"public/js/common.js","hash":"ead9592d106a121200ef4c3d9634f78be89a70c6","modified":1481694936697},{"_id":"public/js/smooth-scroll.min.js","hash":"86d3196a003a5cdc673a4c6ebb75db3ceee1a1a7","modified":1481694936697},{"_id":"public/js/vue.min.js","hash":"cda36ef24ebbeedae37311d6e14187081ef2b4cc","modified":1481694936697},{"_id":"public/js/vue.js","hash":"9f0baea28019a11d56b0a0b77f03d66578266790","modified":1481694936697},{"_id":"public/images/zfb.jpg","hash":"93442d2b05ac8ddfbd0ed2a9f0f5b17fa6b2633f","modified":1481694936705}],"Category":[],"Data":[],"Page":[{"index":true,"_content":"","source":"index.md","raw":"index: true\n---\n","date":"2016-12-12T14:00:24.000Z","updated":"2016-12-11T12:20:30.000Z","path":"index.html","title":"","comments":1,"layout":"page","_id":"ciwoiwpdq00001a2dy7czsohz","content":"","excerpt":"","more":""},{"title":"贡献者","type":"about","order":0,"_content":"\n<!--## Guide 翻译贡献-->\n\n<!--### Essentials  基础-->\n\n<!--序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者-->\n<!------- | ------------- | --- | --- | --- | --- | ----->\n<!--1 |  installation.md | 安装 | [dingyiming](https://github.com/dingyiming)  | [ATLgo](https://github.com/ATLgo) [70data](https://github.com/70data)-->\n<!--2 |  index.md |  介绍 | [hijiangtao](https://github.com/hijiangtao) | [70data](https://github.com/70data) [ATLgo](https://github.com/ATLgo)-->\n<!--3 |  instance.md | 实例 | [dingyiming](https://github.com/dingyiming) | [70data](https://github.com/70data) [ATLgo](https://github.com/ATLgo)-->\n<!--4 |  syntax.md  | 模板语法 | [daix6](https://github.com/daix6) | [70data](https://github.com/70data)-->\n<!--5 |  computed.md | 计算属 性 | [dingyiming](https://github.com/dingyiming) [70data](https://github.com/70data) | [70data](https://github.com/70data)-->\n<!--6 |  class-and-style.md | Class 与 Style 绑定 | [595074187](https://github.com/595074187) | [70data](https://github.com/70data)-->\n<!--7 |  conditional.md  | 条件渲染 | [dingyiming](https://github.com/dingyiming) | [hgcoder](https://github.com/hgcoder)-->\n<!--8 |  list.md |  列表渲染 | [tingtien](https://github.com/tingtien) | [hgcoder](https://github.com/hgcoder)-->\n<!--9 |  events.md | 事件处理器 | [dingyiming](https://github.com/dingyiming) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--10 |  forms.md  | 表单控件绑定 | [dingyiming](https://github.com/dingyiming) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--11 |  components.md |  组件 | [ezreally](https://github.com/ezreally) | [cuiyongjian](https://github.com/cuiyongjian)-->\n\n<!--### Advanced  进阶-->\n\n<!--序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者-->\n<!------- | ------------- | --- | --- | --- | ----->\n<!--12 |  transitions.md | 过渡: 进入, 离开, 和 列表 | [awe](https://github.com/hilongjw) | [bhnddowinf](https://github.com/bhnddowinf) [StoneQI](https://github.com/StoneQI)-->\n<!--13 |  transitioning-state.md | 过渡状态 | [awe](https://github.com/hilongjw) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--14 |  render-function.md |  Render 函数 | [awe](https://github.com/hilongjw) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--15 |  reactivity.md |  深入响应式原理 | [veaba](https://github.com/veaba) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--16 |  custom-directive.md |  自定义指令 | [harrytospring](https://github.com/harrytospring) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--17 |  mixins.md |  混合 | [harrytospring](https://github.com/harrytospring) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--18 |  plugins.md |  插件 | [hgcoder](https://github.com/hgcoder) | [hgcoder](https://github.com/hgcoder)-->\n<!--19 |  single-file-components.md |  单文件组件 | [ATLgo](https://github.com/ATLgo) | [zhouzihanntu](https://github.com/zhouzihanntu)-->\n<!--20 |  routing.md | 路由 | [dingyiming](https://github.com/dingyiming) | [mlyknown](https://github.com/mlyknown)-->\n<!--21 |  state-management.md |  状态管理 | [dear-lizhihua](https://github.com/dear-lizhihua) | [mlyknown](https://github.com/mlyknown)-->\n<!--22 |  unit-testing.md | 单元测试 | [70data](https://github.com/70data) | [mlyknown](https://github.com/mlyknown)-->\n<!--23 |  ssr.md |  服务端渲染 | [dingyiming](https://github.com/dingyiming) | [yongbolv](https://github.com/yongbolv)-->\n\n<!--### Migration  迁移-->\n\n<!--序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者-->\n<!------- |  ------------- | --- | --- | --- | ----->\n<!--24 |  migration.md | 1.x迁移 | [harrytospring](https://github.com/harrytospring) | [yongbolv](https://github.com/yongbolv)-->\n<!--27 |  migration-vue-router.md | vue-router 0.7.x 迁移 | [forzajuve10](https://github.com/forzajuve10) | [yizhixiaolongxia](https://github.com/yizhixiaolongxia)-->\n\n<!--### Meta  更多-->\n\n<!--序号 | 对应文档文件名 | 中文标题 |  翻译贡献者 | 校对主要贡献者-->\n<!------- | ------------- | --- | --- | --- | ----->\n<!--25 |  comparison.md |   对比其他框架 | [yongbolv](https://github.com/yongbolv) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--26 |  join.md |  加入 Vue.js 社区 | [daix6](https://github.com/daix6) | [zhouzihanntu](https://github.com/zhouzihanntu)-->\n\n<!--## API翻译贡献-->\n\n<!--序号 | 对应小节名称 | 中文标题 | 翻译贡献者 | 校对主要贡献者-->\n<!------- |  ------------- | --- | --- | --- | --- | ----->\n<!--1 |  Global Config | 全局配置 | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--2 |  Global API | 全局 API | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--3 |  Options / Data | 选项 / 数据 | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--4 |  Options / DOM | 选项 / DOM | [ATLgo](https://github.com/ATLgo) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--5 |  Options / Lifecycle Hooks | 选项 / 生命周期钩子 | [ATLgo](https://github.com/ATLgo) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--6 |  Options / Assets | 选项 / 资源 | [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--7 |  Options / Misc | 选项 / 杂项 | [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--8 |  Instance Properties | 实例属性 | [coolzjy](https://github.com/coolzjy) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--9 |  Instance Methods / Data | 实例方法 / 数据 | [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--10 |  Instance Methods / Events | 实例方法 / 事件 | [mlyknown](https://github.com/mlyknown) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--11 |   Instance Methods / Lifecycle | 实例方法 / 生命周期 |  [mlyknown](https://github.com/mlyknown)| [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--12 |  Directives | 指令| [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--13 |  Special Attributes | 特殊元素 | [70data](https://github.com/70data) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--14 |  Built-In Components | 内置的组件  | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--15 |  VNode Interface | VNode 接口  | [70data](https://github.com/70data) | [dear-lizhihua](https://github.com/dear-lizhihua)-->\n<!--16 |  Server-Side Rendering | 服务端渲染| [70data](https://github.com/70data) | [dear-lizhihua](https://github.com/dear-lizhihua)-->\n\n<!--## 示例翻译-->\n\n<!--翻译贡献者 ： [lindazhang102](https://github.com/lindazhang102)-->\n\n\n<!--## 感谢所有参与翻译的朋友们！-->\n","source":"about/index.md","raw":"---\ntitle: 贡献者\ntype: about\norder: 0\n---\n\n<!--## Guide 翻译贡献-->\n\n<!--### Essentials  基础-->\n\n<!--序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者-->\n<!------- | ------------- | --- | --- | --- | --- | ----->\n<!--1 |  installation.md | 安装 | [dingyiming](https://github.com/dingyiming)  | [ATLgo](https://github.com/ATLgo) [70data](https://github.com/70data)-->\n<!--2 |  index.md |  介绍 | [hijiangtao](https://github.com/hijiangtao) | [70data](https://github.com/70data) [ATLgo](https://github.com/ATLgo)-->\n<!--3 |  instance.md | 实例 | [dingyiming](https://github.com/dingyiming) | [70data](https://github.com/70data) [ATLgo](https://github.com/ATLgo)-->\n<!--4 |  syntax.md  | 模板语法 | [daix6](https://github.com/daix6) | [70data](https://github.com/70data)-->\n<!--5 |  computed.md | 计算属 性 | [dingyiming](https://github.com/dingyiming) [70data](https://github.com/70data) | [70data](https://github.com/70data)-->\n<!--6 |  class-and-style.md | Class 与 Style 绑定 | [595074187](https://github.com/595074187) | [70data](https://github.com/70data)-->\n<!--7 |  conditional.md  | 条件渲染 | [dingyiming](https://github.com/dingyiming) | [hgcoder](https://github.com/hgcoder)-->\n<!--8 |  list.md |  列表渲染 | [tingtien](https://github.com/tingtien) | [hgcoder](https://github.com/hgcoder)-->\n<!--9 |  events.md | 事件处理器 | [dingyiming](https://github.com/dingyiming) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--10 |  forms.md  | 表单控件绑定 | [dingyiming](https://github.com/dingyiming) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--11 |  components.md |  组件 | [ezreally](https://github.com/ezreally) | [cuiyongjian](https://github.com/cuiyongjian)-->\n\n<!--### Advanced  进阶-->\n\n<!--序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者-->\n<!------- | ------------- | --- | --- | --- | ----->\n<!--12 |  transitions.md | 过渡: 进入, 离开, 和 列表 | [awe](https://github.com/hilongjw) | [bhnddowinf](https://github.com/bhnddowinf) [StoneQI](https://github.com/StoneQI)-->\n<!--13 |  transitioning-state.md | 过渡状态 | [awe](https://github.com/hilongjw) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--14 |  render-function.md |  Render 函数 | [awe](https://github.com/hilongjw) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--15 |  reactivity.md |  深入响应式原理 | [veaba](https://github.com/veaba) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--16 |  custom-directive.md |  自定义指令 | [harrytospring](https://github.com/harrytospring) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--17 |  mixins.md |  混合 | [harrytospring](https://github.com/harrytospring) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--18 |  plugins.md |  插件 | [hgcoder](https://github.com/hgcoder) | [hgcoder](https://github.com/hgcoder)-->\n<!--19 |  single-file-components.md |  单文件组件 | [ATLgo](https://github.com/ATLgo) | [zhouzihanntu](https://github.com/zhouzihanntu)-->\n<!--20 |  routing.md | 路由 | [dingyiming](https://github.com/dingyiming) | [mlyknown](https://github.com/mlyknown)-->\n<!--21 |  state-management.md |  状态管理 | [dear-lizhihua](https://github.com/dear-lizhihua) | [mlyknown](https://github.com/mlyknown)-->\n<!--22 |  unit-testing.md | 单元测试 | [70data](https://github.com/70data) | [mlyknown](https://github.com/mlyknown)-->\n<!--23 |  ssr.md |  服务端渲染 | [dingyiming](https://github.com/dingyiming) | [yongbolv](https://github.com/yongbolv)-->\n\n<!--### Migration  迁移-->\n\n<!--序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者-->\n<!------- |  ------------- | --- | --- | --- | ----->\n<!--24 |  migration.md | 1.x迁移 | [harrytospring](https://github.com/harrytospring) | [yongbolv](https://github.com/yongbolv)-->\n<!--27 |  migration-vue-router.md | vue-router 0.7.x 迁移 | [forzajuve10](https://github.com/forzajuve10) | [yizhixiaolongxia](https://github.com/yizhixiaolongxia)-->\n\n<!--### Meta  更多-->\n\n<!--序号 | 对应文档文件名 | 中文标题 |  翻译贡献者 | 校对主要贡献者-->\n<!------- | ------------- | --- | --- | --- | ----->\n<!--25 |  comparison.md |   对比其他框架 | [yongbolv](https://github.com/yongbolv) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--26 |  join.md |  加入 Vue.js 社区 | [daix6](https://github.com/daix6) | [zhouzihanntu](https://github.com/zhouzihanntu)-->\n\n<!--## API翻译贡献-->\n\n<!--序号 | 对应小节名称 | 中文标题 | 翻译贡献者 | 校对主要贡献者-->\n<!------- |  ------------- | --- | --- | --- | --- | ----->\n<!--1 |  Global Config | 全局配置 | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--2 |  Global API | 全局 API | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--3 |  Options / Data | 选项 / 数据 | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--4 |  Options / DOM | 选项 / DOM | [ATLgo](https://github.com/ATLgo) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--5 |  Options / Lifecycle Hooks | 选项 / 生命周期钩子 | [ATLgo](https://github.com/ATLgo) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--6 |  Options / Assets | 选项 / 资源 | [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--7 |  Options / Misc | 选项 / 杂项 | [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--8 |  Instance Properties | 实例属性 | [coolzjy](https://github.com/coolzjy) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--9 |  Instance Methods / Data | 实例方法 / 数据 | [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--10 |  Instance Methods / Events | 实例方法 / 事件 | [mlyknown](https://github.com/mlyknown) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--11 |   Instance Methods / Lifecycle | 实例方法 / 生命周期 |  [mlyknown](https://github.com/mlyknown)| [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--12 |  Directives | 指令| [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--13 |  Special Attributes | 特殊元素 | [70data](https://github.com/70data) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--14 |  Built-In Components | 内置的组件  | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--15 |  VNode Interface | VNode 接口  | [70data](https://github.com/70data) | [dear-lizhihua](https://github.com/dear-lizhihua)-->\n<!--16 |  Server-Side Rendering | 服务端渲染| [70data](https://github.com/70data) | [dear-lizhihua](https://github.com/dear-lizhihua)-->\n\n<!--## 示例翻译-->\n\n<!--翻译贡献者 ： [lindazhang102](https://github.com/lindazhang102)-->\n\n\n<!--## 感谢所有参与翻译的朋友们！-->\n","date":"2016-12-12T14:00:24.000Z","updated":"2016-12-12T13:09:41.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciwoiwpeb00021a2dw9hqbdcm","content":"<!--## Guide 翻译贡献-->\n<!--### Essentials  基础-->\n<!--序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者-->\n<!------- | ------------- | --- | --- | --- | --- | ----->\n<!--1 |  installation.md | 安装 | [dingyiming](https://github.com/dingyiming)  | [ATLgo](https://github.com/ATLgo) [70data](https://github.com/70data)-->\n<!--2 |  index.md |  介绍 | [hijiangtao](https://github.com/hijiangtao) | [70data](https://github.com/70data) [ATLgo](https://github.com/ATLgo)-->\n<!--3 |  instance.md | 实例 | [dingyiming](https://github.com/dingyiming) | [70data](https://github.com/70data) [ATLgo](https://github.com/ATLgo)-->\n<!--4 |  syntax.md  | 模板语法 | [daix6](https://github.com/daix6) | [70data](https://github.com/70data)-->\n<!--5 |  computed.md | 计算属 性 | [dingyiming](https://github.com/dingyiming) [70data](https://github.com/70data) | [70data](https://github.com/70data)-->\n<!--6 |  class-and-style.md | Class 与 Style 绑定 | [595074187](https://github.com/595074187) | [70data](https://github.com/70data)-->\n<!--7 |  conditional.md  | 条件渲染 | [dingyiming](https://github.com/dingyiming) | [hgcoder](https://github.com/hgcoder)-->\n<!--8 |  list.md |  列表渲染 | [tingtien](https://github.com/tingtien) | [hgcoder](https://github.com/hgcoder)-->\n<!--9 |  events.md | 事件处理器 | [dingyiming](https://github.com/dingyiming) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--10 |  forms.md  | 表单控件绑定 | [dingyiming](https://github.com/dingyiming) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--11 |  components.md |  组件 | [ezreally](https://github.com/ezreally) | [cuiyongjian](https://github.com/cuiyongjian)-->\n<!--### Advanced  进阶-->\n<!--序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者-->\n<!------- | ------------- | --- | --- | --- | ----->\n<!--12 |  transitions.md | 过渡: 进入, 离开, 和 列表 | [awe](https://github.com/hilongjw) | [bhnddowinf](https://github.com/bhnddowinf) [StoneQI](https://github.com/StoneQI)-->\n<!--13 |  transitioning-state.md | 过渡状态 | [awe](https://github.com/hilongjw) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--14 |  render-function.md |  Render 函数 | [awe](https://github.com/hilongjw) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--15 |  reactivity.md |  深入响应式原理 | [veaba](https://github.com/veaba) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--16 |  custom-directive.md |  自定义指令 | [harrytospring](https://github.com/harrytospring) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--17 |  mixins.md |  混合 | [harrytospring](https://github.com/harrytospring) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--18 |  plugins.md |  插件 | [hgcoder](https://github.com/hgcoder) | [hgcoder](https://github.com/hgcoder)-->\n<!--19 |  single-file-components.md |  单文件组件 | [ATLgo](https://github.com/ATLgo) | [zhouzihanntu](https://github.com/zhouzihanntu)-->\n<!--20 |  routing.md | 路由 | [dingyiming](https://github.com/dingyiming) | [mlyknown](https://github.com/mlyknown)-->\n<!--21 |  state-management.md |  状态管理 | [dear-lizhihua](https://github.com/dear-lizhihua) | [mlyknown](https://github.com/mlyknown)-->\n<!--22 |  unit-testing.md | 单元测试 | [70data](https://github.com/70data) | [mlyknown](https://github.com/mlyknown)-->\n<!--23 |  ssr.md |  服务端渲染 | [dingyiming](https://github.com/dingyiming) | [yongbolv](https://github.com/yongbolv)-->\n<!--### Migration  迁移-->\n<!--序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者-->\n<!------- |  ------------- | --- | --- | --- | ----->\n<!--24 |  migration.md | 1.x迁移 | [harrytospring](https://github.com/harrytospring) | [yongbolv](https://github.com/yongbolv)-->\n<!--27 |  migration-vue-router.md | vue-router 0.7.x 迁移 | [forzajuve10](https://github.com/forzajuve10) | [yizhixiaolongxia](https://github.com/yizhixiaolongxia)-->\n<!--### Meta  更多-->\n<!--序号 | 对应文档文件名 | 中文标题 |  翻译贡献者 | 校对主要贡献者-->\n<!------- | ------------- | --- | --- | --- | ----->\n<!--25 |  comparison.md |   对比其他框架 | [yongbolv](https://github.com/yongbolv) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--26 |  join.md |  加入 Vue.js 社区 | [daix6](https://github.com/daix6) | [zhouzihanntu](https://github.com/zhouzihanntu)-->\n<!--## API翻译贡献-->\n<!--序号 | 对应小节名称 | 中文标题 | 翻译贡献者 | 校对主要贡献者-->\n<!------- |  ------------- | --- | --- | --- | --- | ----->\n<!--1 |  Global Config | 全局配置 | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--2 |  Global API | 全局 API | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--3 |  Options / Data | 选项 / 数据 | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--4 |  Options / DOM | 选项 / DOM | [ATLgo](https://github.com/ATLgo) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--5 |  Options / Lifecycle Hooks | 选项 / 生命周期钩子 | [ATLgo](https://github.com/ATLgo) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--6 |  Options / Assets | 选项 / 资源 | [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--7 |  Options / Misc | 选项 / 杂项 | [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--8 |  Instance Properties | 实例属性 | [coolzjy](https://github.com/coolzjy) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--9 |  Instance Methods / Data | 实例方法 / 数据 | [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--10 |  Instance Methods / Events | 实例方法 / 事件 | [mlyknown](https://github.com/mlyknown) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--11 |   Instance Methods / Lifecycle | 实例方法 / 生命周期 |  [mlyknown](https://github.com/mlyknown)| [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--12 |  Directives | 指令| [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--13 |  Special Attributes | 特殊元素 | [70data](https://github.com/70data) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--14 |  Built-In Components | 内置的组件  | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--15 |  VNode Interface | VNode 接口  | [70data](https://github.com/70data) | [dear-lizhihua](https://github.com/dear-lizhihua)-->\n<!--16 |  Server-Side Rendering | 服务端渲染| [70data](https://github.com/70data) | [dear-lizhihua](https://github.com/dear-lizhihua)-->\n<!--## 示例翻译-->\n<!--翻译贡献者 ： [lindazhang102](https://github.com/lindazhang102)-->\n<!--## 感谢所有参与翻译的朋友们！-->\n","excerpt":"","more":"<!--## Guide 翻译贡献-->\n<!--### Essentials  基础-->\n<!--序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者-->\n<!------- | ------------- | --- | --- | --- | --- | ----->\n<!--1 |  installation.md | 安装 | [dingyiming](https://github.com/dingyiming)  | [ATLgo](https://github.com/ATLgo) [70data](https://github.com/70data)-->\n<!--2 |  index.md |  介绍 | [hijiangtao](https://github.com/hijiangtao) | [70data](https://github.com/70data) [ATLgo](https://github.com/ATLgo)-->\n<!--3 |  instance.md | 实例 | [dingyiming](https://github.com/dingyiming) | [70data](https://github.com/70data) [ATLgo](https://github.com/ATLgo)-->\n<!--4 |  syntax.md  | 模板语法 | [daix6](https://github.com/daix6) | [70data](https://github.com/70data)-->\n<!--5 |  computed.md | 计算属 性 | [dingyiming](https://github.com/dingyiming) [70data](https://github.com/70data) | [70data](https://github.com/70data)-->\n<!--6 |  class-and-style.md | Class 与 Style 绑定 | [595074187](https://github.com/595074187) | [70data](https://github.com/70data)-->\n<!--7 |  conditional.md  | 条件渲染 | [dingyiming](https://github.com/dingyiming) | [hgcoder](https://github.com/hgcoder)-->\n<!--8 |  list.md |  列表渲染 | [tingtien](https://github.com/tingtien) | [hgcoder](https://github.com/hgcoder)-->\n<!--9 |  events.md | 事件处理器 | [dingyiming](https://github.com/dingyiming) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--10 |  forms.md  | 表单控件绑定 | [dingyiming](https://github.com/dingyiming) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--11 |  components.md |  组件 | [ezreally](https://github.com/ezreally) | [cuiyongjian](https://github.com/cuiyongjian)-->\n<!--### Advanced  进阶-->\n<!--序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者-->\n<!------- | ------------- | --- | --- | --- | ----->\n<!--12 |  transitions.md | 过渡: 进入, 离开, 和 列表 | [awe](https://github.com/hilongjw) | [bhnddowinf](https://github.com/bhnddowinf) [StoneQI](https://github.com/StoneQI)-->\n<!--13 |  transitioning-state.md | 过渡状态 | [awe](https://github.com/hilongjw) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--14 |  render-function.md |  Render 函数 | [awe](https://github.com/hilongjw) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--15 |  reactivity.md |  深入响应式原理 | [veaba](https://github.com/veaba) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--16 |  custom-directive.md |  自定义指令 | [harrytospring](https://github.com/harrytospring) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--17 |  mixins.md |  混合 | [harrytospring](https://github.com/harrytospring) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--18 |  plugins.md |  插件 | [hgcoder](https://github.com/hgcoder) | [hgcoder](https://github.com/hgcoder)-->\n<!--19 |  single-file-components.md |  单文件组件 | [ATLgo](https://github.com/ATLgo) | [zhouzihanntu](https://github.com/zhouzihanntu)-->\n<!--20 |  routing.md | 路由 | [dingyiming](https://github.com/dingyiming) | [mlyknown](https://github.com/mlyknown)-->\n<!--21 |  state-management.md |  状态管理 | [dear-lizhihua](https://github.com/dear-lizhihua) | [mlyknown](https://github.com/mlyknown)-->\n<!--22 |  unit-testing.md | 单元测试 | [70data](https://github.com/70data) | [mlyknown](https://github.com/mlyknown)-->\n<!--23 |  ssr.md |  服务端渲染 | [dingyiming](https://github.com/dingyiming) | [yongbolv](https://github.com/yongbolv)-->\n<!--### Migration  迁移-->\n<!--序号 | 对应文档文件名 | 中文标题 | 翻译贡献者 | 校对主要贡献者-->\n<!------- |  ------------- | --- | --- | --- | ----->\n<!--24 |  migration.md | 1.x迁移 | [harrytospring](https://github.com/harrytospring) | [yongbolv](https://github.com/yongbolv)-->\n<!--27 |  migration-vue-router.md | vue-router 0.7.x 迁移 | [forzajuve10](https://github.com/forzajuve10) | [yizhixiaolongxia](https://github.com/yizhixiaolongxia)-->\n<!--### Meta  更多-->\n<!--序号 | 对应文档文件名 | 中文标题 |  翻译贡献者 | 校对主要贡献者-->\n<!------- | ------------- | --- | --- | --- | ----->\n<!--25 |  comparison.md |   对比其他框架 | [yongbolv](https://github.com/yongbolv) | [yangzj1992](https://github.com/yangzj1992)-->\n<!--26 |  join.md |  加入 Vue.js 社区 | [daix6](https://github.com/daix6) | [zhouzihanntu](https://github.com/zhouzihanntu)-->\n<!--## API翻译贡献-->\n<!--序号 | 对应小节名称 | 中文标题 | 翻译贡献者 | 校对主要贡献者-->\n<!------- |  ------------- | --- | --- | --- | --- | ----->\n<!--1 |  Global Config | 全局配置 | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--2 |  Global API | 全局 API | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--3 |  Options / Data | 选项 / 数据 | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--4 |  Options / DOM | 选项 / DOM | [ATLgo](https://github.com/ATLgo) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--5 |  Options / Lifecycle Hooks | 选项 / 生命周期钩子 | [ATLgo](https://github.com/ATLgo) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--6 |  Options / Assets | 选项 / 资源 | [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--7 |  Options / Misc | 选项 / 杂项 | [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--8 |  Instance Properties | 实例属性 | [coolzjy](https://github.com/coolzjy) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--9 |  Instance Methods / Data | 实例方法 / 数据 | [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--10 |  Instance Methods / Events | 实例方法 / 事件 | [mlyknown](https://github.com/mlyknown) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--11 |   Instance Methods / Lifecycle | 实例方法 / 生命周期 |  [mlyknown](https://github.com/mlyknown)| [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--12 |  Directives | 指令| [dingyiming](https://github.com/dingyiming) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--13 |  Special Attributes | 特殊元素 | [70data](https://github.com/70data) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--14 |  Built-In Components | 内置的组件  | [dear-lizhihua](https://github.com/dear-lizhihua) | [bhnddowinf](https://github.com/bhnddowinf)-->\n<!--15 |  VNode Interface | VNode 接口  | [70data](https://github.com/70data) | [dear-lizhihua](https://github.com/dear-lizhihua)-->\n<!--16 |  Server-Side Rendering | 服务端渲染| [70data](https://github.com/70data) | [dear-lizhihua](https://github.com/dear-lizhihua)-->\n<!--## 示例翻译-->\n<!--翻译贡献者 ： [lindazhang102](https://github.com/lindazhang102)-->\n<!--## 感谢所有参与翻译的朋友们！-->\n"},{"title":"参与指南","type":"about","order":1,"_content":"\n\n## 参与要求\n\n暂时只能向我发送邮件","source":"about/guide.md","raw":"---\ntitle: 参与指南\ntype: about\norder: 1\n---\n\n\n## 参与要求\n\n暂时只能向我发送邮件","date":"2016-12-12T14:00:24.000Z","updated":"2016-12-12T13:09:19.000Z","path":"about/guide.html","comments":1,"layout":"page","_id":"ciwoiwpec00031a2d8v3xmtmc","content":"<h2 id=\"参与要求\"><a href=\"#参与要求\" class=\"headerlink\" title=\"参与要求\"></a>参与要求</h2><p>暂时只能向我发送邮件</p>\n","excerpt":"","more":"<h2 id=\"参与要求\"><a href=\"#参与要求\" class=\"headerlink\" title=\"参与要求\"></a>参与要求</h2><p>暂时只能向我发送邮件</p>\n"},{"_content":"# 支持我继续坚持分享\n\n<a href=\"https://www.patreon.com/evanyou\" target=\"_blank\">\n  <img style=\"width:120px\" src=\"/images/zfb.jpg\">\n  <span>支付宝向我转账~</span>\n</a>\n\n<a href=\"https://www.paypal.me/evanyou\" target=\"_blank\">\n  <img style=\"width:120px\" src=\"/images/wx.png\">\n  <span>微信向我转账~</span>\n</a>\n\n## 当前赞助商\n\n<p style=\"text-align: center; padding-top: 30px; margin-bottom: 0\"><a href=\"https://github.com/cleverfan/\"><img src=\"/images/github.png\" style=\"width: 300px\"></a></p>\n\n\n\n这个网站是用来记录并分享的，如果你觉得我写的文章对你有帮助，并且愿意支持我继续分享更多的知识。\n\n<!--Vue.js 是采用 MIT 许可的开源项目，使用完全免费。不过，如果没有资金的支持，维护和开发新功能是不可能持续的。你可以通过 [Patreon](https://www.patreon.com/evanyou) 或 [PayPal](https://www.paypal.me/evanyou) 来赞助。-->\n\n<!--如果你是企业经营者并且将 Vue 用在商业产品中，那么赞助 Vue 有商业上的益处：**可以让你的产品保持健康并得到积极的维护**，也能帮助你在 Vue 社区里曝光，从而更容易地吸引到 Vue 开发者。-->\n\n<!--如果你是企业经营者，并且使用 Vue.js 来开发核心产品，我也可以做顾问。[在 Twitter 上联系我。](https://twitter.com/youyuxi)-->\n\n如果可以用捐助来表示你的谢意——比如间或给我买杯咖啡 :)\n","source":"support-me/index.md","raw":"# 支持我继续坚持分享\n\n<a href=\"https://www.patreon.com/evanyou\" target=\"_blank\">\n  <img style=\"width:120px\" src=\"/images/zfb.jpg\">\n  <span>支付宝向我转账~</span>\n</a>\n\n<a href=\"https://www.paypal.me/evanyou\" target=\"_blank\">\n  <img style=\"width:120px\" src=\"/images/wx.png\">\n  <span>微信向我转账~</span>\n</a>\n\n## 当前赞助商\n\n<p style=\"text-align: center; padding-top: 30px; margin-bottom: 0\"><a href=\"https://github.com/cleverfan/\"><img src=\"/images/github.png\" style=\"width: 300px\"></a></p>\n\n\n\n这个网站是用来记录并分享的，如果你觉得我写的文章对你有帮助，并且愿意支持我继续分享更多的知识。\n\n<!--Vue.js 是采用 MIT 许可的开源项目，使用完全免费。不过，如果没有资金的支持，维护和开发新功能是不可能持续的。你可以通过 [Patreon](https://www.patreon.com/evanyou) 或 [PayPal](https://www.paypal.me/evanyou) 来赞助。-->\n\n<!--如果你是企业经营者并且将 Vue 用在商业产品中，那么赞助 Vue 有商业上的益处：**可以让你的产品保持健康并得到积极的维护**，也能帮助你在 Vue 社区里曝光，从而更容易地吸引到 Vue 开发者。-->\n\n<!--如果你是企业经营者，并且使用 Vue.js 来开发核心产品，我也可以做顾问。[在 Twitter 上联系我。](https://twitter.com/youyuxi)-->\n\n如果可以用捐助来表示你的谢意——比如间或给我买杯咖啡 :)\n","date":"2016-12-12T14:00:24.000Z","updated":"2016-12-12T13:25:14.000Z","path":"support-me/index.html","title":"","comments":1,"layout":"page","_id":"ciwoiwpeq00041a2dlo6k3eub","content":"<h1 id=\"支持我继续坚持分享\"><a href=\"#支持我继续坚持分享\" class=\"headerlink\" title=\"支持我继续坚持分享\"></a>支持我继续坚持分享</h1><p><a href=\"https://www.patreon.com/evanyou\" target=\"_blank\"><br>  <img style=\"width:120px\" src=\"/images/zfb.jpg\"><br>  <span>支付宝向我转账~</span><br></a></p>\n<p><a href=\"https://www.paypal.me/evanyou\" target=\"_blank\"><br>  <img style=\"width:120px\" src=\"/images/wx.png\"><br>  <span>微信向我转账~</span><br></a></p>\n<h2 id=\"当前赞助商\"><a href=\"#当前赞助商\" class=\"headerlink\" title=\"当前赞助商\"></a>当前赞助商</h2><p style=\"text-align: center; padding-top: 30px; margin-bottom: 0\"><a href=\"https://github.com/cleverfan/\" target=\"_blank\" rel=\"external\"><img src=\"/images/github.png\" style=\"width: 300px\"></a></p>\n\n\n\n<p>这个网站是用来记录并分享的，如果你觉得我写的文章对你有帮助，并且愿意支持我继续分享更多的知识。</p>\n<!--Vue.js 是采用 MIT 许可的开源项目，使用完全免费。不过，如果没有资金的支持，维护和开发新功能是不可能持续的。你可以通过 [Patreon](https://www.patreon.com/evanyou) 或 [PayPal](https://www.paypal.me/evanyou) 来赞助。-->\n<!--如果你是企业经营者并且将 Vue 用在商业产品中，那么赞助 Vue 有商业上的益处：**可以让你的产品保持健康并得到积极的维护**，也能帮助你在 Vue 社区里曝光，从而更容易地吸引到 Vue 开发者。-->\n<!--如果你是企业经营者，并且使用 Vue.js 来开发核心产品，我也可以做顾问。[在 Twitter 上联系我。](https://twitter.com/youyuxi)-->\n<p>如果可以用捐助来表示你的谢意——比如间或给我买杯咖啡 :)</p>\n","excerpt":"","more":"<h1 id=\"支持我继续坚持分享\"><a href=\"#支持我继续坚持分享\" class=\"headerlink\" title=\"支持我继续坚持分享\"></a>支持我继续坚持分享</h1><p><a href=\"https://www.patreon.com/evanyou\" target=\"_blank\"><br>  <img style=\"width:120px\" src=\"/images/zfb.jpg\"><br>  <span>支付宝向我转账~</span><br></a></p>\n<p><a href=\"https://www.paypal.me/evanyou\" target=\"_blank\"><br>  <img style=\"width:120px\" src=\"/images/wx.png\"><br>  <span>微信向我转账~</span><br></a></p>\n<h2 id=\"当前赞助商\"><a href=\"#当前赞助商\" class=\"headerlink\" title=\"当前赞助商\"></a>当前赞助商</h2><p style=\"text-align: center; padding-top: 30px; margin-bottom: 0\"><a href=\"https://github.com/cleverfan/\"><img src=\"/images/github.png\" style=\"width: 300px\"></a></p>\n\n\n\n<p>这个网站是用来记录并分享的，如果你觉得我写的文章对你有帮助，并且愿意支持我继续分享更多的知识。</p>\n<!--Vue.js 是采用 MIT 许可的开源项目，使用完全免费。不过，如果没有资金的支持，维护和开发新功能是不可能持续的。你可以通过 [Patreon](https://www.patreon.com/evanyou) 或 [PayPal](https://www.paypal.me/evanyou) 来赞助。-->\n<!--如果你是企业经营者并且将 Vue 用在商业产品中，那么赞助 Vue 有商业上的益处：**可以让你的产品保持健康并得到积极的维护**，也能帮助你在 Vue 社区里曝光，从而更容易地吸引到 Vue 开发者。-->\n<!--如果你是企业经营者，并且使用 Vue.js 来开发核心产品，我也可以做顾问。[在 Twitter 上联系我。](https://twitter.com/youyuxi)-->\n<p>如果可以用捐助来表示你的谢意——比如间或给我买杯咖啡 :)</p>\n"},{"title":"万物皆对象(下)","type":"javaImprove","order":2,"_content":"\n## **对象的强引用，软引用，弱引用和虚引用**\n  \n  Java中是JVM负责内存的分配和回收，这样虽然使用方便，程序不用再像使用c那样操心内存，但同时也是它的缺点(不够灵活)。为了解决内存操作不灵活这个问题，可以采用软引用等方法。\n\n先介绍一下这四种引用：\n\n- 强引用\n\n > 以前我们使用的大部分引用实际上都是强引用，这是使用最普遍的引用。如果一个对象具有强引用，那就类似于必不可少的生活用品，垃圾回收器绝不会回收它。当内存空 间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足问题。\n\n\n- 软引用（SoftReference）\n\n  > 如果一个对象只具有软引用，那就类似于可有可物的生活用品。如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。\n   \n   > 软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收，JAVA虚拟机就会把这个软引用加入到与之关联的引用队列中。\n\n \n- 弱引用（WeakReference）\n    > 如果一个对象只具有弱引用，那就类似于可有可物的生活用品。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它 所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。 \n   \n   >  弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。\n\n\n- 虚引用（PhantomReference）\n    > \"虚引用\"顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。\n    \n    > 虚引用主要用来跟踪对象被垃圾回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列（ReferenceQueue）联合使用。当垃 圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是 否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。\n\n在实际开发中，弱引用和虚引用不常用，用得比较多的是软引用，因为它可以加速jvm的回收。\n\n软引用的使用方式：\n\n![这里写图片描述](http://img.blog.csdn.net/20161127203117708) \n\n关于软引用，我之后会单独写一篇文章，所以这里先一笔带过。\n\n## **对象的复制**\n\njava除了用new来创建对象，还可以通过clone来复制对象。\n\n那么这两种方式有什么相同和不同呢？ \n\n- new\n\n>new操作符的本意是分配内存。程序执行到new操作符时，首先去看new操作符后面的类型，因为知道了类型，才能知道要分配多大的内存空间。分配完内存之后，再调用构造函数，填充对象的各个域，这一步叫做对象的初始化，构造方法返回后，一个对象创建完毕，可以把他的引用（地址）发布到外部，在外部就可以使用这个引用操纵这个对象。\n\n- clone\n>clone在第一步是和new相似的， 都是分配内存，调用clone方法时，分配的内存和源对象（即调用clone方法的对象）相同，然后再使用原对象中对应的各个域，填充新对象的域， 填充完成之后，clone方法返回，一个新的相同的对象被创建，同样可以把这个新对象的引用发布到外部。\n\n\n如何利用clone的方式来得到一个对象呢？\n\n看代码：\n\n>![这里写图片描述](http://img.blog.csdn.net/20161127204300965)\n\n>对Person类做了一些修改\n\n看实现代码：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127204359354)\n\n这样就得到了一个和原来一样的新对象。\n\n\n## **深复制和浅复制**\n\n但是，细心并且善于思考的人可能一经发现了一个问题。\n\nage是一个基本数据类型，支架clone没什么问题，但是name可是一个String类型的啊。我们clone后的对象里的name和原来对象的name是不是指向同一个字符串常量呢？\n\n做个试验：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127205753811) \n\n> 果然，是同一个对象。如果你不能理解，那么看这个图。\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127210126755)\n\n> 其实如果只是String还好，因为String的不可变性，当你随便修改一个值的时候，他们就会指向不同的地址了，但是除了String，其他都是可变的。这就危险了。\n\n\n上面的这种情况，就是浅克隆。这种方式在你的属性列表中有其他对象的引用的时候其实是很危险的。所以，我们需要深克隆。也就是说我们需要将这个对象里的对象也clone一份。怎么做呢？\n\n在内存中通过字节流的拷贝是比较容易实现的。把母对象写入到一个字节流中，再从字节流中将其读出来，这样就可以创建一个新的对象了，并且该新对象与母对象之间并不存在引用共享的问题，真正实现对象的深拷贝。\n```\n//使用该工具类的对象必须要实现 Serializable 接口，否则是没有办法实现克隆的。\npublic class CloneUtils {\n\n    public static <T extends Serializable> T clone(T   obj){\n        T cloneObj = null;\n        try {\n            //写入字节流\n            ByteArrayOutputStream out = new ByteArrayOutputStream();\n            ObjectOutputStream obs = new   ObjectOutputStream(out);\n            obs.writeObject(obj);\n            obs.close();\n\n            //分配内存，写入原始对象，生成新对象\n            ByteArrayInputStream ios = new  ByteArrayInputStream(out.toByteArray());\n            ObjectInputStream ois = new ObjectInputStream(ios);\n            //返回生成的新对象\n            cloneObj = (T) ois.readObject();\n            ois.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return cloneObj;\n    }\n}\n```\n使用该工具类的对象只要实现 Serializable 接口就可实现对象的克隆，无须继承 Cloneable 接口实现 clone() 方法。\n\n测试一下：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127211824152)\n\n> 很完美\n\n>这个时候，Person类实现了Serializable接口\n\n是否使用复制，深复制还是浅复制看情况来使用。\n\n\n> 关于序列化与反序列化以后会讲。\n\n\n----------\n这篇文章到这里就暂时告一段落了，后续有补充的话我会继续补充，有错误的话，我也会及时改正。欢迎大家提出问题。\n\n> 事例代码放在github：https://github.com/CleverFan/JavaImprove\n","source":"study/java/one.md","raw":"---\ntitle: 万物皆对象(下)\ntype: javaImprove\norder: 2\n---\n\n## **对象的强引用，软引用，弱引用和虚引用**\n  \n  Java中是JVM负责内存的分配和回收，这样虽然使用方便，程序不用再像使用c那样操心内存，但同时也是它的缺点(不够灵活)。为了解决内存操作不灵活这个问题，可以采用软引用等方法。\n\n先介绍一下这四种引用：\n\n- 强引用\n\n > 以前我们使用的大部分引用实际上都是强引用，这是使用最普遍的引用。如果一个对象具有强引用，那就类似于必不可少的生活用品，垃圾回收器绝不会回收它。当内存空 间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足问题。\n\n\n- 软引用（SoftReference）\n\n  > 如果一个对象只具有软引用，那就类似于可有可物的生活用品。如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。\n   \n   > 软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收，JAVA虚拟机就会把这个软引用加入到与之关联的引用队列中。\n\n \n- 弱引用（WeakReference）\n    > 如果一个对象只具有弱引用，那就类似于可有可物的生活用品。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它 所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。 \n   \n   >  弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。\n\n\n- 虚引用（PhantomReference）\n    > \"虚引用\"顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。\n    \n    > 虚引用主要用来跟踪对象被垃圾回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列（ReferenceQueue）联合使用。当垃 圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是 否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。\n\n在实际开发中，弱引用和虚引用不常用，用得比较多的是软引用，因为它可以加速jvm的回收。\n\n软引用的使用方式：\n\n![这里写图片描述](http://img.blog.csdn.net/20161127203117708) \n\n关于软引用，我之后会单独写一篇文章，所以这里先一笔带过。\n\n## **对象的复制**\n\njava除了用new来创建对象，还可以通过clone来复制对象。\n\n那么这两种方式有什么相同和不同呢？ \n\n- new\n\n>new操作符的本意是分配内存。程序执行到new操作符时，首先去看new操作符后面的类型，因为知道了类型，才能知道要分配多大的内存空间。分配完内存之后，再调用构造函数，填充对象的各个域，这一步叫做对象的初始化，构造方法返回后，一个对象创建完毕，可以把他的引用（地址）发布到外部，在外部就可以使用这个引用操纵这个对象。\n\n- clone\n>clone在第一步是和new相似的， 都是分配内存，调用clone方法时，分配的内存和源对象（即调用clone方法的对象）相同，然后再使用原对象中对应的各个域，填充新对象的域， 填充完成之后，clone方法返回，一个新的相同的对象被创建，同样可以把这个新对象的引用发布到外部。\n\n\n如何利用clone的方式来得到一个对象呢？\n\n看代码：\n\n>![这里写图片描述](http://img.blog.csdn.net/20161127204300965)\n\n>对Person类做了一些修改\n\n看实现代码：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127204359354)\n\n这样就得到了一个和原来一样的新对象。\n\n\n## **深复制和浅复制**\n\n但是，细心并且善于思考的人可能一经发现了一个问题。\n\nage是一个基本数据类型，支架clone没什么问题，但是name可是一个String类型的啊。我们clone后的对象里的name和原来对象的name是不是指向同一个字符串常量呢？\n\n做个试验：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127205753811) \n\n> 果然，是同一个对象。如果你不能理解，那么看这个图。\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127210126755)\n\n> 其实如果只是String还好，因为String的不可变性，当你随便修改一个值的时候，他们就会指向不同的地址了，但是除了String，其他都是可变的。这就危险了。\n\n\n上面的这种情况，就是浅克隆。这种方式在你的属性列表中有其他对象的引用的时候其实是很危险的。所以，我们需要深克隆。也就是说我们需要将这个对象里的对象也clone一份。怎么做呢？\n\n在内存中通过字节流的拷贝是比较容易实现的。把母对象写入到一个字节流中，再从字节流中将其读出来，这样就可以创建一个新的对象了，并且该新对象与母对象之间并不存在引用共享的问题，真正实现对象的深拷贝。\n```\n//使用该工具类的对象必须要实现 Serializable 接口，否则是没有办法实现克隆的。\npublic class CloneUtils {\n\n    public static <T extends Serializable> T clone(T   obj){\n        T cloneObj = null;\n        try {\n            //写入字节流\n            ByteArrayOutputStream out = new ByteArrayOutputStream();\n            ObjectOutputStream obs = new   ObjectOutputStream(out);\n            obs.writeObject(obj);\n            obs.close();\n\n            //分配内存，写入原始对象，生成新对象\n            ByteArrayInputStream ios = new  ByteArrayInputStream(out.toByteArray());\n            ObjectInputStream ois = new ObjectInputStream(ios);\n            //返回生成的新对象\n            cloneObj = (T) ois.readObject();\n            ois.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return cloneObj;\n    }\n}\n```\n使用该工具类的对象只要实现 Serializable 接口就可实现对象的克隆，无须继承 Cloneable 接口实现 clone() 方法。\n\n测试一下：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127211824152)\n\n> 很完美\n\n>这个时候，Person类实现了Serializable接口\n\n是否使用复制，深复制还是浅复制看情况来使用。\n\n\n> 关于序列化与反序列化以后会讲。\n\n\n----------\n这篇文章到这里就暂时告一段落了，后续有补充的话我会继续补充，有错误的话，我也会及时改正。欢迎大家提出问题。\n\n> 事例代码放在github：https://github.com/CleverFan/JavaImprove\n","date":"2016-12-13T03:51:51.000Z","updated":"2016-12-13T03:51:51.000Z","path":"study/java/one.html","comments":1,"layout":"page","_id":"ciwoiwpeu00051a2d9hom8bli","content":"<h2 id=\"对象的强引用，软引用，弱引用和虚引用\"><a href=\"#对象的强引用，软引用，弱引用和虚引用\" class=\"headerlink\" title=\"对象的强引用，软引用，弱引用和虚引用\"></a><strong>对象的强引用，软引用，弱引用和虚引用</strong></h2><p>  Java中是JVM负责内存的分配和回收，这样虽然使用方便，程序不用再像使用c那样操心内存，但同时也是它的缺点(不够灵活)。为了解决内存操作不灵活这个问题，可以采用软引用等方法。</p>\n<p>先介绍一下这四种引用：</p>\n<ul>\n<li><p>强引用</p>\n<blockquote>\n<p>以前我们使用的大部分引用实际上都是强引用，这是使用最普遍的引用。如果一个对象具有强引用，那就类似于必不可少的生活用品，垃圾回收器绝不会回收它。当内存空 间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足问题。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>软引用（SoftReference）</p>\n<blockquote>\n<p>如果一个对象只具有软引用，那就类似于可有可物的生活用品。如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。</p>\n<p>软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收，JAVA虚拟机就会把这个软引用加入到与之关联的引用队列中。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>弱引用（WeakReference）</p>\n<blockquote>\n<p>如果一个对象只具有弱引用，那就类似于可有可物的生活用品。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它 所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。 </p>\n<p> 弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>虚引用（PhantomReference）</p>\n<blockquote>\n<p>“虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。</p>\n<p>虚引用主要用来跟踪对象被垃圾回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列（ReferenceQueue）联合使用。当垃 圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是 否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。</p>\n</blockquote>\n</li>\n</ul>\n<p>在实际开发中，弱引用和虚引用不常用，用得比较多的是软引用，因为它可以加速jvm的回收。</p>\n<p>软引用的使用方式：</p>\n<p><img src=\"http://img.blog.csdn.net/20161127203117708\" alt=\"这里写图片描述\"> </p>\n<p>关于软引用，我之后会单独写一篇文章，所以这里先一笔带过。</p>\n<h2 id=\"对象的复制\"><a href=\"#对象的复制\" class=\"headerlink\" title=\"对象的复制\"></a><strong>对象的复制</strong></h2><p>java除了用new来创建对象，还可以通过clone来复制对象。</p>\n<p>那么这两种方式有什么相同和不同呢？ </p>\n<ul>\n<li>new</li>\n</ul>\n<blockquote>\n<p>new操作符的本意是分配内存。程序执行到new操作符时，首先去看new操作符后面的类型，因为知道了类型，才能知道要分配多大的内存空间。分配完内存之后，再调用构造函数，填充对象的各个域，这一步叫做对象的初始化，构造方法返回后，一个对象创建完毕，可以把他的引用（地址）发布到外部，在外部就可以使用这个引用操纵这个对象。</p>\n</blockquote>\n<ul>\n<li>clone<blockquote>\n<p>clone在第一步是和new相似的， 都是分配内存，调用clone方法时，分配的内存和源对象（即调用clone方法的对象）相同，然后再使用原对象中对应的各个域，填充新对象的域， 填充完成之后，clone方法返回，一个新的相同的对象被创建，同样可以把这个新对象的引用发布到外部。</p>\n</blockquote>\n</li>\n</ul>\n<p>如何利用clone的方式来得到一个对象呢？</p>\n<p>看代码：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127204300965\" alt=\"这里写图片描述\"></p>\n<p>对Person类做了一些修改</p>\n</blockquote>\n<p>看实现代码：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127204359354\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<p>这样就得到了一个和原来一样的新对象。</p>\n<h2 id=\"深复制和浅复制\"><a href=\"#深复制和浅复制\" class=\"headerlink\" title=\"深复制和浅复制\"></a><strong>深复制和浅复制</strong></h2><p>但是，细心并且善于思考的人可能一经发现了一个问题。</p>\n<p>age是一个基本数据类型，支架clone没什么问题，但是name可是一个String类型的啊。我们clone后的对象里的name和原来对象的name是不是指向同一个字符串常量呢？</p>\n<p>做个试验：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127205753811\" alt=\"这里写图片描述\"> </p>\n<p>果然，是同一个对象。如果你不能理解，那么看这个图。</p>\n<p><img src=\"http://img.blog.csdn.net/20161127210126755\" alt=\"这里写图片描述\"></p>\n<p>其实如果只是String还好，因为String的不可变性，当你随便修改一个值的时候，他们就会指向不同的地址了，但是除了String，其他都是可变的。这就危险了。</p>\n</blockquote>\n<p>上面的这种情况，就是浅克隆。这种方式在你的属性列表中有其他对象的引用的时候其实是很危险的。所以，我们需要深克隆。也就是说我们需要将这个对象里的对象也clone一份。怎么做呢？</p>\n<p>在内存中通过字节流的拷贝是比较容易实现的。把母对象写入到一个字节流中，再从字节流中将其读出来，这样就可以创建一个新的对象了，并且该新对象与母对象之间并不存在引用共享的问题，真正实现对象的深拷贝。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">//使用该工具类的对象必须要实现 Serializable 接口，否则是没有办法实现克隆的。</div><div class=\"line\">public class CloneUtils &#123;</div><div class=\"line\"></div><div class=\"line\">    public static &lt;T extends Serializable&gt; T clone(T   obj)&#123;</div><div class=\"line\">        T cloneObj = null;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            //写入字节流</div><div class=\"line\">            ByteArrayOutputStream out = new ByteArrayOutputStream();</div><div class=\"line\">            ObjectOutputStream obs = new   ObjectOutputStream(out);</div><div class=\"line\">            obs.writeObject(obj);</div><div class=\"line\">            obs.close();</div><div class=\"line\"></div><div class=\"line\">            //分配内存，写入原始对象，生成新对象</div><div class=\"line\">            ByteArrayInputStream ios = new  ByteArrayInputStream(out.toByteArray());</div><div class=\"line\">            ObjectInputStream ois = new ObjectInputStream(ios);</div><div class=\"line\">            //返回生成的新对象</div><div class=\"line\">            cloneObj = (T) ois.readObject();</div><div class=\"line\">            ois.close();</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return cloneObj;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用该工具类的对象只要实现 Serializable 接口就可实现对象的克隆，无须继承 Cloneable 接口实现 clone() 方法。</p>\n<p>测试一下：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127211824152\" alt=\"这里写图片描述\"></p>\n<p>很完美</p>\n<p>这个时候，Person类实现了Serializable接口</p>\n</blockquote>\n<p>是否使用复制，深复制还是浅复制看情况来使用。</p>\n<blockquote>\n<p>关于序列化与反序列化以后会讲。</p>\n</blockquote>\n<hr>\n<p>这篇文章到这里就暂时告一段落了，后续有补充的话我会继续补充，有错误的话，我也会及时改正。欢迎大家提出问题。</p>\n<blockquote>\n<p>事例代码放在github：<a href=\"https://github.com/CleverFan/JavaImprove\" target=\"_blank\" rel=\"external\">https://github.com/CleverFan/JavaImprove</a></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"对象的强引用，软引用，弱引用和虚引用\"><a href=\"#对象的强引用，软引用，弱引用和虚引用\" class=\"headerlink\" title=\"对象的强引用，软引用，弱引用和虚引用\"></a><strong>对象的强引用，软引用，弱引用和虚引用</strong></h2><p>  Java中是JVM负责内存的分配和回收，这样虽然使用方便，程序不用再像使用c那样操心内存，但同时也是它的缺点(不够灵活)。为了解决内存操作不灵活这个问题，可以采用软引用等方法。</p>\n<p>先介绍一下这四种引用：</p>\n<ul>\n<li><p>强引用</p>\n<blockquote>\n<p>以前我们使用的大部分引用实际上都是强引用，这是使用最普遍的引用。如果一个对象具有强引用，那就类似于必不可少的生活用品，垃圾回收器绝不会回收它。当内存空 间不足，Java虚拟机宁愿抛出OutOfMemoryError错误，使程序异常终止，也不会靠随意回收具有强引用的对象来解决内存不足问题。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>软引用（SoftReference）</p>\n<blockquote>\n<p>如果一个对象只具有软引用，那就类似于可有可物的生活用品。如果内存空间足够，垃圾回收器就不会回收它，如果内存空间不足了，就会回收这些对象的内存。只要垃圾回收器没有回收它，该对象就可以被程序使用。软引用可用来实现内存敏感的高速缓存。</p>\n<p>软引用可以和一个引用队列（ReferenceQueue）联合使用，如果软引用所引用的对象被垃圾回收，JAVA虚拟机就会把这个软引用加入到与之关联的引用队列中。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>弱引用（WeakReference）</p>\n<blockquote>\n<p>如果一个对象只具有弱引用，那就类似于可有可物的生活用品。弱引用与软引用的区别在于：只具有弱引用的对象拥有更短暂的生命周期。在垃圾回收器线程扫描它 所管辖的内存区域的过程中，一旦发现了只具有弱引用的对象，不管当前内存空间足够与否，都会回收它的内存。不过，由于垃圾回收器是一个优先级很低的线程， 因此不一定会很快发现那些只具有弱引用的对象。 </p>\n<p> 弱引用可以和一个引用队列（ReferenceQueue）联合使用，如果弱引用所引用的对象被垃圾回收，Java虚拟机就会把这个弱引用加入到与之关联的引用队列中。</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li><p>虚引用（PhantomReference）</p>\n<blockquote>\n<p>“虚引用”顾名思义，就是形同虚设，与其他几种引用都不同，虚引用并不会决定对象的生命周期。如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收。</p>\n<p>虚引用主要用来跟踪对象被垃圾回收的活动。虚引用与软引用和弱引用的一个区别在于：虚引用必须和引用队列（ReferenceQueue）联合使用。当垃 圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，把这个虚引用加入到与之关联的引用队列中。程序可以通过判断引用队列中是 否已经加入了虚引用，来了解被引用的对象是否将要被垃圾回收。程序如果发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动。</p>\n</blockquote>\n</li>\n</ul>\n<p>在实际开发中，弱引用和虚引用不常用，用得比较多的是软引用，因为它可以加速jvm的回收。</p>\n<p>软引用的使用方式：</p>\n<p><img src=\"http://img.blog.csdn.net/20161127203117708\" alt=\"这里写图片描述\"> </p>\n<p>关于软引用，我之后会单独写一篇文章，所以这里先一笔带过。</p>\n<h2 id=\"对象的复制\"><a href=\"#对象的复制\" class=\"headerlink\" title=\"对象的复制\"></a><strong>对象的复制</strong></h2><p>java除了用new来创建对象，还可以通过clone来复制对象。</p>\n<p>那么这两种方式有什么相同和不同呢？ </p>\n<ul>\n<li>new</li>\n</ul>\n<blockquote>\n<p>new操作符的本意是分配内存。程序执行到new操作符时，首先去看new操作符后面的类型，因为知道了类型，才能知道要分配多大的内存空间。分配完内存之后，再调用构造函数，填充对象的各个域，这一步叫做对象的初始化，构造方法返回后，一个对象创建完毕，可以把他的引用（地址）发布到外部，在外部就可以使用这个引用操纵这个对象。</p>\n</blockquote>\n<ul>\n<li>clone<blockquote>\n<p>clone在第一步是和new相似的， 都是分配内存，调用clone方法时，分配的内存和源对象（即调用clone方法的对象）相同，然后再使用原对象中对应的各个域，填充新对象的域， 填充完成之后，clone方法返回，一个新的相同的对象被创建，同样可以把这个新对象的引用发布到外部。</p>\n</blockquote>\n</li>\n</ul>\n<p>如何利用clone的方式来得到一个对象呢？</p>\n<p>看代码：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127204300965\" alt=\"这里写图片描述\"></p>\n<p>对Person类做了一些修改</p>\n</blockquote>\n<p>看实现代码：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127204359354\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<p>这样就得到了一个和原来一样的新对象。</p>\n<h2 id=\"深复制和浅复制\"><a href=\"#深复制和浅复制\" class=\"headerlink\" title=\"深复制和浅复制\"></a><strong>深复制和浅复制</strong></h2><p>但是，细心并且善于思考的人可能一经发现了一个问题。</p>\n<p>age是一个基本数据类型，支架clone没什么问题，但是name可是一个String类型的啊。我们clone后的对象里的name和原来对象的name是不是指向同一个字符串常量呢？</p>\n<p>做个试验：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127205753811\" alt=\"这里写图片描述\"> </p>\n<p>果然，是同一个对象。如果你不能理解，那么看这个图。</p>\n<p><img src=\"http://img.blog.csdn.net/20161127210126755\" alt=\"这里写图片描述\"></p>\n<p>其实如果只是String还好，因为String的不可变性，当你随便修改一个值的时候，他们就会指向不同的地址了，但是除了String，其他都是可变的。这就危险了。</p>\n</blockquote>\n<p>上面的这种情况，就是浅克隆。这种方式在你的属性列表中有其他对象的引用的时候其实是很危险的。所以，我们需要深克隆。也就是说我们需要将这个对象里的对象也clone一份。怎么做呢？</p>\n<p>在内存中通过字节流的拷贝是比较容易实现的。把母对象写入到一个字节流中，再从字节流中将其读出来，这样就可以创建一个新的对象了，并且该新对象与母对象之间并不存在引用共享的问题，真正实现对象的深拷贝。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div></pre></td><td class=\"code\"><pre><div class=\"line\">//使用该工具类的对象必须要实现 Serializable 接口，否则是没有办法实现克隆的。</div><div class=\"line\">public class CloneUtils &#123;</div><div class=\"line\"></div><div class=\"line\">    public static &lt;T extends Serializable&gt; T clone(T   obj)&#123;</div><div class=\"line\">        T cloneObj = null;</div><div class=\"line\">        try &#123;</div><div class=\"line\">            //写入字节流</div><div class=\"line\">            ByteArrayOutputStream out = new ByteArrayOutputStream();</div><div class=\"line\">            ObjectOutputStream obs = new   ObjectOutputStream(out);</div><div class=\"line\">            obs.writeObject(obj);</div><div class=\"line\">            obs.close();</div><div class=\"line\"></div><div class=\"line\">            //分配内存，写入原始对象，生成新对象</div><div class=\"line\">            ByteArrayInputStream ios = new  ByteArrayInputStream(out.toByteArray());</div><div class=\"line\">            ObjectInputStream ois = new ObjectInputStream(ios);</div><div class=\"line\">            //返回生成的新对象</div><div class=\"line\">            cloneObj = (T) ois.readObject();</div><div class=\"line\">            ois.close();</div><div class=\"line\">        &#125; catch (Exception e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        return cloneObj;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>使用该工具类的对象只要实现 Serializable 接口就可实现对象的克隆，无须继承 Cloneable 接口实现 clone() 方法。</p>\n<p>测试一下：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127211824152\" alt=\"这里写图片描述\"></p>\n<p>很完美</p>\n<p>这个时候，Person类实现了Serializable接口</p>\n</blockquote>\n<p>是否使用复制，深复制还是浅复制看情况来使用。</p>\n<blockquote>\n<p>关于序列化与反序列化以后会讲。</p>\n</blockquote>\n<hr>\n<p>这篇文章到这里就暂时告一段落了，后续有补充的话我会继续补充，有错误的话，我也会及时改正。欢迎大家提出问题。</p>\n<blockquote>\n<p>事例代码放在github：<a href=\"https://github.com/CleverFan/JavaImprove\">https://github.com/CleverFan/JavaImprove</a></p>\n</blockquote>\n"},{"title":"开始","type":"javaImprove","order":0,"_content":"\n恩，大概就是这样","source":"study/java/index.md","raw":"---\ntitle: 开始\ntype: javaImprove\norder: 0\n---\n\n恩，大概就是这样","date":"2016-12-13T03:55:54.000Z","updated":"2016-12-13T03:55:54.000Z","path":"study/java/index.html","comments":1,"layout":"page","_id":"ciwoiwpeu00061a2dnbb81oeg","content":"<p>恩，大概就是这样</p>\n","excerpt":"","more":"<p>恩，大概就是这样</p>\n"},{"title":"继承","type":"javaImprove","order":4,"_content":"\n> 学习一个新知识的第一步，就是要知道它是什么，然后要知道为什么要用它，最后要知道如何使用它。这篇文章，我们重新认识一下java中的继承。\n\n## **继承是个什么东西**\n\n我们先来看一下上一篇文章中的代码：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161129160404250)![这里写图片描述](http://img.blog.csdn.net/20161129160417453) \n\n 你会发现，这两个类中都有name属性，都有marry方法。一个人，不可能只有名字吧。他还有年龄，地址，手机号码，身份证号码，身高，体重巴拉巴拉的。除了男人和女人，还有小孩，老人，教师。。。\n\n如果我们每个类里都写一遍name，age。。。也许你还没写完程序，自己就先累死了。不用我说，大家也应该知道了，没错，我们需要继承的帮助。\n\n我们把相同的属性抽取出来，定义一个新的类Person，然后让男人，女人都去继承它，从而获得Person的属性，这样，就大大简化了我们的工作。\n\n我们来尝试一下。\n\n``` java\n//父类\npublic class Person {\n    protected String name;\n    protected int age;\n\n    public void eat(){\n        System.out.println(\"i am eating\");\n    }\n}\n//Man类 继承Person\npublic class Man extends Person {\n    private boolean hasBeard;\n\n    public void showMan(){\n        System.out.println(\"i am a man\");\n    }\n\n    public boolean isHasBeard() {\n        return hasBeard;\n    }\n}\n//woman类 继承Person\npublic class Woman extends Person{\n    private boolean hasLongHair;\n\n    public void shouWoman(){\n        System.out.println(\"i am a woman\");\n    }\n\n    public boolean isHasLongHair() {\n        return hasLongHair;\n    }\n}\n```\n简单的继承我想大家都懂，我就不多说占用篇幅了。\n \n## **继承的特点**\n\n我们已经知道了什么是继承，那么继承有没有什么限制呢？\n\n### **1.java中只支持单继承**\n也就是说，一个类只能够有一个父类。但是java支持“多重继承”。\n\n单继承：\n\n``` java\nclass A(){}\nclass B extends A (){} \n```\n多重继承：\n\n``` java\nclass A{}\nclass B extends A {} \nclass C extends B {} \n```\n\n> 为什么java不支持多继承呢？因为容易造成不必要的混乱。比如说：\n>\n> - **结构复杂化**：如果是单一继承，一个类的父类是什么，父类的父类是什么，都很明确，因为只有单一的继承关系，然而如果是多重继承的话，一个类有多个父类，这些父类又有自己的父类，那么类之间的关系就很复杂了。\n- **优先顺序模糊**：假如我有A，C类同时继承了基类，B类继承了A类，然后D类又同时继承了B和C类，所以D类继承父类的方法的顺序应该是D、B、A、C还是D、B、C、A，或者是其他的顺序，很不明确。\n- **功能冲突**：因为多重继承有多个父类，所以当不同的父类中有相同的方法是就会产生冲突。如果B类和C类同时又有相同的方法时，D继承的是哪个方法就不明确了，因为存在两种可能性。\n\n> 当然，多继承的这些问题很多语言已经解决了，比如c++，python等，但并不是所有的语言都有必要去解决这个问题。java的类虽然不能实现多继承，但是java的接口支持多实现，这个我们讲到接口的时候再说。\n\n>对多继承感兴趣的可以google一下mixin（混入），还可以去看一下基于java8的mixin实现（大多数都是线程不安全的，不要随便用）。  \n\n### **2.子类拥有父类非private的属性，方法**\n也就是说，父类的属性或者方法如果是peivate的，那么子类是不能继承它的。讲到这里，就必须得提一下四个修饰符了：\n\n| ---- |本类 | 同包（无关类或子类）|不同包（子类）|不同包（无关类）\n| --------- |:----:| :-----:|:--:|:-:\n| private | ✅ | |\n| default | ✅ | ✅ |\n| protected| ✅ | ✅|✅\n|public|✅|✅|✅|✅\n\n在java中，protected关键字大展身手的地方就是在继承中。《thinking in java》中是这样介绍protected的：\n\n> 在理想世界中，仅靠关键字private已经足够了。但在实际项目中，经常会想要将某些事物尽可能堆这个世界隐藏起来，但仍然允许导出的类的成员访问他们。关键字protected就是起这个作用的。它指明”就类用户而言，这是privated，但是对于任何一个继承于此类的导出类或其他任何一个位于同一个包内的类来说，他却是可以访问的”\n\n怎么理解呢？写个代码你就明白了\n\n``` java\n\npackage cn.pkgA\nclass A {\n\tprotected String name；\n}\nclass B extends A{}\nclass C {\n\tB b = new B();\n\tb.name;//可以访问到\n}\npackage cn.pkgB\n\nclass C {\n\tB b = new B();\n\tb.name;//访问不到\n}\n\n\n```\n\n### **3.子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。**\n\n如果子类只能有父类的属性和方法，那要子类还有什么用？？\n\n### **4.子类可以用自己的方式实现父类的方法。**\n\n这个叫做函数重写（覆盖），我们一会会重点分析。\n\n\n## **构造器**\n\n除了被peivate修饰的方法和变量之外，父类的构造器也不能被子类继承。\n\n但是父类的构造器带有参数的，则必须在子类的构造器中显式地通过super关键字调用父类的构造器并配以适当的当属列表。\n\n如果父类有无参构造器，则在子类的构造器中用super调用父类构造器不是必须的，如果没有使用super关键字，系统会自动调用父类的无参构造器。\n\n我们给Person类添加一个构造器：\n\n``` java\npublic class Person {\n    protected String name;\n    protected int age;\n\n    public void eat(){\n        System.out.println(\"i am eating\");\n    }\n\t//带参数的构造器\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n```\n\n这个时候，如果你不给子类添加构造器并在第一行写入super（name，age），则会报错：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161129165450586) \n\n在子类添加如下方法后错误消失：\n\n``` java\npublic Man(String name, int age/*, boolean hasBeard*/) {\n    super(name, age);\n    //this.hasBeard = hasBeard;\n}\n\n//注释掉的地方可有可无\n```\n为什么会有这个要求呢？你一会就知道了，先卖个关子。\n\n\n## **重写与重载**\n\n### **重写**\n重写又叫覆盖，发生在继承关系下的子类中。我们上面说过，子类可以用自己的方式实现父类的方法，重写不能改变参数列表，也不能缩小方法的访问权限，如果父类方法抛出异常，子类抛出的异常不能比父类的异常“大”，也不能抛出新的异常。\n\n我们Person类中有一个方法：\n\n``` java\n    public void eat(){\n        System.out.println(\"i am eating\");\n    }\n```\n有一个子类修道成仙了，不吃饭，于是他可以在他自己的类里这样改\n``` java\n\t@Override  //这个是注解，表明这个方法是重写了父类的方法，最好写上\n    public void eat(){\n        System.out.println(\"i don't eat\");\n    }\n```\n\n这里提一下，子类重写父类方法不能缩小父类方法的访问权限但扩大是可以的。比如说父类有一个protected方法，子类重写它的时候不能改为private，但是可以改成public。\n\n这里还有一个不大不小的坑。如果你的父类方法是peivate的，比如：\n\n``` java\n    private void eat(){\n        System.out.println(\"i am eating\");\n    }\n```\n\n你可以在子类中这样写：\n\n``` java\n    public void eat(){\n        System.out.println(\"i don't eat\");\n    }\n```\n但是，这不是重写！！！！因为父类方法是私有的，所以子类根本没有得到eat()这个方法，子类的eat()方法是你重新定义的一个和父类没有半毛钱的函数。\n\n### **重载**\n把重载放到这里讲只是因为它和重写有的然傻傻分不清楚，重载和继承没有任何关系（当然，继承之间也存在重载，也就是说，继承可以重载，但是重载不一定继承），它发生在类本身。重载方法的特点是方法名相同而参数列表不同。\n\n比如这样：\n\n``` java\npublic void count(int a , int b){\n\tSystem.out.println(\"a+b=\" + (a+b));\n}\n\npublic void count(int a , int b,int c){\n\tSystem.out.println(\"a+b=\" + (a+b+c));\n}\n\npublic void count(int a , int b ,double c){\n\tSystem.out.println(\"a+b=\" + (a+b+c));\n}\n\n```\n函数重载的特点：\n\n - 被重载的方法**必须**改变参数列表(参数个数或类型或顺序不一样)；\n - 被重载的方法可以改变返回类型；\n - 被重载的方法可以改变访问修饰符；\n - 被重载的方法可以声明新的或更广的检查异常（区别于重写）；\n - 方法能够在同一个类中或者在一个子类中被重载。\n\n注意：参数列表必须不同！\n\n\n## **继承的缺点**\n\n - 继承是一种强耦合关系，父类变，子类就必须变。\n - 继承破坏了封装，对于父类而言，它的实现细节对与子类来说都是透明的。\n\n提醒！慎用继承！\n\n如果你知道高手写代码都想着怎么解耦你就知道这个缺点室友多么讨厌了。\n\n你可能会问，我不用继承用什么？别急，接下来的几篇文章会告诉你。\n\n## **昨天的遗留问题**\n\n看了上一篇文章的人可能还记得那个遗留问题。我们现在来解决一下：\n\n``` java\n//父类\npublic class Person {\n    protected String name;\n    \n    public void marry(Person p){\n        System.out.println(\"marry\");\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n//man类\npublic class Man extends Person {\n    private Woman wife;\n    private double money;\n\n    @Override\n    public void marry(Person p) {\n        this.wife = (Woman)p;\n        p.marry(this);\n    }\n\t//只有自己和妻子可以用钱\n    public void setMoney(Person p,double money) {\n        if (p == this || p == this.wife)\n            this.money = money;\n        else\n            System.out.println(p.getName()+\"抢钱！\");\n    }\n\n    public double getMoney() {\n        return money;\n    }\n}\n//woman类\npublic class Woman extends Person{\n    private boolean hasLongHair;\n    private Man husband;\n\n    @Override\n    public void marry(Person p) {\n        this.husband = (Man)p;\n    }\n}\n```\n\n我们来看一下效果：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161129215239122) \n\n>看起来还不错，不是么。\n\n当然，我更喜欢这么做\n\n``` java\npublic void setMoney(Person p,double money) {\n\t  if (p == this || p == this.wife)\n\t      this.money = money;\n\t  else if(money > this.money)\n\t\t  this.money = money;\n\t  else  \n\t      System.out.println(p.getName()+\"抢钱！\");\n}\n```\n \n\n## **总结**\n\n继承还有很多知识点，比如向上转型和向下转型（上面解决上一篇问题的代码就用到了这个知识点），在继承中，对象是怎么初始化的，静态代码块的使用，final关键字的使用等等。\n\n但是我打算先放一放再讲，等写完组合，聚合和多态再来讨论这些知识会更好一点。\n\n下一篇《重新认识java（四） ---  组合、聚合与继承的爱恨情仇》敬请期待。\n\n\n----------\n有错误或者我没讲到的地方或者更好的思路请及时与我联系！","source":"study/java/three.md","raw":"---\ntitle: 继承\ntype: javaImprove\norder: 4\n---\n\n> 学习一个新知识的第一步，就是要知道它是什么，然后要知道为什么要用它，最后要知道如何使用它。这篇文章，我们重新认识一下java中的继承。\n\n## **继承是个什么东西**\n\n我们先来看一下上一篇文章中的代码：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161129160404250)![这里写图片描述](http://img.blog.csdn.net/20161129160417453) \n\n 你会发现，这两个类中都有name属性，都有marry方法。一个人，不可能只有名字吧。他还有年龄，地址，手机号码，身份证号码，身高，体重巴拉巴拉的。除了男人和女人，还有小孩，老人，教师。。。\n\n如果我们每个类里都写一遍name，age。。。也许你还没写完程序，自己就先累死了。不用我说，大家也应该知道了，没错，我们需要继承的帮助。\n\n我们把相同的属性抽取出来，定义一个新的类Person，然后让男人，女人都去继承它，从而获得Person的属性，这样，就大大简化了我们的工作。\n\n我们来尝试一下。\n\n``` java\n//父类\npublic class Person {\n    protected String name;\n    protected int age;\n\n    public void eat(){\n        System.out.println(\"i am eating\");\n    }\n}\n//Man类 继承Person\npublic class Man extends Person {\n    private boolean hasBeard;\n\n    public void showMan(){\n        System.out.println(\"i am a man\");\n    }\n\n    public boolean isHasBeard() {\n        return hasBeard;\n    }\n}\n//woman类 继承Person\npublic class Woman extends Person{\n    private boolean hasLongHair;\n\n    public void shouWoman(){\n        System.out.println(\"i am a woman\");\n    }\n\n    public boolean isHasLongHair() {\n        return hasLongHair;\n    }\n}\n```\n简单的继承我想大家都懂，我就不多说占用篇幅了。\n \n## **继承的特点**\n\n我们已经知道了什么是继承，那么继承有没有什么限制呢？\n\n### **1.java中只支持单继承**\n也就是说，一个类只能够有一个父类。但是java支持“多重继承”。\n\n单继承：\n\n``` java\nclass A(){}\nclass B extends A (){} \n```\n多重继承：\n\n``` java\nclass A{}\nclass B extends A {} \nclass C extends B {} \n```\n\n> 为什么java不支持多继承呢？因为容易造成不必要的混乱。比如说：\n>\n> - **结构复杂化**：如果是单一继承，一个类的父类是什么，父类的父类是什么，都很明确，因为只有单一的继承关系，然而如果是多重继承的话，一个类有多个父类，这些父类又有自己的父类，那么类之间的关系就很复杂了。\n- **优先顺序模糊**：假如我有A，C类同时继承了基类，B类继承了A类，然后D类又同时继承了B和C类，所以D类继承父类的方法的顺序应该是D、B、A、C还是D、B、C、A，或者是其他的顺序，很不明确。\n- **功能冲突**：因为多重继承有多个父类，所以当不同的父类中有相同的方法是就会产生冲突。如果B类和C类同时又有相同的方法时，D继承的是哪个方法就不明确了，因为存在两种可能性。\n\n> 当然，多继承的这些问题很多语言已经解决了，比如c++，python等，但并不是所有的语言都有必要去解决这个问题。java的类虽然不能实现多继承，但是java的接口支持多实现，这个我们讲到接口的时候再说。\n\n>对多继承感兴趣的可以google一下mixin（混入），还可以去看一下基于java8的mixin实现（大多数都是线程不安全的，不要随便用）。  \n\n### **2.子类拥有父类非private的属性，方法**\n也就是说，父类的属性或者方法如果是peivate的，那么子类是不能继承它的。讲到这里，就必须得提一下四个修饰符了：\n\n| ---- |本类 | 同包（无关类或子类）|不同包（子类）|不同包（无关类）\n| --------- |:----:| :-----:|:--:|:-:\n| private | ✅ | |\n| default | ✅ | ✅ |\n| protected| ✅ | ✅|✅\n|public|✅|✅|✅|✅\n\n在java中，protected关键字大展身手的地方就是在继承中。《thinking in java》中是这样介绍protected的：\n\n> 在理想世界中，仅靠关键字private已经足够了。但在实际项目中，经常会想要将某些事物尽可能堆这个世界隐藏起来，但仍然允许导出的类的成员访问他们。关键字protected就是起这个作用的。它指明”就类用户而言，这是privated，但是对于任何一个继承于此类的导出类或其他任何一个位于同一个包内的类来说，他却是可以访问的”\n\n怎么理解呢？写个代码你就明白了\n\n``` java\n\npackage cn.pkgA\nclass A {\n\tprotected String name；\n}\nclass B extends A{}\nclass C {\n\tB b = new B();\n\tb.name;//可以访问到\n}\npackage cn.pkgB\n\nclass C {\n\tB b = new B();\n\tb.name;//访问不到\n}\n\n\n```\n\n### **3.子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。**\n\n如果子类只能有父类的属性和方法，那要子类还有什么用？？\n\n### **4.子类可以用自己的方式实现父类的方法。**\n\n这个叫做函数重写（覆盖），我们一会会重点分析。\n\n\n## **构造器**\n\n除了被peivate修饰的方法和变量之外，父类的构造器也不能被子类继承。\n\n但是父类的构造器带有参数的，则必须在子类的构造器中显式地通过super关键字调用父类的构造器并配以适当的当属列表。\n\n如果父类有无参构造器，则在子类的构造器中用super调用父类构造器不是必须的，如果没有使用super关键字，系统会自动调用父类的无参构造器。\n\n我们给Person类添加一个构造器：\n\n``` java\npublic class Person {\n    protected String name;\n    protected int age;\n\n    public void eat(){\n        System.out.println(\"i am eating\");\n    }\n\t//带参数的构造器\n    public Person(String name, int age) {\n        this.name = name;\n        this.age = age;\n    }\n}\n```\n\n这个时候，如果你不给子类添加构造器并在第一行写入super（name，age），则会报错：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161129165450586) \n\n在子类添加如下方法后错误消失：\n\n``` java\npublic Man(String name, int age/*, boolean hasBeard*/) {\n    super(name, age);\n    //this.hasBeard = hasBeard;\n}\n\n//注释掉的地方可有可无\n```\n为什么会有这个要求呢？你一会就知道了，先卖个关子。\n\n\n## **重写与重载**\n\n### **重写**\n重写又叫覆盖，发生在继承关系下的子类中。我们上面说过，子类可以用自己的方式实现父类的方法，重写不能改变参数列表，也不能缩小方法的访问权限，如果父类方法抛出异常，子类抛出的异常不能比父类的异常“大”，也不能抛出新的异常。\n\n我们Person类中有一个方法：\n\n``` java\n    public void eat(){\n        System.out.println(\"i am eating\");\n    }\n```\n有一个子类修道成仙了，不吃饭，于是他可以在他自己的类里这样改\n``` java\n\t@Override  //这个是注解，表明这个方法是重写了父类的方法，最好写上\n    public void eat(){\n        System.out.println(\"i don't eat\");\n    }\n```\n\n这里提一下，子类重写父类方法不能缩小父类方法的访问权限但扩大是可以的。比如说父类有一个protected方法，子类重写它的时候不能改为private，但是可以改成public。\n\n这里还有一个不大不小的坑。如果你的父类方法是peivate的，比如：\n\n``` java\n    private void eat(){\n        System.out.println(\"i am eating\");\n    }\n```\n\n你可以在子类中这样写：\n\n``` java\n    public void eat(){\n        System.out.println(\"i don't eat\");\n    }\n```\n但是，这不是重写！！！！因为父类方法是私有的，所以子类根本没有得到eat()这个方法，子类的eat()方法是你重新定义的一个和父类没有半毛钱的函数。\n\n### **重载**\n把重载放到这里讲只是因为它和重写有的然傻傻分不清楚，重载和继承没有任何关系（当然，继承之间也存在重载，也就是说，继承可以重载，但是重载不一定继承），它发生在类本身。重载方法的特点是方法名相同而参数列表不同。\n\n比如这样：\n\n``` java\npublic void count(int a , int b){\n\tSystem.out.println(\"a+b=\" + (a+b));\n}\n\npublic void count(int a , int b,int c){\n\tSystem.out.println(\"a+b=\" + (a+b+c));\n}\n\npublic void count(int a , int b ,double c){\n\tSystem.out.println(\"a+b=\" + (a+b+c));\n}\n\n```\n函数重载的特点：\n\n - 被重载的方法**必须**改变参数列表(参数个数或类型或顺序不一样)；\n - 被重载的方法可以改变返回类型；\n - 被重载的方法可以改变访问修饰符；\n - 被重载的方法可以声明新的或更广的检查异常（区别于重写）；\n - 方法能够在同一个类中或者在一个子类中被重载。\n\n注意：参数列表必须不同！\n\n\n## **继承的缺点**\n\n - 继承是一种强耦合关系，父类变，子类就必须变。\n - 继承破坏了封装，对于父类而言，它的实现细节对与子类来说都是透明的。\n\n提醒！慎用继承！\n\n如果你知道高手写代码都想着怎么解耦你就知道这个缺点室友多么讨厌了。\n\n你可能会问，我不用继承用什么？别急，接下来的几篇文章会告诉你。\n\n## **昨天的遗留问题**\n\n看了上一篇文章的人可能还记得那个遗留问题。我们现在来解决一下：\n\n``` java\n//父类\npublic class Person {\n    protected String name;\n    \n    public void marry(Person p){\n        System.out.println(\"marry\");\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n}\n//man类\npublic class Man extends Person {\n    private Woman wife;\n    private double money;\n\n    @Override\n    public void marry(Person p) {\n        this.wife = (Woman)p;\n        p.marry(this);\n    }\n\t//只有自己和妻子可以用钱\n    public void setMoney(Person p,double money) {\n        if (p == this || p == this.wife)\n            this.money = money;\n        else\n            System.out.println(p.getName()+\"抢钱！\");\n    }\n\n    public double getMoney() {\n        return money;\n    }\n}\n//woman类\npublic class Woman extends Person{\n    private boolean hasLongHair;\n    private Man husband;\n\n    @Override\n    public void marry(Person p) {\n        this.husband = (Man)p;\n    }\n}\n```\n\n我们来看一下效果：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161129215239122) \n\n>看起来还不错，不是么。\n\n当然，我更喜欢这么做\n\n``` java\npublic void setMoney(Person p,double money) {\n\t  if (p == this || p == this.wife)\n\t      this.money = money;\n\t  else if(money > this.money)\n\t\t  this.money = money;\n\t  else  \n\t      System.out.println(p.getName()+\"抢钱！\");\n}\n```\n \n\n## **总结**\n\n继承还有很多知识点，比如向上转型和向下转型（上面解决上一篇问题的代码就用到了这个知识点），在继承中，对象是怎么初始化的，静态代码块的使用，final关键字的使用等等。\n\n但是我打算先放一放再讲，等写完组合，聚合和多态再来讨论这些知识会更好一点。\n\n下一篇《重新认识java（四） ---  组合、聚合与继承的爱恨情仇》敬请期待。\n\n\n----------\n有错误或者我没讲到的地方或者更好的思路请及时与我联系！","date":"2016-12-13T03:51:51.000Z","updated":"2016-12-13T03:51:51.000Z","path":"study/java/three.html","comments":1,"layout":"page","_id":"ciwoiwpev00071a2dc0pkpa30","content":"<blockquote>\n<p>学习一个新知识的第一步，就是要知道它是什么，然后要知道为什么要用它，最后要知道如何使用它。这篇文章，我们重新认识一下java中的继承。</p>\n</blockquote>\n<h2 id=\"继承是个什么东西\"><a href=\"#继承是个什么东西\" class=\"headerlink\" title=\"继承是个什么东西\"></a><strong>继承是个什么东西</strong></h2><p>我们先来看一下上一篇文章中的代码：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161129160404250\" alt=\"这里写图片描述\"><img src=\"http://img.blog.csdn.net/20161129160417453\" alt=\"这里写图片描述\"> </p>\n</blockquote>\n<p> 你会发现，这两个类中都有name属性，都有marry方法。一个人，不可能只有名字吧。他还有年龄，地址，手机号码，身份证号码，身高，体重巴拉巴拉的。除了男人和女人，还有小孩，老人，教师。。。</p>\n<p>如果我们每个类里都写一遍name，age。。。也许你还没写完程序，自己就先累死了。不用我说，大家也应该知道了，没错，我们需要继承的帮助。</p>\n<p>我们把相同的属性抽取出来，定义一个新的类Person，然后让男人，女人都去继承它，从而获得Person的属性，这样，就大大简化了我们的工作。</p>\n<p>我们来尝试一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//父类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">protected</span> String name;</div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"i am eating\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Man类 继承Person</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> hasBeard;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showMan</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"i am a man\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHasBeard</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> hasBeard;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//woman类 继承Person</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> hasLongHair;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shouWoman</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"i am a woman\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHasLongHair</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> hasLongHair;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简单的继承我想大家都懂，我就不多说占用篇幅了。</p>\n<h2 id=\"继承的特点\"><a href=\"#继承的特点\" class=\"headerlink\" title=\"继承的特点\"></a><strong>继承的特点</strong></h2><p>我们已经知道了什么是继承，那么继承有没有什么限制呢？</p>\n<h3 id=\"1-java中只支持单继承\"><a href=\"#1-java中只支持单继承\" class=\"headerlink\" title=\"1.java中只支持单继承\"></a><strong>1.java中只支持单继承</strong></h3><p>也就是说，一个类只能够有一个父类。但是java支持“多重继承”。</p>\n<p>单继承：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>()</span>&#123;&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> ()</span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p>多重继承：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;&#125; </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>为什么java不支持多继承呢？因为容易造成不必要的混乱。比如说：</p>\n<ul>\n<li><strong>结构复杂化</strong>：如果是单一继承，一个类的父类是什么，父类的父类是什么，都很明确，因为只有单一的继承关系，然而如果是多重继承的话，一个类有多个父类，这些父类又有自己的父类，那么类之间的关系就很复杂了。</li>\n<li><strong>优先顺序模糊</strong>：假如我有A，C类同时继承了基类，B类继承了A类，然后D类又同时继承了B和C类，所以D类继承父类的方法的顺序应该是D、B、A、C还是D、B、C、A，或者是其他的顺序，很不明确。</li>\n<li><strong>功能冲突</strong>：因为多重继承有多个父类，所以当不同的父类中有相同的方法是就会产生冲突。如果B类和C类同时又有相同的方法时，D继承的是哪个方法就不明确了，因为存在两种可能性。</li>\n</ul>\n<p>当然，多继承的这些问题很多语言已经解决了，比如c++，python等，但并不是所有的语言都有必要去解决这个问题。java的类虽然不能实现多继承，但是java的接口支持多实现，这个我们讲到接口的时候再说。</p>\n<p>对多继承感兴趣的可以google一下mixin（混入），还可以去看一下基于java8的mixin实现（大多数都是线程不安全的，不要随便用）。  </p>\n</blockquote>\n<h3 id=\"2-子类拥有父类非private的属性，方法\"><a href=\"#2-子类拥有父类非private的属性，方法\" class=\"headerlink\" title=\"2.子类拥有父类非private的属性，方法\"></a><strong>2.子类拥有父类非private的属性，方法</strong></h3><p>也就是说，父类的属性或者方法如果是peivate的，那么子类是不能继承它的。讲到这里，就必须得提一下四个修饰符了：</p>\n<table>\n<thead>\n<tr>\n<th>—-</th>\n<th style=\"text-align:center\">本类</th>\n<th style=\"text-align:center\">同包（无关类或子类）</th>\n<th style=\"text-align:center\">不同包（子类）</th>\n<th style=\"text-align:center\">不同包（无关类）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>private</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td>default</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td>protected</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td>public</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n</tbody>\n</table>\n<p>在java中，protected关键字大展身手的地方就是在继承中。《thinking in java》中是这样介绍protected的：</p>\n<blockquote>\n<p>在理想世界中，仅靠关键字private已经足够了。但在实际项目中，经常会想要将某些事物尽可能堆这个世界隐藏起来，但仍然允许导出的类的成员访问他们。关键字protected就是起这个作用的。它指明”就类用户而言，这是privated，但是对于任何一个继承于此类的导出类或其他任何一个位于同一个包内的类来说，他却是可以访问的”</p>\n</blockquote>\n<p>怎么理解呢？写个代码你就明白了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> cn.pkgA</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> String name；</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</div><div class=\"line\">\tB b = <span class=\"keyword\">new</span> B();</div><div class=\"line\">\tb.name;<span class=\"comment\">//可以访问到</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">package</span> cn.pkgB</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</div><div class=\"line\">\tB b = <span class=\"keyword\">new</span> B();</div><div class=\"line\">\tb.name;<span class=\"comment\">//访问不到</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。\"><a href=\"#3-子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。\" class=\"headerlink\" title=\"3.子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。\"></a><strong>3.子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</strong></h3><p>如果子类只能有父类的属性和方法，那要子类还有什么用？？</p>\n<h3 id=\"4-子类可以用自己的方式实现父类的方法。\"><a href=\"#4-子类可以用自己的方式实现父类的方法。\" class=\"headerlink\" title=\"4.子类可以用自己的方式实现父类的方法。\"></a><strong>4.子类可以用自己的方式实现父类的方法。</strong></h3><p>这个叫做函数重写（覆盖），我们一会会重点分析。</p>\n<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a><strong>构造器</strong></h2><p>除了被peivate修饰的方法和变量之外，父类的构造器也不能被子类继承。</p>\n<p>但是父类的构造器带有参数的，则必须在子类的构造器中显式地通过super关键字调用父类的构造器并配以适当的当属列表。</p>\n<p>如果父类有无参构造器，则在子类的构造器中用super调用父类构造器不是必须的，如果没有使用super关键字，系统会自动调用父类的无参构造器。</p>\n<p>我们给Person类添加一个构造器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">protected</span> String name;</div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"i am eating\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//带参数的构造器</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个时候，如果你不给子类添加构造器并在第一行写入super（name，age），则会报错：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161129165450586\" alt=\"这里写图片描述\"> </p>\n</blockquote>\n<p>在子类添加如下方法后错误消失：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Man</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age<span class=\"comment\">/*, boolean hasBeard*/</span>)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(name, age);</div><div class=\"line\">    <span class=\"comment\">//this.hasBeard = hasBeard;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注释掉的地方可有可无</span></div></pre></td></tr></table></figure>\n<p>为什么会有这个要求呢？你一会就知道了，先卖个关子。</p>\n<h2 id=\"重写与重载\"><a href=\"#重写与重载\" class=\"headerlink\" title=\"重写与重载\"></a><strong>重写与重载</strong></h2><h3 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a><strong>重写</strong></h3><p>重写又叫覆盖，发生在继承关系下的子类中。我们上面说过，子类可以用自己的方式实现父类的方法，重写不能改变参数列表，也不能缩小方法的访问权限，如果父类方法抛出异常，子类抛出的异常不能比父类的异常“大”，也不能抛出新的异常。</p>\n<p>我们Person类中有一个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"i am eating\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>有一个子类修道成仙了，不吃饭，于是他可以在他自己的类里这样改<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span>  <span class=\"comment\">//这个是注解，表明这个方法是重写了父类的方法，最好写上</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">       System.out.println(<span class=\"string\">\"i don't eat\"</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>这里提一下，子类重写父类方法不能缩小父类方法的访问权限但扩大是可以的。比如说父类有一个protected方法，子类重写它的时候不能改为private，但是可以改成public。</p>\n<p>这里还有一个不大不小的坑。如果你的父类方法是peivate的，比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"i am eating\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你可以在子类中这样写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"i don't eat\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是，这不是重写！！！！因为父类方法是私有的，所以子类根本没有得到eat()这个方法，子类的eat()方法是你重新定义的一个和父类没有半毛钱的函数。</p>\n<h3 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a><strong>重载</strong></h3><p>把重载放到这里讲只是因为它和重写有的然傻傻分不清楚，重载和继承没有任何关系（当然，继承之间也存在重载，也就是说，继承可以重载，但是重载不一定继承），它发生在类本身。重载方法的特点是方法名相同而参数列表不同。</p>\n<p>比如这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"keyword\">int</span> a , <span class=\"keyword\">int</span> b)</span></span>&#123;</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"a+b=\"</span> + (a+b));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"keyword\">int</span> a , <span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"a+b=\"</span> + (a+b+c));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"keyword\">int</span> a , <span class=\"keyword\">int</span> b ,<span class=\"keyword\">double</span> c)</span></span>&#123;</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"a+b=\"</span> + (a+b+c));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>函数重载的特点：</p>\n<ul>\n<li>被重载的方法<strong>必须</strong>改变参数列表(参数个数或类型或顺序不一样)；</li>\n<li>被重载的方法可以改变返回类型；</li>\n<li>被重载的方法可以改变访问修饰符；</li>\n<li>被重载的方法可以声明新的或更广的检查异常（区别于重写）；</li>\n<li>方法能够在同一个类中或者在一个子类中被重载。</li>\n</ul>\n<p>注意：参数列表必须不同！</p>\n<h2 id=\"继承的缺点\"><a href=\"#继承的缺点\" class=\"headerlink\" title=\"继承的缺点\"></a><strong>继承的缺点</strong></h2><ul>\n<li>继承是一种强耦合关系，父类变，子类就必须变。</li>\n<li>继承破坏了封装，对于父类而言，它的实现细节对与子类来说都是透明的。</li>\n</ul>\n<p>提醒！慎用继承！</p>\n<p>如果你知道高手写代码都想着怎么解耦你就知道这个缺点室友多么讨厌了。</p>\n<p>你可能会问，我不用继承用什么？别急，接下来的几篇文章会告诉你。</p>\n<h2 id=\"昨天的遗留问题\"><a href=\"#昨天的遗留问题\" class=\"headerlink\" title=\"昨天的遗留问题\"></a><strong>昨天的遗留问题</strong></h2><p>看了上一篇文章的人可能还记得那个遗留问题。我们现在来解决一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//父类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">protected</span> String name;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(Person p)</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"marry\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//man类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Woman wife;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> money;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(Person p)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.wife = (Woman)p;</div><div class=\"line\">        p.marry(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//只有自己和妻子可以用钱</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMoney</span><span class=\"params\">(Person p,<span class=\"keyword\">double</span> money)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"keyword\">this</span> || p == <span class=\"keyword\">this</span>.wife)</div><div class=\"line\">            <span class=\"keyword\">this</span>.money = money;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            System.out.println(p.getName()+<span class=\"string\">\"抢钱！\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getMoney</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> money;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//woman类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> hasLongHair;</div><div class=\"line\">    <span class=\"keyword\">private</span> Man husband;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(Person p)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.husband = (Man)p;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们来看一下效果：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161129215239122\" alt=\"这里写图片描述\"> </p>\n<p>看起来还不错，不是么。</p>\n</blockquote>\n<p>当然，我更喜欢这么做</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMoney</span><span class=\"params\">(Person p,<span class=\"keyword\">double</span> money)</span> </span>&#123;</div><div class=\"line\">\t  <span class=\"keyword\">if</span> (p == <span class=\"keyword\">this</span> || p == <span class=\"keyword\">this</span>.wife)</div><div class=\"line\">\t      <span class=\"keyword\">this</span>.money = money;</div><div class=\"line\">\t  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(money &gt; <span class=\"keyword\">this</span>.money)</div><div class=\"line\">\t\t  <span class=\"keyword\">this</span>.money = money;</div><div class=\"line\">\t  <span class=\"keyword\">else</span>  </div><div class=\"line\">\t      System.out.println(p.getName()+<span class=\"string\">\"抢钱！\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h2><p>继承还有很多知识点，比如向上转型和向下转型（上面解决上一篇问题的代码就用到了这个知识点），在继承中，对象是怎么初始化的，静态代码块的使用，final关键字的使用等等。</p>\n<p>但是我打算先放一放再讲，等写完组合，聚合和多态再来讨论这些知识会更好一点。</p>\n<p>下一篇《重新认识java（四） —  组合、聚合与继承的爱恨情仇》敬请期待。</p>\n<hr>\n<p>有错误或者我没讲到的地方或者更好的思路请及时与我联系！</p>\n","excerpt":"","more":"<blockquote>\n<p>学习一个新知识的第一步，就是要知道它是什么，然后要知道为什么要用它，最后要知道如何使用它。这篇文章，我们重新认识一下java中的继承。</p>\n</blockquote>\n<h2 id=\"继承是个什么东西\"><a href=\"#继承是个什么东西\" class=\"headerlink\" title=\"继承是个什么东西\"></a><strong>继承是个什么东西</strong></h2><p>我们先来看一下上一篇文章中的代码：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161129160404250\" alt=\"这里写图片描述\"><img src=\"http://img.blog.csdn.net/20161129160417453\" alt=\"这里写图片描述\"> </p>\n</blockquote>\n<p> 你会发现，这两个类中都有name属性，都有marry方法。一个人，不可能只有名字吧。他还有年龄，地址，手机号码，身份证号码，身高，体重巴拉巴拉的。除了男人和女人，还有小孩，老人，教师。。。</p>\n<p>如果我们每个类里都写一遍name，age。。。也许你还没写完程序，自己就先累死了。不用我说，大家也应该知道了，没错，我们需要继承的帮助。</p>\n<p>我们把相同的属性抽取出来，定义一个新的类Person，然后让男人，女人都去继承它，从而获得Person的属性，这样，就大大简化了我们的工作。</p>\n<p>我们来尝试一下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//父类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">protected</span> String name;</div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"i am eating\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Man类 继承Person</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> hasBeard;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showMan</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"i am a man\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHasBeard</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> hasBeard;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//woman类 继承Person</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> hasLongHair;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">shouWoman</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"i am a woman\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isHasLongHair</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> hasLongHair;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>简单的继承我想大家都懂，我就不多说占用篇幅了。</p>\n<h2 id=\"继承的特点\"><a href=\"#继承的特点\" class=\"headerlink\" title=\"继承的特点\"></a><strong>继承的特点</strong></h2><p>我们已经知道了什么是继承，那么继承有没有什么限制呢？</p>\n<h3 id=\"1-java中只支持单继承\"><a href=\"#1-java中只支持单继承\" class=\"headerlink\" title=\"1.java中只支持单继承\"></a><strong>1.java中只支持单继承</strong></h3><p>也就是说，一个类只能够有一个父类。但是java支持“多重继承”。</p>\n<p>单继承：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>()</span>&#123;&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> ()</span>&#123;&#125;</div></pre></td></tr></table></figure>\n<p>多重继承：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span></span>&#123;&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span> </span>&#123;&#125; </div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> <span class=\"keyword\">extends</span> <span class=\"title\">B</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p>为什么java不支持多继承呢？因为容易造成不必要的混乱。比如说：</p>\n<ul>\n<li><strong>结构复杂化</strong>：如果是单一继承，一个类的父类是什么，父类的父类是什么，都很明确，因为只有单一的继承关系，然而如果是多重继承的话，一个类有多个父类，这些父类又有自己的父类，那么类之间的关系就很复杂了。</li>\n<li><strong>优先顺序模糊</strong>：假如我有A，C类同时继承了基类，B类继承了A类，然后D类又同时继承了B和C类，所以D类继承父类的方法的顺序应该是D、B、A、C还是D、B、C、A，或者是其他的顺序，很不明确。</li>\n<li><strong>功能冲突</strong>：因为多重继承有多个父类，所以当不同的父类中有相同的方法是就会产生冲突。如果B类和C类同时又有相同的方法时，D继承的是哪个方法就不明确了，因为存在两种可能性。</li>\n</ul>\n<p>当然，多继承的这些问题很多语言已经解决了，比如c++，python等，但并不是所有的语言都有必要去解决这个问题。java的类虽然不能实现多继承，但是java的接口支持多实现，这个我们讲到接口的时候再说。</p>\n<p>对多继承感兴趣的可以google一下mixin（混入），还可以去看一下基于java8的mixin实现（大多数都是线程不安全的，不要随便用）。  </p>\n</blockquote>\n<h3 id=\"2-子类拥有父类非private的属性，方法\"><a href=\"#2-子类拥有父类非private的属性，方法\" class=\"headerlink\" title=\"2.子类拥有父类非private的属性，方法\"></a><strong>2.子类拥有父类非private的属性，方法</strong></h3><p>也就是说，父类的属性或者方法如果是peivate的，那么子类是不能继承它的。讲到这里，就必须得提一下四个修饰符了：</p>\n<table>\n<thead>\n<tr>\n<th>—-</th>\n<th style=\"text-align:center\">本类</th>\n<th style=\"text-align:center\">同包（无关类或子类）</th>\n<th style=\"text-align:center\">不同包（子类）</th>\n<th style=\"text-align:center\">不同包（无关类）</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>private</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\"></td>\n</tr>\n<tr>\n<td>default</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td>protected</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td>public</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n</tbody>\n</table>\n<p>在java中，protected关键字大展身手的地方就是在继承中。《thinking in java》中是这样介绍protected的：</p>\n<blockquote>\n<p>在理想世界中，仅靠关键字private已经足够了。但在实际项目中，经常会想要将某些事物尽可能堆这个世界隐藏起来，但仍然允许导出的类的成员访问他们。关键字protected就是起这个作用的。它指明”就类用户而言，这是privated，但是对于任何一个继承于此类的导出类或其他任何一个位于同一个包内的类来说，他却是可以访问的”</p>\n</blockquote>\n<p>怎么理解呢？写个代码你就明白了</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">package</span> cn.pkgA</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span> </span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">protected</span> String name；</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span> <span class=\"keyword\">extends</span> <span class=\"title\">A</span></span>&#123;&#125;</div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</div><div class=\"line\">\tB b = <span class=\"keyword\">new</span> B();</div><div class=\"line\">\tb.name;<span class=\"comment\">//可以访问到</span></div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">package</span> cn.pkgB</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span> </span>&#123;</div><div class=\"line\">\tB b = <span class=\"keyword\">new</span> B();</div><div class=\"line\">\tb.name;<span class=\"comment\">//访问不到</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。\"><a href=\"#3-子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。\" class=\"headerlink\" title=\"3.子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。\"></a><strong>3.子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</strong></h3><p>如果子类只能有父类的属性和方法，那要子类还有什么用？？</p>\n<h3 id=\"4-子类可以用自己的方式实现父类的方法。\"><a href=\"#4-子类可以用自己的方式实现父类的方法。\" class=\"headerlink\" title=\"4.子类可以用自己的方式实现父类的方法。\"></a><strong>4.子类可以用自己的方式实现父类的方法。</strong></h3><p>这个叫做函数重写（覆盖），我们一会会重点分析。</p>\n<h2 id=\"构造器\"><a href=\"#构造器\" class=\"headerlink\" title=\"构造器\"></a><strong>构造器</strong></h2><p>除了被peivate修饰的方法和变量之外，父类的构造器也不能被子类继承。</p>\n<p>但是父类的构造器带有参数的，则必须在子类的构造器中显式地通过super关键字调用父类的构造器并配以适当的当属列表。</p>\n<p>如果父类有无参构造器，则在子类的构造器中用super调用父类构造器不是必须的，如果没有使用super关键字，系统会自动调用父类的无参构造器。</p>\n<p>我们给Person类添加一个构造器：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">protected</span> String name;</div><div class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">int</span> age;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"i am eating\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//带参数的构造器</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.age = age;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这个时候，如果你不给子类添加构造器并在第一行写入super（name，age），则会报错：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161129165450586\" alt=\"这里写图片描述\"> </p>\n</blockquote>\n<p>在子类添加如下方法后错误消失：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Man</span><span class=\"params\">(String name, <span class=\"keyword\">int</span> age<span class=\"comment\">/*, boolean hasBeard*/</span>)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">super</span>(name, age);</div><div class=\"line\">    <span class=\"comment\">//this.hasBeard = hasBeard;</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//注释掉的地方可有可无</span></div></pre></td></tr></table></figure>\n<p>为什么会有这个要求呢？你一会就知道了，先卖个关子。</p>\n<h2 id=\"重写与重载\"><a href=\"#重写与重载\" class=\"headerlink\" title=\"重写与重载\"></a><strong>重写与重载</strong></h2><h3 id=\"重写\"><a href=\"#重写\" class=\"headerlink\" title=\"重写\"></a><strong>重写</strong></h3><p>重写又叫覆盖，发生在继承关系下的子类中。我们上面说过，子类可以用自己的方式实现父类的方法，重写不能改变参数列表，也不能缩小方法的访问权限，如果父类方法抛出异常，子类抛出的异常不能比父类的异常“大”，也不能抛出新的异常。</p>\n<p>我们Person类中有一个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"i am eating\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>有一个子类修道成仙了，不吃饭，于是他可以在他自己的类里这样改<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Override</span>  <span class=\"comment\">//这个是注解，表明这个方法是重写了父类的方法，最好写上</span></div><div class=\"line\">   <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">       System.out.println(<span class=\"string\">\"i don't eat\"</span>);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>这里提一下，子类重写父类方法不能缩小父类方法的访问权限但扩大是可以的。比如说父类有一个protected方法，子类重写它的时候不能改为private，但是可以改成public。</p>\n<p>这里还有一个不大不小的坑。如果你的父类方法是peivate的，比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"i am eating\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>你可以在子类中这样写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">eat</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">    System.out.println(<span class=\"string\">\"i don't eat\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>但是，这不是重写！！！！因为父类方法是私有的，所以子类根本没有得到eat()这个方法，子类的eat()方法是你重新定义的一个和父类没有半毛钱的函数。</p>\n<h3 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a><strong>重载</strong></h3><p>把重载放到这里讲只是因为它和重写有的然傻傻分不清楚，重载和继承没有任何关系（当然，继承之间也存在重载，也就是说，继承可以重载，但是重载不一定继承），它发生在类本身。重载方法的特点是方法名相同而参数列表不同。</p>\n<p>比如这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"keyword\">int</span> a , <span class=\"keyword\">int</span> b)</span></span>&#123;</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"a+b=\"</span> + (a+b));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"keyword\">int</span> a , <span class=\"keyword\">int</span> b,<span class=\"keyword\">int</span> c)</span></span>&#123;</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"a+b=\"</span> + (a+b+c));</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">count</span><span class=\"params\">(<span class=\"keyword\">int</span> a , <span class=\"keyword\">int</span> b ,<span class=\"keyword\">double</span> c)</span></span>&#123;</div><div class=\"line\">\tSystem.out.println(<span class=\"string\">\"a+b=\"</span> + (a+b+c));</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>函数重载的特点：</p>\n<ul>\n<li>被重载的方法<strong>必须</strong>改变参数列表(参数个数或类型或顺序不一样)；</li>\n<li>被重载的方法可以改变返回类型；</li>\n<li>被重载的方法可以改变访问修饰符；</li>\n<li>被重载的方法可以声明新的或更广的检查异常（区别于重写）；</li>\n<li>方法能够在同一个类中或者在一个子类中被重载。</li>\n</ul>\n<p>注意：参数列表必须不同！</p>\n<h2 id=\"继承的缺点\"><a href=\"#继承的缺点\" class=\"headerlink\" title=\"继承的缺点\"></a><strong>继承的缺点</strong></h2><ul>\n<li>继承是一种强耦合关系，父类变，子类就必须变。</li>\n<li>继承破坏了封装，对于父类而言，它的实现细节对与子类来说都是透明的。</li>\n</ul>\n<p>提醒！慎用继承！</p>\n<p>如果你知道高手写代码都想着怎么解耦你就知道这个缺点室友多么讨厌了。</p>\n<p>你可能会问，我不用继承用什么？别急，接下来的几篇文章会告诉你。</p>\n<h2 id=\"昨天的遗留问题\"><a href=\"#昨天的遗留问题\" class=\"headerlink\" title=\"昨天的遗留问题\"></a><strong>昨天的遗留问题</strong></h2><p>看了上一篇文章的人可能还记得那个遗留问题。我们现在来解决一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//父类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">protected</span> String name;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(Person p)</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"marry\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//man类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> Woman wife;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> money;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(Person p)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.wife = (Woman)p;</div><div class=\"line\">        p.marry(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">\t<span class=\"comment\">//只有自己和妻子可以用钱</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMoney</span><span class=\"params\">(Person p,<span class=\"keyword\">double</span> money)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (p == <span class=\"keyword\">this</span> || p == <span class=\"keyword\">this</span>.wife)</div><div class=\"line\">            <span class=\"keyword\">this</span>.money = money;</div><div class=\"line\">        <span class=\"keyword\">else</span></div><div class=\"line\">            System.out.println(p.getName()+<span class=\"string\">\"抢钱！\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getMoney</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> money;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//woman类</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span></span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> hasLongHair;</div><div class=\"line\">    <span class=\"keyword\">private</span> Man husband;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(Person p)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.husband = (Man)p;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>我们来看一下效果：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161129215239122\" alt=\"这里写图片描述\"> </p>\n<p>看起来还不错，不是么。</p>\n</blockquote>\n<p>当然，我更喜欢这么做</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMoney</span><span class=\"params\">(Person p,<span class=\"keyword\">double</span> money)</span> </span>&#123;</div><div class=\"line\">\t  <span class=\"keyword\">if</span> (p == <span class=\"keyword\">this</span> || p == <span class=\"keyword\">this</span>.wife)</div><div class=\"line\">\t      <span class=\"keyword\">this</span>.money = money;</div><div class=\"line\">\t  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(money &gt; <span class=\"keyword\">this</span>.money)</div><div class=\"line\">\t\t  <span class=\"keyword\">this</span>.money = money;</div><div class=\"line\">\t  <span class=\"keyword\">else</span>  </div><div class=\"line\">\t      System.out.println(p.getName()+<span class=\"string\">\"抢钱！\"</span>);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a><strong>总结</strong></h2><p>继承还有很多知识点，比如向上转型和向下转型（上面解决上一篇问题的代码就用到了这个知识点），在继承中，对象是怎么初始化的，静态代码块的使用，final关键字的使用等等。</p>\n<p>但是我打算先放一放再讲，等写完组合，聚合和多态再来讨论这些知识会更好一点。</p>\n<p>下一篇《重新认识java（四） —  组合、聚合与继承的爱恨情仇》敬请期待。</p>\n<hr>\n<p>有错误或者我没讲到的地方或者更好的思路请及时与我联系！</p>\n"},{"title":"封装","type":"javaImprove","order":3,"_content":"\n> 如果你认为封装仅仅是private + getter and setter，那你就大错特错了！\n\n## **什么是封装**\n\n对于面向对象的特点，我想大家都可以倒背如流了：封装，继承，多态。很多人对这些特点的理解仅仅停留在表面。以为封装就是变量私有化，然后对外提供接口，而不知为什么要这样做。\n\n封装，简单的来讲就是将变量的属性私有化，在java里就是用private修饰符修饰，这样在外部产生的对象就不能直接访问到这个变量。想要对变量进行操作或者访问，就需要在类里提供外部访问的接口，也就是我们熟知的get和set方法。\n\n这就是大部分人对封装的理解。知道有封装这回事，知道怎么用，却不知道为什么要用，甚至觉得这是多此一举。因为明明`person.name`就可以访问到变量，为什么非要`person.getName()`呢？\n\n## **任性的使用public**\n\n我们先来看一下不使用封装的情况。\n\n首先，有两个类，Man和Women:\n\n``` java\n//Man\npublic class Man {\n    public String name; //名字\n    public Woman wife;  //男人嘛，都有妻子\n    public double money;//男人嘛，多赚点钱\n\n\t//还可以结个婚\n    public void marry(Woman woman){\n        this.wife = woman;\n        woman.marry(this);\n    }\n}\n//Women\npublic class Woman {\n    public String name; //名字\n    public Man husband; //得有一个丈夫\n\t//也可以结个婚\n    public void marry(Man man){\n        this.husband = man;\n    }\n}\n```\n代码很精简，看着很舒服，测试一下。\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161128181621627) \n\n> 哎哟，看起来还不错。\n\n这个时候，来了一个小偷，这小偷不干别的，就偷别人的钱和老婆。\n\n``` java\n//小偷\npublic class Thief {\n    private double stealMoney = 0;\n    private List<Woman> womens = new ArrayList<>();\n\n    //偷钱\n    public void stealMoney(Man man){\n        stealMoney += man.money;\n        man.money = 0;\n        System.out.println(\"哈哈，偷到钱了\");\n    }\n    //偷老婆，最可气的是，偷了你的老婆还把凤姐丢给了你\n    public void stealWife(Man man){\n        womens.add(man.wife);\n        Woman woman = new Woman();\n        woman.name = \"凤姐\";\n        man.wife = woman;\n        System.out.println(\"哈哈哈，又偷了一个妹纸\");\n    }\n}\n```\n\n有一天，来了这么一个小偷：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161128182205942)\n\n>傻了吧？你老婆呢？你钱呢？哈哈哈哈哈哈哈哈哈\n\n就这样，小偷偷走了你的钱和你的老婆并丢给了你一个凤姐，而你，却无能为力。\n\n你觉得必须要改变一下了！！\n\n## **封装前来报到** \n\n封装觉得你有点惨，于是过来帮了一下你：\n\n``` java\n//PackageMan\npublic class PackageMan {\n    private String name; //私有化名字\n    private PackageWoman wife;//必须私有！！必须！\n    private double money; //私有，统统私有！\n    //我们先写个构造函数，为了方便\n    public PackageMan(String name, double money) {\n        this.name = name;\n        this.money = money;\n    }\n    //结婚\n    public void marry(PackageWoman woman){\n        this.wife = woman;\n        woman.marry(this);\n    }\n\n    //各种getter和setter\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public PackageWoman getWife() {\n        return wife;\n    }\n\n    public double getMoney() {\n        return money;\n    }\n}\n\n//PackageWoman\npublic class PackageWoman {\n    private String name;\n    private PackageMan husband;\n\n    public void marry(PackageMan man){\n        this.husband = man;\n    }\n\n    public PackageWoman(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public PackageMan getHusband() {\n        return husband;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n看起来有点眼花缭乱，这样真的有效么？\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161128183404652)\n\n> 恩，看起来还行，就是代码长了点，赶紧给我来个小偷测试一下！\n\n什么？你想测试一下，不好意思，测试不了，因为小偷已经死在测试的路上了。因为我们根本没有对外提供设置money和wife的方法，所以小偷可以知道你有多少钱，知道你有一个漂亮的老婆，但是他却无能为力，因为他只能看着。\n\n细心的人也许发现了，这里面有一个很严重的问题：\n\n没错，小偷不能把我们的money清空了，也不能将我们的wife换成别人了。但是，如果我们要自己换呢？我的钱这辈子就这么点？还不能花？我还不能离婚了？（咳咳。。不鼓励离婚哈，就是举个例子，别打我）\n\n## **这才是封装厉害的地方**\n\n如何解决上面的问题呢？私有化外部访问不到，自己也没法改变数据，提供set方法又会让所有人都能改，和不私有没什么区别，好纠结啊。\n\n\n等等，你刚刚说 “所有人“？真的是所有人么？\n\n我们来看看：\n\n``` java\npublic void setMoney(PackageMan man,double money) {\n    if (man == this) {\n        this.money = money;\n    } else {\n        System.out.println(\"喂，110吗？\"+man.getName()+\"抢钱！\");\n    }\n}\n```\n\n这样呢？只有你自己可以修改，别人都不可以，测试一下：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161128184912423) \n\n> 这样就可以了，自己可以修改，但是别人不可以。\n\n但是你老婆不满意了，凭什么只有你自己能改？我也想改！\n\n这种要求，还是应该满足一下的，怎么做呢？\n\n``` java\npublic void setMoney(Object o,double money) {\n    if (o == this || o == this.wife) {\n        this.money = money;\n    } else {\n        System.out.println(\"喂，110吗？有人抢钱！\");\n    }\n}\n```\n\n这样就可以了。\n\n当然，爱思考的人肯定发现了，我把抢钱的那句话修改了，没有获取修改人的名字，因为传入的是Objects对象。当然，你也可以再写点代码，判断一下传进来的是什么，然后抢转为相应的类型，再调用相应的方法。\n\n除此之外，就没有别的办法了么？当然有，具体怎么做，我们下一篇文章再做分解。下一篇文章《重新认识java（三） ---- 面向对象之继承》不定期更新。\n\n> 仔细思考一下你会发现，我特么竟然是在骗你！因为当你提供了set函数以后，小偷又可以偷你的东西了。仔细看一下之前小偷是怎么偷你东西的你就知道了。\n\n> 没错，就是通过你自己。小偷通过你自己改变了你自己。听起来有点扯，但是事实上就是这样的。\n\n> 那么，有没有一种办法让小偷在只得到”你自己“的情况下怎么样都不能改变“你的属性值”，而只有你自己能改变呢？\n\n> 大家可以自己想想，具体的解决办法，我们在之后的文章里揭晓。敬请期待。\n\n## **总结一下**\n\n以上就是面向对象的封装，封装不仅仅只是private + getter and setter。使用封装可以对setter进行更深层次的定制。你可以对可以执行setter方法的对象做规定，也可以对数据作要求，还可以做类型转换等等一系列你可以想到的。\n\n使用封装不仅仅是安全，更可以简化操作。不要觉得用了封装多了好多代码，看起来乱糟糟的。这只是因为我举得例子太小了。如果你写你个大的系统，一开始你的这样定义类的\n\n``` java\npublic int age;\n```\n\n你的程序里大概有100处这样的语句：\n\n``` java\np.age = 10;\n```\n\n这个时候，突然要求你把数据类型变了，改成：\n\n``` java\npublic String age;\n```\n你是不是要把那100处数据都加个双引号呢？这是不是很麻烦？\n\n如果你用了封装，你只需要这样：\n\n``` java\npublic void setAge(int age){\n\tthis.age = String.valueOf(age);\n}\n\n```\n然后就搞定了，是不是简化了操作？\n\n我只是举个例子，实际开发中也不会出现改变数据类型这么操蛋的事。。\n\n\n封装还有一个好处是模块化。当你参与一个很多人实现的大型系统中，你不可能知道所有的类是怎样实现的。你只需要知道这个类给我提供了哪些方法，我需要传入什么数据，我能得到什么结果。至于怎么得到的，关我x事？\n\n所以说，如果你写的代码还没有用封装，改过来吧。不是因为大家都用所以你也应该用，而是这确实可以给你提供极大的便利。\n\n结束~\n\n----------\n本文同步更新在 ： blog.clevercfan.cn\n有什么疑问或者错误可以给我留言\n\n下篇文章见~","source":"study/java/two.md","raw":"---\ntitle: 封装\ntype: javaImprove\norder: 3\n---\n\n> 如果你认为封装仅仅是private + getter and setter，那你就大错特错了！\n\n## **什么是封装**\n\n对于面向对象的特点，我想大家都可以倒背如流了：封装，继承，多态。很多人对这些特点的理解仅仅停留在表面。以为封装就是变量私有化，然后对外提供接口，而不知为什么要这样做。\n\n封装，简单的来讲就是将变量的属性私有化，在java里就是用private修饰符修饰，这样在外部产生的对象就不能直接访问到这个变量。想要对变量进行操作或者访问，就需要在类里提供外部访问的接口，也就是我们熟知的get和set方法。\n\n这就是大部分人对封装的理解。知道有封装这回事，知道怎么用，却不知道为什么要用，甚至觉得这是多此一举。因为明明`person.name`就可以访问到变量，为什么非要`person.getName()`呢？\n\n## **任性的使用public**\n\n我们先来看一下不使用封装的情况。\n\n首先，有两个类，Man和Women:\n\n``` java\n//Man\npublic class Man {\n    public String name; //名字\n    public Woman wife;  //男人嘛，都有妻子\n    public double money;//男人嘛，多赚点钱\n\n\t//还可以结个婚\n    public void marry(Woman woman){\n        this.wife = woman;\n        woman.marry(this);\n    }\n}\n//Women\npublic class Woman {\n    public String name; //名字\n    public Man husband; //得有一个丈夫\n\t//也可以结个婚\n    public void marry(Man man){\n        this.husband = man;\n    }\n}\n```\n代码很精简，看着很舒服，测试一下。\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161128181621627) \n\n> 哎哟，看起来还不错。\n\n这个时候，来了一个小偷，这小偷不干别的，就偷别人的钱和老婆。\n\n``` java\n//小偷\npublic class Thief {\n    private double stealMoney = 0;\n    private List<Woman> womens = new ArrayList<>();\n\n    //偷钱\n    public void stealMoney(Man man){\n        stealMoney += man.money;\n        man.money = 0;\n        System.out.println(\"哈哈，偷到钱了\");\n    }\n    //偷老婆，最可气的是，偷了你的老婆还把凤姐丢给了你\n    public void stealWife(Man man){\n        womens.add(man.wife);\n        Woman woman = new Woman();\n        woman.name = \"凤姐\";\n        man.wife = woman;\n        System.out.println(\"哈哈哈，又偷了一个妹纸\");\n    }\n}\n```\n\n有一天，来了这么一个小偷：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161128182205942)\n\n>傻了吧？你老婆呢？你钱呢？哈哈哈哈哈哈哈哈哈\n\n就这样，小偷偷走了你的钱和你的老婆并丢给了你一个凤姐，而你，却无能为力。\n\n你觉得必须要改变一下了！！\n\n## **封装前来报到** \n\n封装觉得你有点惨，于是过来帮了一下你：\n\n``` java\n//PackageMan\npublic class PackageMan {\n    private String name; //私有化名字\n    private PackageWoman wife;//必须私有！！必须！\n    private double money; //私有，统统私有！\n    //我们先写个构造函数，为了方便\n    public PackageMan(String name, double money) {\n        this.name = name;\n        this.money = money;\n    }\n    //结婚\n    public void marry(PackageWoman woman){\n        this.wife = woman;\n        woman.marry(this);\n    }\n\n    //各种getter和setter\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public PackageWoman getWife() {\n        return wife;\n    }\n\n    public double getMoney() {\n        return money;\n    }\n}\n\n//PackageWoman\npublic class PackageWoman {\n    private String name;\n    private PackageMan husband;\n\n    public void marry(PackageMan man){\n        this.husband = man;\n    }\n\n    public PackageWoman(String name) {\n        this.name = name;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public PackageMan getHusband() {\n        return husband;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n看起来有点眼花缭乱，这样真的有效么？\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161128183404652)\n\n> 恩，看起来还行，就是代码长了点，赶紧给我来个小偷测试一下！\n\n什么？你想测试一下，不好意思，测试不了，因为小偷已经死在测试的路上了。因为我们根本没有对外提供设置money和wife的方法，所以小偷可以知道你有多少钱，知道你有一个漂亮的老婆，但是他却无能为力，因为他只能看着。\n\n细心的人也许发现了，这里面有一个很严重的问题：\n\n没错，小偷不能把我们的money清空了，也不能将我们的wife换成别人了。但是，如果我们要自己换呢？我的钱这辈子就这么点？还不能花？我还不能离婚了？（咳咳。。不鼓励离婚哈，就是举个例子，别打我）\n\n## **这才是封装厉害的地方**\n\n如何解决上面的问题呢？私有化外部访问不到，自己也没法改变数据，提供set方法又会让所有人都能改，和不私有没什么区别，好纠结啊。\n\n\n等等，你刚刚说 “所有人“？真的是所有人么？\n\n我们来看看：\n\n``` java\npublic void setMoney(PackageMan man,double money) {\n    if (man == this) {\n        this.money = money;\n    } else {\n        System.out.println(\"喂，110吗？\"+man.getName()+\"抢钱！\");\n    }\n}\n```\n\n这样呢？只有你自己可以修改，别人都不可以，测试一下：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161128184912423) \n\n> 这样就可以了，自己可以修改，但是别人不可以。\n\n但是你老婆不满意了，凭什么只有你自己能改？我也想改！\n\n这种要求，还是应该满足一下的，怎么做呢？\n\n``` java\npublic void setMoney(Object o,double money) {\n    if (o == this || o == this.wife) {\n        this.money = money;\n    } else {\n        System.out.println(\"喂，110吗？有人抢钱！\");\n    }\n}\n```\n\n这样就可以了。\n\n当然，爱思考的人肯定发现了，我把抢钱的那句话修改了，没有获取修改人的名字，因为传入的是Objects对象。当然，你也可以再写点代码，判断一下传进来的是什么，然后抢转为相应的类型，再调用相应的方法。\n\n除此之外，就没有别的办法了么？当然有，具体怎么做，我们下一篇文章再做分解。下一篇文章《重新认识java（三） ---- 面向对象之继承》不定期更新。\n\n> 仔细思考一下你会发现，我特么竟然是在骗你！因为当你提供了set函数以后，小偷又可以偷你的东西了。仔细看一下之前小偷是怎么偷你东西的你就知道了。\n\n> 没错，就是通过你自己。小偷通过你自己改变了你自己。听起来有点扯，但是事实上就是这样的。\n\n> 那么，有没有一种办法让小偷在只得到”你自己“的情况下怎么样都不能改变“你的属性值”，而只有你自己能改变呢？\n\n> 大家可以自己想想，具体的解决办法，我们在之后的文章里揭晓。敬请期待。\n\n## **总结一下**\n\n以上就是面向对象的封装，封装不仅仅只是private + getter and setter。使用封装可以对setter进行更深层次的定制。你可以对可以执行setter方法的对象做规定，也可以对数据作要求，还可以做类型转换等等一系列你可以想到的。\n\n使用封装不仅仅是安全，更可以简化操作。不要觉得用了封装多了好多代码，看起来乱糟糟的。这只是因为我举得例子太小了。如果你写你个大的系统，一开始你的这样定义类的\n\n``` java\npublic int age;\n```\n\n你的程序里大概有100处这样的语句：\n\n``` java\np.age = 10;\n```\n\n这个时候，突然要求你把数据类型变了，改成：\n\n``` java\npublic String age;\n```\n你是不是要把那100处数据都加个双引号呢？这是不是很麻烦？\n\n如果你用了封装，你只需要这样：\n\n``` java\npublic void setAge(int age){\n\tthis.age = String.valueOf(age);\n}\n\n```\n然后就搞定了，是不是简化了操作？\n\n我只是举个例子，实际开发中也不会出现改变数据类型这么操蛋的事。。\n\n\n封装还有一个好处是模块化。当你参与一个很多人实现的大型系统中，你不可能知道所有的类是怎样实现的。你只需要知道这个类给我提供了哪些方法，我需要传入什么数据，我能得到什么结果。至于怎么得到的，关我x事？\n\n所以说，如果你写的代码还没有用封装，改过来吧。不是因为大家都用所以你也应该用，而是这确实可以给你提供极大的便利。\n\n结束~\n\n----------\n本文同步更新在 ： blog.clevercfan.cn\n有什么疑问或者错误可以给我留言\n\n下篇文章见~","date":"2016-12-13T03:51:51.000Z","updated":"2016-12-13T03:51:51.000Z","path":"study/java/two.html","comments":1,"layout":"page","_id":"ciwoiwpex00081a2dhe8vvn7u","content":"<blockquote>\n<p>如果你认为封装仅仅是private + getter and setter，那你就大错特错了！</p>\n</blockquote>\n<h2 id=\"什么是封装\"><a href=\"#什么是封装\" class=\"headerlink\" title=\"什么是封装\"></a><strong>什么是封装</strong></h2><p>对于面向对象的特点，我想大家都可以倒背如流了：封装，继承，多态。很多人对这些特点的理解仅仅停留在表面。以为封装就是变量私有化，然后对外提供接口，而不知为什么要这样做。</p>\n<p>封装，简单的来讲就是将变量的属性私有化，在java里就是用private修饰符修饰，这样在外部产生的对象就不能直接访问到这个变量。想要对变量进行操作或者访问，就需要在类里提供外部访问的接口，也就是我们熟知的get和set方法。</p>\n<p>这就是大部分人对封装的理解。知道有封装这回事，知道怎么用，却不知道为什么要用，甚至觉得这是多此一举。因为明明<code>person.name</code>就可以访问到变量，为什么非要<code>person.getName()</code>呢？</p>\n<h2 id=\"任性的使用public\"><a href=\"#任性的使用public\" class=\"headerlink\" title=\"任性的使用public\"></a><strong>任性的使用public</strong></h2><p>我们先来看一下不使用封装的情况。</p>\n<p>首先，有两个类，Man和Women:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Man</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> String name; <span class=\"comment\">//名字</span></div><div class=\"line\">    <span class=\"keyword\">public</span> Woman wife;  <span class=\"comment\">//男人嘛，都有妻子</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> money;<span class=\"comment\">//男人嘛，多赚点钱</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//还可以结个婚</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(Woman woman)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.wife = woman;</div><div class=\"line\">        woman.marry(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Women</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> String name; <span class=\"comment\">//名字</span></div><div class=\"line\">    <span class=\"keyword\">public</span> Man husband; <span class=\"comment\">//得有一个丈夫</span></div><div class=\"line\">\t<span class=\"comment\">//也可以结个婚</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(Man man)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.husband = man;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>代码很精简，看着很舒服，测试一下。</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161128181621627\" alt=\"这里写图片描述\"> </p>\n<p>哎哟，看起来还不错。</p>\n</blockquote>\n<p>这个时候，来了一个小偷，这小偷不干别的，就偷别人的钱和老婆。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//小偷</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thief</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> stealMoney = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;Woman&gt; womens = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//偷钱</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stealMoney</span><span class=\"params\">(Man man)</span></span>&#123;</div><div class=\"line\">        stealMoney += man.money;</div><div class=\"line\">        man.money = <span class=\"number\">0</span>;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"哈哈，偷到钱了\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//偷老婆，最可气的是，偷了你的老婆还把凤姐丢给了你</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stealWife</span><span class=\"params\">(Man man)</span></span>&#123;</div><div class=\"line\">        womens.add(man.wife);</div><div class=\"line\">        Woman woman = <span class=\"keyword\">new</span> Woman();</div><div class=\"line\">        woman.name = <span class=\"string\">\"凤姐\"</span>;</div><div class=\"line\">        man.wife = woman;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"哈哈哈，又偷了一个妹纸\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>有一天，来了这么一个小偷：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161128182205942\" alt=\"这里写图片描述\"></p>\n<p>傻了吧？你老婆呢？你钱呢？哈哈哈哈哈哈哈哈哈</p>\n</blockquote>\n<p>就这样，小偷偷走了你的钱和你的老婆并丢给了你一个凤姐，而你，却无能为力。</p>\n<p>你觉得必须要改变一下了！！</p>\n<h2 id=\"封装前来报到\"><a href=\"#封装前来报到\" class=\"headerlink\" title=\"封装前来报到\"></a><strong>封装前来报到</strong></h2><p>封装觉得你有点惨，于是过来帮了一下你：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//PackageMan</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PackageMan</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name; <span class=\"comment\">//私有化名字</span></div><div class=\"line\">    <span class=\"keyword\">private</span> PackageWoman wife;<span class=\"comment\">//必须私有！！必须！</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> money; <span class=\"comment\">//私有，统统私有！</span></div><div class=\"line\">    <span class=\"comment\">//我们先写个构造函数，为了方便</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PackageMan</span><span class=\"params\">(String name, <span class=\"keyword\">double</span> money)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.money = money;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//结婚</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(PackageWoman woman)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.wife = woman;</div><div class=\"line\">        woman.marry(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//各种getter和setter</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PackageWoman <span class=\"title\">getWife</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> wife;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getMoney</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> money;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//PackageWoman</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PackageWoman</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> PackageMan husband;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(PackageMan man)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.husband = man;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PackageWoman</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PackageMan <span class=\"title\">getHusband</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> husband;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看起来有点眼花缭乱，这样真的有效么？</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161128183404652\" alt=\"这里写图片描述\"></p>\n<p>恩，看起来还行，就是代码长了点，赶紧给我来个小偷测试一下！</p>\n</blockquote>\n<p>什么？你想测试一下，不好意思，测试不了，因为小偷已经死在测试的路上了。因为我们根本没有对外提供设置money和wife的方法，所以小偷可以知道你有多少钱，知道你有一个漂亮的老婆，但是他却无能为力，因为他只能看着。</p>\n<p>细心的人也许发现了，这里面有一个很严重的问题：</p>\n<p>没错，小偷不能把我们的money清空了，也不能将我们的wife换成别人了。但是，如果我们要自己换呢？我的钱这辈子就这么点？还不能花？我还不能离婚了？（咳咳。。不鼓励离婚哈，就是举个例子，别打我）</p>\n<h2 id=\"这才是封装厉害的地方\"><a href=\"#这才是封装厉害的地方\" class=\"headerlink\" title=\"这才是封装厉害的地方\"></a><strong>这才是封装厉害的地方</strong></h2><p>如何解决上面的问题呢？私有化外部访问不到，自己也没法改变数据，提供set方法又会让所有人都能改，和不私有没什么区别，好纠结啊。</p>\n<p>等等，你刚刚说 “所有人“？真的是所有人么？</p>\n<p>我们来看看：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMoney</span><span class=\"params\">(PackageMan man,<span class=\"keyword\">double</span> money)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (man == <span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.money = money;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"喂，110吗？\"</span>+man.getName()+<span class=\"string\">\"抢钱！\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样呢？只有你自己可以修改，别人都不可以，测试一下：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161128184912423\" alt=\"这里写图片描述\"> </p>\n<p>这样就可以了，自己可以修改，但是别人不可以。</p>\n</blockquote>\n<p>但是你老婆不满意了，凭什么只有你自己能改？我也想改！</p>\n<p>这种要求，还是应该满足一下的，怎么做呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMoney</span><span class=\"params\">(Object o,<span class=\"keyword\">double</span> money)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (o == <span class=\"keyword\">this</span> || o == <span class=\"keyword\">this</span>.wife) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.money = money;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"喂，110吗？有人抢钱！\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样就可以了。</p>\n<p>当然，爱思考的人肯定发现了，我把抢钱的那句话修改了，没有获取修改人的名字，因为传入的是Objects对象。当然，你也可以再写点代码，判断一下传进来的是什么，然后抢转为相应的类型，再调用相应的方法。</p>\n<p>除此之外，就没有别的办法了么？当然有，具体怎么做，我们下一篇文章再做分解。下一篇文章《重新认识java（三） —- 面向对象之继承》不定期更新。</p>\n<blockquote>\n<p>仔细思考一下你会发现，我特么竟然是在骗你！因为当你提供了set函数以后，小偷又可以偷你的东西了。仔细看一下之前小偷是怎么偷你东西的你就知道了。</p>\n<p>没错，就是通过你自己。小偷通过你自己改变了你自己。听起来有点扯，但是事实上就是这样的。</p>\n<p>那么，有没有一种办法让小偷在只得到”你自己“的情况下怎么样都不能改变“你的属性值”，而只有你自己能改变呢？</p>\n<p>大家可以自己想想，具体的解决办法，我们在之后的文章里揭晓。敬请期待。</p>\n</blockquote>\n<h2 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a><strong>总结一下</strong></h2><p>以上就是面向对象的封装，封装不仅仅只是private + getter and setter。使用封装可以对setter进行更深层次的定制。你可以对可以执行setter方法的对象做规定，也可以对数据作要求，还可以做类型转换等等一系列你可以想到的。</p>\n<p>使用封装不仅仅是安全，更可以简化操作。不要觉得用了封装多了好多代码，看起来乱糟糟的。这只是因为我举得例子太小了。如果你写你个大的系统，一开始你的这样定义类的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age;</div></pre></td></tr></table></figure>\n<p>你的程序里大概有100处这样的语句：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">p.age = <span class=\"number\">10</span>;</div></pre></td></tr></table></figure>\n<p>这个时候，突然要求你把数据类型变了，改成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> String age;</div></pre></td></tr></table></figure>\n<p>你是不是要把那100处数据都加个双引号呢？这是不是很麻烦？</p>\n<p>如果你用了封装，你只需要这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.age = String.valueOf(age);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后就搞定了，是不是简化了操作？</p>\n<p>我只是举个例子，实际开发中也不会出现改变数据类型这么操蛋的事。。</p>\n<p>封装还有一个好处是模块化。当你参与一个很多人实现的大型系统中，你不可能知道所有的类是怎样实现的。你只需要知道这个类给我提供了哪些方法，我需要传入什么数据，我能得到什么结果。至于怎么得到的，关我x事？</p>\n<p>所以说，如果你写的代码还没有用封装，改过来吧。不是因为大家都用所以你也应该用，而是这确实可以给你提供极大的便利。</p>\n<p>结束~</p>\n<hr>\n<p>本文同步更新在 ： blog.clevercfan.cn<br>有什么疑问或者错误可以给我留言</p>\n<p>下篇文章见~</p>\n","excerpt":"","more":"<blockquote>\n<p>如果你认为封装仅仅是private + getter and setter，那你就大错特错了！</p>\n</blockquote>\n<h2 id=\"什么是封装\"><a href=\"#什么是封装\" class=\"headerlink\" title=\"什么是封装\"></a><strong>什么是封装</strong></h2><p>对于面向对象的特点，我想大家都可以倒背如流了：封装，继承，多态。很多人对这些特点的理解仅仅停留在表面。以为封装就是变量私有化，然后对外提供接口，而不知为什么要这样做。</p>\n<p>封装，简单的来讲就是将变量的属性私有化，在java里就是用private修饰符修饰，这样在外部产生的对象就不能直接访问到这个变量。想要对变量进行操作或者访问，就需要在类里提供外部访问的接口，也就是我们熟知的get和set方法。</p>\n<p>这就是大部分人对封装的理解。知道有封装这回事，知道怎么用，却不知道为什么要用，甚至觉得这是多此一举。因为明明<code>person.name</code>就可以访问到变量，为什么非要<code>person.getName()</code>呢？</p>\n<h2 id=\"任性的使用public\"><a href=\"#任性的使用public\" class=\"headerlink\" title=\"任性的使用public\"></a><strong>任性的使用public</strong></h2><p>我们先来看一下不使用封装的情况。</p>\n<p>首先，有两个类，Man和Women:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//Man</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Man</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> String name; <span class=\"comment\">//名字</span></div><div class=\"line\">    <span class=\"keyword\">public</span> Woman wife;  <span class=\"comment\">//男人嘛，都有妻子</span></div><div class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">double</span> money;<span class=\"comment\">//男人嘛，多赚点钱</span></div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//还可以结个婚</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(Woman woman)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.wife = woman;</div><div class=\"line\">        woman.marry(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">//Women</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Woman</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">public</span> String name; <span class=\"comment\">//名字</span></div><div class=\"line\">    <span class=\"keyword\">public</span> Man husband; <span class=\"comment\">//得有一个丈夫</span></div><div class=\"line\">\t<span class=\"comment\">//也可以结个婚</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(Man man)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.husband = man;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>代码很精简，看着很舒服，测试一下。</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161128181621627\" alt=\"这里写图片描述\"> </p>\n<p>哎哟，看起来还不错。</p>\n</blockquote>\n<p>这个时候，来了一个小偷，这小偷不干别的，就偷别人的钱和老婆。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//小偷</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Thief</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> stealMoney = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> List&lt;Woman&gt; womens = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//偷钱</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stealMoney</span><span class=\"params\">(Man man)</span></span>&#123;</div><div class=\"line\">        stealMoney += man.money;</div><div class=\"line\">        man.money = <span class=\"number\">0</span>;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"哈哈，偷到钱了\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//偷老婆，最可气的是，偷了你的老婆还把凤姐丢给了你</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">stealWife</span><span class=\"params\">(Man man)</span></span>&#123;</div><div class=\"line\">        womens.add(man.wife);</div><div class=\"line\">        Woman woman = <span class=\"keyword\">new</span> Woman();</div><div class=\"line\">        woman.name = <span class=\"string\">\"凤姐\"</span>;</div><div class=\"line\">        man.wife = woman;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"哈哈哈，又偷了一个妹纸\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>有一天，来了这么一个小偷：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161128182205942\" alt=\"这里写图片描述\"></p>\n<p>傻了吧？你老婆呢？你钱呢？哈哈哈哈哈哈哈哈哈</p>\n</blockquote>\n<p>就这样，小偷偷走了你的钱和你的老婆并丢给了你一个凤姐，而你，却无能为力。</p>\n<p>你觉得必须要改变一下了！！</p>\n<h2 id=\"封装前来报到\"><a href=\"#封装前来报到\" class=\"headerlink\" title=\"封装前来报到\"></a><strong>封装前来报到</strong></h2><p>封装觉得你有点惨，于是过来帮了一下你：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//PackageMan</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PackageMan</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name; <span class=\"comment\">//私有化名字</span></div><div class=\"line\">    <span class=\"keyword\">private</span> PackageWoman wife;<span class=\"comment\">//必须私有！！必须！</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> money; <span class=\"comment\">//私有，统统私有！</span></div><div class=\"line\">    <span class=\"comment\">//我们先写个构造函数，为了方便</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PackageMan</span><span class=\"params\">(String name, <span class=\"keyword\">double</span> money)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">        <span class=\"keyword\">this</span>.money = money;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//结婚</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(PackageWoman woman)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.wife = woman;</div><div class=\"line\">        woman.marry(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">//各种getter和setter</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PackageWoman <span class=\"title\">getWife</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> wife;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">double</span> <span class=\"title\">getMoney</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> money;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//PackageWoman</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PackageWoman</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> String name;</div><div class=\"line\">    <span class=\"keyword\">private</span> PackageMan husband;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">marry</span><span class=\"params\">(PackageMan man)</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.husband = man;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">PackageWoman</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> name;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> PackageMan <span class=\"title\">getHusband</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> husband;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setName</span><span class=\"params\">(String name)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.name = name;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>看起来有点眼花缭乱，这样真的有效么？</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161128183404652\" alt=\"这里写图片描述\"></p>\n<p>恩，看起来还行，就是代码长了点，赶紧给我来个小偷测试一下！</p>\n</blockquote>\n<p>什么？你想测试一下，不好意思，测试不了，因为小偷已经死在测试的路上了。因为我们根本没有对外提供设置money和wife的方法，所以小偷可以知道你有多少钱，知道你有一个漂亮的老婆，但是他却无能为力，因为他只能看着。</p>\n<p>细心的人也许发现了，这里面有一个很严重的问题：</p>\n<p>没错，小偷不能把我们的money清空了，也不能将我们的wife换成别人了。但是，如果我们要自己换呢？我的钱这辈子就这么点？还不能花？我还不能离婚了？（咳咳。。不鼓励离婚哈，就是举个例子，别打我）</p>\n<h2 id=\"这才是封装厉害的地方\"><a href=\"#这才是封装厉害的地方\" class=\"headerlink\" title=\"这才是封装厉害的地方\"></a><strong>这才是封装厉害的地方</strong></h2><p>如何解决上面的问题呢？私有化外部访问不到，自己也没法改变数据，提供set方法又会让所有人都能改，和不私有没什么区别，好纠结啊。</p>\n<p>等等，你刚刚说 “所有人“？真的是所有人么？</p>\n<p>我们来看看：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMoney</span><span class=\"params\">(PackageMan man,<span class=\"keyword\">double</span> money)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (man == <span class=\"keyword\">this</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.money = money;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"喂，110吗？\"</span>+man.getName()+<span class=\"string\">\"抢钱！\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样呢？只有你自己可以修改，别人都不可以，测试一下：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161128184912423\" alt=\"这里写图片描述\"> </p>\n<p>这样就可以了，自己可以修改，但是别人不可以。</p>\n</blockquote>\n<p>但是你老婆不满意了，凭什么只有你自己能改？我也想改！</p>\n<p>这种要求，还是应该满足一下的，怎么做呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMoney</span><span class=\"params\">(Object o,<span class=\"keyword\">double</span> money)</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (o == <span class=\"keyword\">this</span> || o == <span class=\"keyword\">this</span>.wife) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.money = money;</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"喂，110吗？有人抢钱！\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>这样就可以了。</p>\n<p>当然，爱思考的人肯定发现了，我把抢钱的那句话修改了，没有获取修改人的名字，因为传入的是Objects对象。当然，你也可以再写点代码，判断一下传进来的是什么，然后抢转为相应的类型，再调用相应的方法。</p>\n<p>除此之外，就没有别的办法了么？当然有，具体怎么做，我们下一篇文章再做分解。下一篇文章《重新认识java（三） —- 面向对象之继承》不定期更新。</p>\n<blockquote>\n<p>仔细思考一下你会发现，我特么竟然是在骗你！因为当你提供了set函数以后，小偷又可以偷你的东西了。仔细看一下之前小偷是怎么偷你东西的你就知道了。</p>\n<p>没错，就是通过你自己。小偷通过你自己改变了你自己。听起来有点扯，但是事实上就是这样的。</p>\n<p>那么，有没有一种办法让小偷在只得到”你自己“的情况下怎么样都不能改变“你的属性值”，而只有你自己能改变呢？</p>\n<p>大家可以自己想想，具体的解决办法，我们在之后的文章里揭晓。敬请期待。</p>\n</blockquote>\n<h2 id=\"总结一下\"><a href=\"#总结一下\" class=\"headerlink\" title=\"总结一下\"></a><strong>总结一下</strong></h2><p>以上就是面向对象的封装，封装不仅仅只是private + getter and setter。使用封装可以对setter进行更深层次的定制。你可以对可以执行setter方法的对象做规定，也可以对数据作要求，还可以做类型转换等等一系列你可以想到的。</p>\n<p>使用封装不仅仅是安全，更可以简化操作。不要觉得用了封装多了好多代码，看起来乱糟糟的。这只是因为我举得例子太小了。如果你写你个大的系统，一开始你的这样定义类的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> age;</div></pre></td></tr></table></figure>\n<p>你的程序里大概有100处这样的语句：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">p.age = <span class=\"number\">10</span>;</div></pre></td></tr></table></figure>\n<p>这个时候，突然要求你把数据类型变了，改成：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> String age;</div></pre></td></tr></table></figure>\n<p>你是不是要把那100处数据都加个双引号呢？这是不是很麻烦？</p>\n<p>如果你用了封装，你只需要这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setAge</span><span class=\"params\">(<span class=\"keyword\">int</span> age)</span></span>&#123;</div><div class=\"line\">\t<span class=\"keyword\">this</span>.age = String.valueOf(age);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>然后就搞定了，是不是简化了操作？</p>\n<p>我只是举个例子，实际开发中也不会出现改变数据类型这么操蛋的事。。</p>\n<p>封装还有一个好处是模块化。当你参与一个很多人实现的大型系统中，你不可能知道所有的类是怎样实现的。你只需要知道这个类给我提供了哪些方法，我需要传入什么数据，我能得到什么结果。至于怎么得到的，关我x事？</p>\n<p>所以说，如果你写的代码还没有用封装，改过来吧。不是因为大家都用所以你也应该用，而是这确实可以给你提供极大的便利。</p>\n<p>结束~</p>\n<hr>\n<p>本文同步更新在 ： blog.clevercfan.cn<br>有什么疑问或者错误可以给我留言</p>\n<p>下篇文章见~</p>\n"},{"title":"万物皆对象（上）","type":"javaImprove","order":1,"_content":"\n> 如果你现实中没有对象，至少你在java世界里会有茫茫多的对象，听起来是不是很激动呢？\n\n## **对象，引用，类与现实世界**\n\n现实世界里有许许多多的生物，非生物，跑的跳的飞的，过去的现在的未来的，令人眼花缭乱。我们编程的目的，就是解决现实生活中的问题。所以不可避免的我们要和现实世界中各种奇怪的东西打交道。\n\n在现实世界里，你新认识了一个朋友，你知道他长什么样，知道了他的名字年龄，地址。知道他喜欢干什么有什么特长。你想用java语言描述一下这个人，你应该怎么做呢？\n\n这个时候，就有了类的概念。每一个类对应现实世界中的某一事物。比如现实世界中有人。那么我们就创建一个关于“人”的类。\n\n每一个人都有名字，都有地址等等个人信息。那么我们就在“人”的类里面添加这些属性。\n\n每一个人都会吃，会走路，那么我们就在“人”的类里面添加吃和走的方法。\n\n当这个世界又迎来了一个新生命，我们就可以“new”一个“人”，“new”出来的就叫”对象“。\n\n每一个人一出生，父母就会给他取个名字。在程序里，我们需要用一种方式来操作这个“对象”，于是，就出现了引用。我们通过引用来操作对象，设置对象的属性，操作对象的方法。\n\n这就是最基本的面向对象。\n\n>【 **现实世界的事物**】 ---抽象---> 【**类** 】---new--->【**对象** 】<---控制--- 【**引用**】\n\n## **从创建一个对象开始**\n\n创建对象的前提是先得有一个类。我们先自己创建一个person类。\n\n```\n//Person类\npublic class Person {\n    private String name;\n    private int age;\n\n    public void eat(){\n        System.out.println(\"i am eating\");\n    }\n}\n```\n创建一个person对象。\n```java\n\tPerson p = new Person();\n```\n\n怎么理解这句简单的代码呢？\n\n- **new Person** :一个Person类型的对象\n- **()** : 这个括号相当于调用了person的无参构造方法\n- **p** ： Person对象的引用\n\n有的人会认为p就是new出来的Person对象。这是错误的理解，p只是一个Person对象的引用而已。那么问题来了，什么是引用？什么又是对象呢？这个要从内存说起。\n\n## **创建对象的过程**\n\njava大体上会把内存分为四块区域：堆，栈，静态区，常量区。\n\n- 堆 ： 位于RAM中，用于存放所有的java对象。\n- 栈 ： 位于RAM中，引用就存在于栈中。\n- 静态区 : 位于RAM中，被static修饰符修饰的变量会被放在这里\n- 常量区 ：位于ROM中， 很明显，放常量的。\n\n> 事实上，我们不需要关心java的对象，变量到底存在了哪里，因为jvm会帮我们处理好这些。但是理解了这些，有助于提高我们的水平。\n\n当执行这句代码的时候。\n```java\nPerson p = new Person();\n```\n首先，会在堆中开辟一块空间存放这个新来的Person对象。然后，会创建一个引用p，存放在栈中，这个引用p指向Person对象（事实上是，p的值就是Person对象的内存地址）。\n\n这样，我们通过访问p，然后得到了Person的内存地址，进而找到了Person对象。\n\n然后又有了这样一句代码：\n\n```java\nPerson p2 = p;\n```\n\n这句代码的含义是：\n\t创建了一个新的引用，保存在栈中，引用的地址也指向Person的地址。这个时候，你通过p2来改变Person对象的状态，也会改变p的结果。因为它们指向同一个对象。（String除外，之后会专门讲String）\n\n此时，内存中是这样的：\n\n![这里写图片描述](http://img.blog.csdn.net/20161127181947666)\n\n\n用一种很通俗的方式来讲解一下引用和对象。\n\n大家都应该用过windows吧。win有一个神奇的东西叫做快捷方式。我们桌面的图标大部分都是快捷方式。它并不是我们安装在电脑上的应用的可执行文件（不是.exe文件)，那么为什么点击它可以打开应用程序呢？这个我不用讲了把。\n\n我们的对象和引用就和快捷方式和它连接的文件一样。\n\n我们不直接对文件进行操作，而是通过快捷方式来进行操作。快捷方式不能独立存在，同样，引用也不能独立存在（你可以只创建一个引用，但是当你要使用它的时候必须得给它赋值，否则它将毫无用处）。\n\n一个文件可以有多个快捷方式，同样一个对象也可以有多个引用。而一个引用只能同时对应一个对象。\n\n\n>在java里，“=”不能被看成是一个赋值语句，它不是在把一个对象赋给另外一个对象，它的执行过程实质上是将右边对象的地址传给了左边的引用，使得左边的引用指向了右边的对象。java表面上看起来没有指针，但它的引用其实质就是一个指针。在java里，“=”语句不应该被翻译成赋值语句，因为它所执行的确实不是一个简单的赋值过程，而是一个传地址的过程，被译成赋值语句会造成很多误解，译得不准确。\n\n## **特例：基本数据类型**\n\n为什么会有特例呢？因为用new操作符创建的对象会存在堆里，二在堆里开辟空间等行为效率较操作栈要低。而我们平时写代码的时候会经常创建一些“小变量”，比如int i = 1；如果每次都用Interger来new一个，效率不是很高而且浪费内存。\n\n所以针对这些情况，java提供了“基本数据类型”，基本数据类型一共有八种，每一个基本数据类型存放在栈中，而他们的值存放在常量区中。\n\n举个例子：\n\n```\nint i = 2;\nint j = 2;\n```\n我们需要知道的是，在常量区中，相同的常量只会存在一个。当执行第一句代码时。先查找常量区中有没有2，没有，则开辟一个空间存放2，然后在栈中存入一个变量i，让i指向2；\n\n执行第二句的时候，查找发现2已经存在了，所以就不开辟新空间了。直接在栈中保存一个新变量j，让j指向2；\n\n当然，java堆每一个基本数据类型都提供了对应的包装类。我们依旧可以用new操作符来创建我们想要的变量。\n\n```\nInteger i = new Integer(1);\nInteger j = new Integer(1);\n```\n\n但是，用new操作符创建的对象是不同的，也就是说，此时，i和j指向不同的内存地址。因为每次调用new操作符，都会在堆开辟新的空间。\n\n当然，说到基本数据类型，不得不提一下java的经典设计。\n\n先看一段代码：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127213126561) \n\n为什么一个是true一个是false呢？\n\n我就不讲了，应该都知道吧。我就贴一个Integer的源码（jdk1.8）吧。\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127213328205)\n\n> Integer 类的内部定义了一个内部类，缓存了从-128到127的所有数字，所以，你懂得。\n\n## **又一个特例 ：String**\n\nString是一个特殊的类，因为它被final修饰符所修饰，是一个不可改变的类。当然，看过java源码后你会发现，基本类型的各个包装类也被final所修饰。这里以String为例。\n\n我们来看这样一个例子\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127190238240)\n\n>执行第一句 ： 常量区开辟空间存放“abc”，s1存放在栈中指向“abc”\n\n>执行第二句，s2 也指向 “abc”，\n\n>执行第三句，因为“abc”已经存在，所以直接指向它。\n\n>所以三个变量指向同一块内存地址，结果都为true。\n\n>当s1内容改变的时候。这个时候，常量区开辟新的空间存放“bcd”，s1指向“bcd”，而s2和s3指向“abc”所以只有s2和s3相等。\n\n这种情况下，s1,s2,s3都是字符串常量，类似于基本数据类型。（如果执行的是s1 = \"abc\",那么结果会都是true）\n\n我们再看一个例子：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127191904759)\n\n> 执行第一行代码： 在堆里分配空间存放String对象，在常量区开辟空间存放常量“abc”，String对象指向常量，s1指向该对象。\n\n> 执行第二行代码：s2指向“abc”\n\n> 执行第三行代码： 在堆里分配新的空间存放String对象，新对象指向常量“abc”，s3指向该对象。\n\n> 到这里，很明显，s1和s2指向的是同一个对象（虽然两个String对象都指向同一个常量，但两个对象是不同的）\n\n> 接着就很诡异了，我们让s1 依旧= “abc\",但是结果s1和s2指向的地址不同了。\n\n怎么回事呢？这就是String类的特殊之处了，new出来的String不再是上面的字符串常量，而是字符串对象。\n\n由于String类是不可改变的，所以String对象也是不可改变的，我们每次给String赋值都相当于执行了一次new String()，然后让变量指向这个新对象，而不是在原来的对象上修改。\n\n当然，java还提供了StringBuffer类，这个是可以在原对象上做修改的。如果你需要修改原对象，那么请使用StringBuffer类。\n\n## **值传递和引用传递的战争**\n\njava是值传递还是引用传递的呢？毫无疑问，java是值传递的。那么什么又叫值传递和引用传递呢？\n\n我们先来看一个例子：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127194158008) \n\n这是一个很经典的例子，我们希望调用了swap函数以后，a和b的值可以互换，但是事实上并没有。为什么会这样呢？\n\n这就是因为java是值传递的。也就是说，我们在调用一个需要传递参数的函数时，传递给函数的参数并不是我们传进去的参数本身，而是它的副本。说起来比较拗口，但是其实原理很简单。我们可以这样理解：\n\n一个有形参的函数，当别的函数调用它的时候，必须要传递数据。\n比如swap函数，别的函数要调用swap就必须传两个整数过来。\n\n这个时候，有一个函数按耐不住寂寞，扔了两个整数过来，但是，swap函数有洁癖，它不喜欢用别人的东西，于是它把传过来的参数复制了一份，然后对复制的数据修修改改，而别人传过来的参数动根本没动。\n\n所以，当swap函数执行完毕之后，交换了的数据只是swap自己复制的那一份，而原来的数据没变。\n\n> 也可以理解为别的函数把数据传递给了swap函数的形参，最后改变的只是形参而实参没变，所以不会起到任何效果。\n\n我们再来看一个复杂一点的例子(Person类添加了get，set方法)：\n\n>![这里写图片描述](http://img.blog.csdn.net/20161127201149518)\n\n> 可以看到，我们把p1传进去，它并没有被替换成新的对象。因为change函数操作的不是p1这个引用本身，而是这个引用的一个副本。\n\n> 你依然可以理解为，主函数将p1复制了一份然后变成了chagne函数的形参，最终指向新Person对象的是那个副本引用，而实参p1并没有改变。\n\n再来看一个例子：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127201335005) \n \n> 这次为什么就改变了呢？分析一下。\n\n> 首先，new了一个Person对象，暂且叫他小明吧。然后p1指向小明。\n\n> 小明10岁了，随着时间的推移，小明的年龄要变了，调用了一下changgeAge方法，把小明的引用传了进去。\n\n> 传递的过程中，changgeAge也有洁癖，于是复制了一份小明的引用，这个副本也指向小明。\n\n> 然后changgeAge通过自己的副本引用，改变了小明的年龄。\n\n> 由于是小明这个对象被改变了，所以所有小明的引用调用方法得到的年龄都会改变\n \n > 所以就变了。\n\n最后简单的总结一下。\n\njava的传值过程，其实传的是副本，不管是变量还是引用。所以，不要期待把变量传递给一个函数来改变变量本身。\n\n\n","source":"study/java/zero.md","raw":"---\ntitle: 万物皆对象（上）\ntype: javaImprove\norder: 1\n---\n\n> 如果你现实中没有对象，至少你在java世界里会有茫茫多的对象，听起来是不是很激动呢？\n\n## **对象，引用，类与现实世界**\n\n现实世界里有许许多多的生物，非生物，跑的跳的飞的，过去的现在的未来的，令人眼花缭乱。我们编程的目的，就是解决现实生活中的问题。所以不可避免的我们要和现实世界中各种奇怪的东西打交道。\n\n在现实世界里，你新认识了一个朋友，你知道他长什么样，知道了他的名字年龄，地址。知道他喜欢干什么有什么特长。你想用java语言描述一下这个人，你应该怎么做呢？\n\n这个时候，就有了类的概念。每一个类对应现实世界中的某一事物。比如现实世界中有人。那么我们就创建一个关于“人”的类。\n\n每一个人都有名字，都有地址等等个人信息。那么我们就在“人”的类里面添加这些属性。\n\n每一个人都会吃，会走路，那么我们就在“人”的类里面添加吃和走的方法。\n\n当这个世界又迎来了一个新生命，我们就可以“new”一个“人”，“new”出来的就叫”对象“。\n\n每一个人一出生，父母就会给他取个名字。在程序里，我们需要用一种方式来操作这个“对象”，于是，就出现了引用。我们通过引用来操作对象，设置对象的属性，操作对象的方法。\n\n这就是最基本的面向对象。\n\n>【 **现实世界的事物**】 ---抽象---> 【**类** 】---new--->【**对象** 】<---控制--- 【**引用**】\n\n## **从创建一个对象开始**\n\n创建对象的前提是先得有一个类。我们先自己创建一个person类。\n\n```\n//Person类\npublic class Person {\n    private String name;\n    private int age;\n\n    public void eat(){\n        System.out.println(\"i am eating\");\n    }\n}\n```\n创建一个person对象。\n```java\n\tPerson p = new Person();\n```\n\n怎么理解这句简单的代码呢？\n\n- **new Person** :一个Person类型的对象\n- **()** : 这个括号相当于调用了person的无参构造方法\n- **p** ： Person对象的引用\n\n有的人会认为p就是new出来的Person对象。这是错误的理解，p只是一个Person对象的引用而已。那么问题来了，什么是引用？什么又是对象呢？这个要从内存说起。\n\n## **创建对象的过程**\n\njava大体上会把内存分为四块区域：堆，栈，静态区，常量区。\n\n- 堆 ： 位于RAM中，用于存放所有的java对象。\n- 栈 ： 位于RAM中，引用就存在于栈中。\n- 静态区 : 位于RAM中，被static修饰符修饰的变量会被放在这里\n- 常量区 ：位于ROM中， 很明显，放常量的。\n\n> 事实上，我们不需要关心java的对象，变量到底存在了哪里，因为jvm会帮我们处理好这些。但是理解了这些，有助于提高我们的水平。\n\n当执行这句代码的时候。\n```java\nPerson p = new Person();\n```\n首先，会在堆中开辟一块空间存放这个新来的Person对象。然后，会创建一个引用p，存放在栈中，这个引用p指向Person对象（事实上是，p的值就是Person对象的内存地址）。\n\n这样，我们通过访问p，然后得到了Person的内存地址，进而找到了Person对象。\n\n然后又有了这样一句代码：\n\n```java\nPerson p2 = p;\n```\n\n这句代码的含义是：\n\t创建了一个新的引用，保存在栈中，引用的地址也指向Person的地址。这个时候，你通过p2来改变Person对象的状态，也会改变p的结果。因为它们指向同一个对象。（String除外，之后会专门讲String）\n\n此时，内存中是这样的：\n\n![这里写图片描述](http://img.blog.csdn.net/20161127181947666)\n\n\n用一种很通俗的方式来讲解一下引用和对象。\n\n大家都应该用过windows吧。win有一个神奇的东西叫做快捷方式。我们桌面的图标大部分都是快捷方式。它并不是我们安装在电脑上的应用的可执行文件（不是.exe文件)，那么为什么点击它可以打开应用程序呢？这个我不用讲了把。\n\n我们的对象和引用就和快捷方式和它连接的文件一样。\n\n我们不直接对文件进行操作，而是通过快捷方式来进行操作。快捷方式不能独立存在，同样，引用也不能独立存在（你可以只创建一个引用，但是当你要使用它的时候必须得给它赋值，否则它将毫无用处）。\n\n一个文件可以有多个快捷方式，同样一个对象也可以有多个引用。而一个引用只能同时对应一个对象。\n\n\n>在java里，“=”不能被看成是一个赋值语句，它不是在把一个对象赋给另外一个对象，它的执行过程实质上是将右边对象的地址传给了左边的引用，使得左边的引用指向了右边的对象。java表面上看起来没有指针，但它的引用其实质就是一个指针。在java里，“=”语句不应该被翻译成赋值语句，因为它所执行的确实不是一个简单的赋值过程，而是一个传地址的过程，被译成赋值语句会造成很多误解，译得不准确。\n\n## **特例：基本数据类型**\n\n为什么会有特例呢？因为用new操作符创建的对象会存在堆里，二在堆里开辟空间等行为效率较操作栈要低。而我们平时写代码的时候会经常创建一些“小变量”，比如int i = 1；如果每次都用Interger来new一个，效率不是很高而且浪费内存。\n\n所以针对这些情况，java提供了“基本数据类型”，基本数据类型一共有八种，每一个基本数据类型存放在栈中，而他们的值存放在常量区中。\n\n举个例子：\n\n```\nint i = 2;\nint j = 2;\n```\n我们需要知道的是，在常量区中，相同的常量只会存在一个。当执行第一句代码时。先查找常量区中有没有2，没有，则开辟一个空间存放2，然后在栈中存入一个变量i，让i指向2；\n\n执行第二句的时候，查找发现2已经存在了，所以就不开辟新空间了。直接在栈中保存一个新变量j，让j指向2；\n\n当然，java堆每一个基本数据类型都提供了对应的包装类。我们依旧可以用new操作符来创建我们想要的变量。\n\n```\nInteger i = new Integer(1);\nInteger j = new Integer(1);\n```\n\n但是，用new操作符创建的对象是不同的，也就是说，此时，i和j指向不同的内存地址。因为每次调用new操作符，都会在堆开辟新的空间。\n\n当然，说到基本数据类型，不得不提一下java的经典设计。\n\n先看一段代码：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127213126561) \n\n为什么一个是true一个是false呢？\n\n我就不讲了，应该都知道吧。我就贴一个Integer的源码（jdk1.8）吧。\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127213328205)\n\n> Integer 类的内部定义了一个内部类，缓存了从-128到127的所有数字，所以，你懂得。\n\n## **又一个特例 ：String**\n\nString是一个特殊的类，因为它被final修饰符所修饰，是一个不可改变的类。当然，看过java源码后你会发现，基本类型的各个包装类也被final所修饰。这里以String为例。\n\n我们来看这样一个例子\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127190238240)\n\n>执行第一句 ： 常量区开辟空间存放“abc”，s1存放在栈中指向“abc”\n\n>执行第二句，s2 也指向 “abc”，\n\n>执行第三句，因为“abc”已经存在，所以直接指向它。\n\n>所以三个变量指向同一块内存地址，结果都为true。\n\n>当s1内容改变的时候。这个时候，常量区开辟新的空间存放“bcd”，s1指向“bcd”，而s2和s3指向“abc”所以只有s2和s3相等。\n\n这种情况下，s1,s2,s3都是字符串常量，类似于基本数据类型。（如果执行的是s1 = \"abc\",那么结果会都是true）\n\n我们再看一个例子：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127191904759)\n\n> 执行第一行代码： 在堆里分配空间存放String对象，在常量区开辟空间存放常量“abc”，String对象指向常量，s1指向该对象。\n\n> 执行第二行代码：s2指向“abc”\n\n> 执行第三行代码： 在堆里分配新的空间存放String对象，新对象指向常量“abc”，s3指向该对象。\n\n> 到这里，很明显，s1和s2指向的是同一个对象（虽然两个String对象都指向同一个常量，但两个对象是不同的）\n\n> 接着就很诡异了，我们让s1 依旧= “abc\",但是结果s1和s2指向的地址不同了。\n\n怎么回事呢？这就是String类的特殊之处了，new出来的String不再是上面的字符串常量，而是字符串对象。\n\n由于String类是不可改变的，所以String对象也是不可改变的，我们每次给String赋值都相当于执行了一次new String()，然后让变量指向这个新对象，而不是在原来的对象上修改。\n\n当然，java还提供了StringBuffer类，这个是可以在原对象上做修改的。如果你需要修改原对象，那么请使用StringBuffer类。\n\n## **值传递和引用传递的战争**\n\njava是值传递还是引用传递的呢？毫无疑问，java是值传递的。那么什么又叫值传递和引用传递呢？\n\n我们先来看一个例子：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127194158008) \n\n这是一个很经典的例子，我们希望调用了swap函数以后，a和b的值可以互换，但是事实上并没有。为什么会这样呢？\n\n这就是因为java是值传递的。也就是说，我们在调用一个需要传递参数的函数时，传递给函数的参数并不是我们传进去的参数本身，而是它的副本。说起来比较拗口，但是其实原理很简单。我们可以这样理解：\n\n一个有形参的函数，当别的函数调用它的时候，必须要传递数据。\n比如swap函数，别的函数要调用swap就必须传两个整数过来。\n\n这个时候，有一个函数按耐不住寂寞，扔了两个整数过来，但是，swap函数有洁癖，它不喜欢用别人的东西，于是它把传过来的参数复制了一份，然后对复制的数据修修改改，而别人传过来的参数动根本没动。\n\n所以，当swap函数执行完毕之后，交换了的数据只是swap自己复制的那一份，而原来的数据没变。\n\n> 也可以理解为别的函数把数据传递给了swap函数的形参，最后改变的只是形参而实参没变，所以不会起到任何效果。\n\n我们再来看一个复杂一点的例子(Person类添加了get，set方法)：\n\n>![这里写图片描述](http://img.blog.csdn.net/20161127201149518)\n\n> 可以看到，我们把p1传进去，它并没有被替换成新的对象。因为change函数操作的不是p1这个引用本身，而是这个引用的一个副本。\n\n> 你依然可以理解为，主函数将p1复制了一份然后变成了chagne函数的形参，最终指向新Person对象的是那个副本引用，而实参p1并没有改变。\n\n再来看一个例子：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161127201335005) \n \n> 这次为什么就改变了呢？分析一下。\n\n> 首先，new了一个Person对象，暂且叫他小明吧。然后p1指向小明。\n\n> 小明10岁了，随着时间的推移，小明的年龄要变了，调用了一下changgeAge方法，把小明的引用传了进去。\n\n> 传递的过程中，changgeAge也有洁癖，于是复制了一份小明的引用，这个副本也指向小明。\n\n> 然后changgeAge通过自己的副本引用，改变了小明的年龄。\n\n> 由于是小明这个对象被改变了，所以所有小明的引用调用方法得到的年龄都会改变\n \n > 所以就变了。\n\n最后简单的总结一下。\n\njava的传值过程，其实传的是副本，不管是变量还是引用。所以，不要期待把变量传递给一个函数来改变变量本身。\n\n\n","date":"2016-12-13T03:51:51.000Z","updated":"2016-12-13T03:51:51.000Z","path":"study/java/zero.html","comments":1,"layout":"page","_id":"ciwoiwpey00091a2deplxqj0q","content":"<blockquote>\n<p>如果你现实中没有对象，至少你在java世界里会有茫茫多的对象，听起来是不是很激动呢？</p>\n</blockquote>\n<h2 id=\"对象，引用，类与现实世界\"><a href=\"#对象，引用，类与现实世界\" class=\"headerlink\" title=\"对象，引用，类与现实世界\"></a><strong>对象，引用，类与现实世界</strong></h2><p>现实世界里有许许多多的生物，非生物，跑的跳的飞的，过去的现在的未来的，令人眼花缭乱。我们编程的目的，就是解决现实生活中的问题。所以不可避免的我们要和现实世界中各种奇怪的东西打交道。</p>\n<p>在现实世界里，你新认识了一个朋友，你知道他长什么样，知道了他的名字年龄，地址。知道他喜欢干什么有什么特长。你想用java语言描述一下这个人，你应该怎么做呢？</p>\n<p>这个时候，就有了类的概念。每一个类对应现实世界中的某一事物。比如现实世界中有人。那么我们就创建一个关于“人”的类。</p>\n<p>每一个人都有名字，都有地址等等个人信息。那么我们就在“人”的类里面添加这些属性。</p>\n<p>每一个人都会吃，会走路，那么我们就在“人”的类里面添加吃和走的方法。</p>\n<p>当这个世界又迎来了一个新生命，我们就可以“new”一个“人”，“new”出来的就叫”对象“。</p>\n<p>每一个人一出生，父母就会给他取个名字。在程序里，我们需要用一种方式来操作这个“对象”，于是，就出现了引用。我们通过引用来操作对象，设置对象的属性，操作对象的方法。</p>\n<p>这就是最基本的面向对象。</p>\n<blockquote>\n<p>【 <strong>现实世界的事物</strong>】 —抽象—&gt; 【<strong>类</strong> 】—new—&gt;【<strong>对象</strong> 】&lt;—控制— 【<strong>引用</strong>】</p>\n</blockquote>\n<h2 id=\"从创建一个对象开始\"><a href=\"#从创建一个对象开始\" class=\"headerlink\" title=\"从创建一个对象开始\"></a><strong>从创建一个对象开始</strong></h2><p>创建对象的前提是先得有一个类。我们先自己创建一个person类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//Person类</div><div class=\"line\">public class Person &#123;</div><div class=\"line\">    private String name;</div><div class=\"line\">    private int age;</div><div class=\"line\"></div><div class=\"line\">    public void eat()&#123;</div><div class=\"line\">        System.out.println(&quot;i am eating&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建一个person对象。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person p = <span class=\"keyword\">new</span> Person();</div></pre></td></tr></table></figure></p>\n<p>怎么理解这句简单的代码呢？</p>\n<ul>\n<li><strong>new Person</strong> :一个Person类型的对象</li>\n<li><strong>()</strong> : 这个括号相当于调用了person的无参构造方法</li>\n<li><strong>p</strong> ： Person对象的引用</li>\n</ul>\n<p>有的人会认为p就是new出来的Person对象。这是错误的理解，p只是一个Person对象的引用而已。那么问题来了，什么是引用？什么又是对象呢？这个要从内存说起。</p>\n<h2 id=\"创建对象的过程\"><a href=\"#创建对象的过程\" class=\"headerlink\" title=\"创建对象的过程\"></a><strong>创建对象的过程</strong></h2><p>java大体上会把内存分为四块区域：堆，栈，静态区，常量区。</p>\n<ul>\n<li>堆 ： 位于RAM中，用于存放所有的java对象。</li>\n<li>栈 ： 位于RAM中，引用就存在于栈中。</li>\n<li>静态区 : 位于RAM中，被static修饰符修饰的变量会被放在这里</li>\n<li>常量区 ：位于ROM中， 很明显，放常量的。</li>\n</ul>\n<blockquote>\n<p>事实上，我们不需要关心java的对象，变量到底存在了哪里，因为jvm会帮我们处理好这些。但是理解了这些，有助于提高我们的水平。</p>\n</blockquote>\n<p>当执行这句代码的时候。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person p = <span class=\"keyword\">new</span> Person();</div></pre></td></tr></table></figure></p>\n<p>首先，会在堆中开辟一块空间存放这个新来的Person对象。然后，会创建一个引用p，存放在栈中，这个引用p指向Person对象（事实上是，p的值就是Person对象的内存地址）。</p>\n<p>这样，我们通过访问p，然后得到了Person的内存地址，进而找到了Person对象。</p>\n<p>然后又有了这样一句代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person p2 = p;</div></pre></td></tr></table></figure>\n<p>这句代码的含义是：<br>    创建了一个新的引用，保存在栈中，引用的地址也指向Person的地址。这个时候，你通过p2来改变Person对象的状态，也会改变p的结果。因为它们指向同一个对象。（String除外，之后会专门讲String）</p>\n<p>此时，内存中是这样的：</p>\n<p><img src=\"http://img.blog.csdn.net/20161127181947666\" alt=\"这里写图片描述\"></p>\n<p>用一种很通俗的方式来讲解一下引用和对象。</p>\n<p>大家都应该用过windows吧。win有一个神奇的东西叫做快捷方式。我们桌面的图标大部分都是快捷方式。它并不是我们安装在电脑上的应用的可执行文件（不是.exe文件)，那么为什么点击它可以打开应用程序呢？这个我不用讲了把。</p>\n<p>我们的对象和引用就和快捷方式和它连接的文件一样。</p>\n<p>我们不直接对文件进行操作，而是通过快捷方式来进行操作。快捷方式不能独立存在，同样，引用也不能独立存在（你可以只创建一个引用，但是当你要使用它的时候必须得给它赋值，否则它将毫无用处）。</p>\n<p>一个文件可以有多个快捷方式，同样一个对象也可以有多个引用。而一个引用只能同时对应一个对象。</p>\n<blockquote>\n<p>在java里，“=”不能被看成是一个赋值语句，它不是在把一个对象赋给另外一个对象，它的执行过程实质上是将右边对象的地址传给了左边的引用，使得左边的引用指向了右边的对象。java表面上看起来没有指针，但它的引用其实质就是一个指针。在java里，“=”语句不应该被翻译成赋值语句，因为它所执行的确实不是一个简单的赋值过程，而是一个传地址的过程，被译成赋值语句会造成很多误解，译得不准确。</p>\n</blockquote>\n<h2 id=\"特例：基本数据类型\"><a href=\"#特例：基本数据类型\" class=\"headerlink\" title=\"特例：基本数据类型\"></a><strong>特例：基本数据类型</strong></h2><p>为什么会有特例呢？因为用new操作符创建的对象会存在堆里，二在堆里开辟空间等行为效率较操作栈要低。而我们平时写代码的时候会经常创建一些“小变量”，比如int i = 1；如果每次都用Interger来new一个，效率不是很高而且浪费内存。</p>\n<p>所以针对这些情况，java提供了“基本数据类型”，基本数据类型一共有八种，每一个基本数据类型存放在栈中，而他们的值存放在常量区中。</p>\n<p>举个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">int i = 2;</div><div class=\"line\">int j = 2;</div></pre></td></tr></table></figure>\n<p>我们需要知道的是，在常量区中，相同的常量只会存在一个。当执行第一句代码时。先查找常量区中有没有2，没有，则开辟一个空间存放2，然后在栈中存入一个变量i，让i指向2；</p>\n<p>执行第二句的时候，查找发现2已经存在了，所以就不开辟新空间了。直接在栈中保存一个新变量j，让j指向2；</p>\n<p>当然，java堆每一个基本数据类型都提供了对应的包装类。我们依旧可以用new操作符来创建我们想要的变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Integer i = new Integer(1);</div><div class=\"line\">Integer j = new Integer(1);</div></pre></td></tr></table></figure>\n<p>但是，用new操作符创建的对象是不同的，也就是说，此时，i和j指向不同的内存地址。因为每次调用new操作符，都会在堆开辟新的空间。</p>\n<p>当然，说到基本数据类型，不得不提一下java的经典设计。</p>\n<p>先看一段代码：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127213126561\" alt=\"这里写图片描述\"> </p>\n</blockquote>\n<p>为什么一个是true一个是false呢？</p>\n<p>我就不讲了，应该都知道吧。我就贴一个Integer的源码（jdk1.8）吧。</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127213328205\" alt=\"这里写图片描述\"></p>\n<p>Integer 类的内部定义了一个内部类，缓存了从-128到127的所有数字，所以，你懂得。</p>\n</blockquote>\n<h2 id=\"又一个特例-：String\"><a href=\"#又一个特例-：String\" class=\"headerlink\" title=\"又一个特例 ：String\"></a><strong>又一个特例 ：String</strong></h2><p>String是一个特殊的类，因为它被final修饰符所修饰，是一个不可改变的类。当然，看过java源码后你会发现，基本类型的各个包装类也被final所修饰。这里以String为例。</p>\n<p>我们来看这样一个例子</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127190238240\" alt=\"这里写图片描述\"></p>\n<p>执行第一句 ： 常量区开辟空间存放“abc”，s1存放在栈中指向“abc”</p>\n<p>执行第二句，s2 也指向 “abc”，</p>\n<p>执行第三句，因为“abc”已经存在，所以直接指向它。</p>\n<p>所以三个变量指向同一块内存地址，结果都为true。</p>\n<p>当s1内容改变的时候。这个时候，常量区开辟新的空间存放“bcd”，s1指向“bcd”，而s2和s3指向“abc”所以只有s2和s3相等。</p>\n</blockquote>\n<p>这种情况下，s1,s2,s3都是字符串常量，类似于基本数据类型。（如果执行的是s1 = “abc”,那么结果会都是true）</p>\n<p>我们再看一个例子：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127191904759\" alt=\"这里写图片描述\"></p>\n<p>执行第一行代码： 在堆里分配空间存放String对象，在常量区开辟空间存放常量“abc”，String对象指向常量，s1指向该对象。</p>\n<p>执行第二行代码：s2指向“abc”</p>\n<p>执行第三行代码： 在堆里分配新的空间存放String对象，新对象指向常量“abc”，s3指向该对象。</p>\n<p>到这里，很明显，s1和s2指向的是同一个对象（虽然两个String对象都指向同一个常量，但两个对象是不同的）</p>\n<p>接着就很诡异了，我们让s1 依旧= “abc”,但是结果s1和s2指向的地址不同了。</p>\n</blockquote>\n<p>怎么回事呢？这就是String类的特殊之处了，new出来的String不再是上面的字符串常量，而是字符串对象。</p>\n<p>由于String类是不可改变的，所以String对象也是不可改变的，我们每次给String赋值都相当于执行了一次new String()，然后让变量指向这个新对象，而不是在原来的对象上修改。</p>\n<p>当然，java还提供了StringBuffer类，这个是可以在原对象上做修改的。如果你需要修改原对象，那么请使用StringBuffer类。</p>\n<h2 id=\"值传递和引用传递的战争\"><a href=\"#值传递和引用传递的战争\" class=\"headerlink\" title=\"值传递和引用传递的战争\"></a><strong>值传递和引用传递的战争</strong></h2><p>java是值传递还是引用传递的呢？毫无疑问，java是值传递的。那么什么又叫值传递和引用传递呢？</p>\n<p>我们先来看一个例子：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127194158008\" alt=\"这里写图片描述\"> </p>\n</blockquote>\n<p>这是一个很经典的例子，我们希望调用了swap函数以后，a和b的值可以互换，但是事实上并没有。为什么会这样呢？</p>\n<p>这就是因为java是值传递的。也就是说，我们在调用一个需要传递参数的函数时，传递给函数的参数并不是我们传进去的参数本身，而是它的副本。说起来比较拗口，但是其实原理很简单。我们可以这样理解：</p>\n<p>一个有形参的函数，当别的函数调用它的时候，必须要传递数据。<br>比如swap函数，别的函数要调用swap就必须传两个整数过来。</p>\n<p>这个时候，有一个函数按耐不住寂寞，扔了两个整数过来，但是，swap函数有洁癖，它不喜欢用别人的东西，于是它把传过来的参数复制了一份，然后对复制的数据修修改改，而别人传过来的参数动根本没动。</p>\n<p>所以，当swap函数执行完毕之后，交换了的数据只是swap自己复制的那一份，而原来的数据没变。</p>\n<blockquote>\n<p>也可以理解为别的函数把数据传递给了swap函数的形参，最后改变的只是形参而实参没变，所以不会起到任何效果。</p>\n</blockquote>\n<p>我们再来看一个复杂一点的例子(Person类添加了get，set方法)：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127201149518\" alt=\"这里写图片描述\"></p>\n<p>可以看到，我们把p1传进去，它并没有被替换成新的对象。因为change函数操作的不是p1这个引用本身，而是这个引用的一个副本。</p>\n<p>你依然可以理解为，主函数将p1复制了一份然后变成了chagne函数的形参，最终指向新Person对象的是那个副本引用，而实参p1并没有改变。</p>\n</blockquote>\n<p>再来看一个例子：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127201335005\" alt=\"这里写图片描述\"> </p>\n<p>这次为什么就改变了呢？分析一下。</p>\n<p>首先，new了一个Person对象，暂且叫他小明吧。然后p1指向小明。</p>\n<p>小明10岁了，随着时间的推移，小明的年龄要变了，调用了一下changgeAge方法，把小明的引用传了进去。</p>\n<p>传递的过程中，changgeAge也有洁癖，于是复制了一份小明的引用，这个副本也指向小明。</p>\n<p>然后changgeAge通过自己的副本引用，改变了小明的年龄。</p>\n<p>由于是小明这个对象被改变了，所以所有小明的引用调用方法得到的年龄都会改变</p>\n<p>所以就变了。</p>\n</blockquote>\n<p>最后简单的总结一下。</p>\n<p>java的传值过程，其实传的是副本，不管是变量还是引用。所以，不要期待把变量传递给一个函数来改变变量本身。</p>\n","excerpt":"","more":"<blockquote>\n<p>如果你现实中没有对象，至少你在java世界里会有茫茫多的对象，听起来是不是很激动呢？</p>\n</blockquote>\n<h2 id=\"对象，引用，类与现实世界\"><a href=\"#对象，引用，类与现实世界\" class=\"headerlink\" title=\"对象，引用，类与现实世界\"></a><strong>对象，引用，类与现实世界</strong></h2><p>现实世界里有许许多多的生物，非生物，跑的跳的飞的，过去的现在的未来的，令人眼花缭乱。我们编程的目的，就是解决现实生活中的问题。所以不可避免的我们要和现实世界中各种奇怪的东西打交道。</p>\n<p>在现实世界里，你新认识了一个朋友，你知道他长什么样，知道了他的名字年龄，地址。知道他喜欢干什么有什么特长。你想用java语言描述一下这个人，你应该怎么做呢？</p>\n<p>这个时候，就有了类的概念。每一个类对应现实世界中的某一事物。比如现实世界中有人。那么我们就创建一个关于“人”的类。</p>\n<p>每一个人都有名字，都有地址等等个人信息。那么我们就在“人”的类里面添加这些属性。</p>\n<p>每一个人都会吃，会走路，那么我们就在“人”的类里面添加吃和走的方法。</p>\n<p>当这个世界又迎来了一个新生命，我们就可以“new”一个“人”，“new”出来的就叫”对象“。</p>\n<p>每一个人一出生，父母就会给他取个名字。在程序里，我们需要用一种方式来操作这个“对象”，于是，就出现了引用。我们通过引用来操作对象，设置对象的属性，操作对象的方法。</p>\n<p>这就是最基本的面向对象。</p>\n<blockquote>\n<p>【 <strong>现实世界的事物</strong>】 —抽象—&gt; 【<strong>类</strong> 】—new—&gt;【<strong>对象</strong> 】&lt;—控制— 【<strong>引用</strong>】</p>\n</blockquote>\n<h2 id=\"从创建一个对象开始\"><a href=\"#从创建一个对象开始\" class=\"headerlink\" title=\"从创建一个对象开始\"></a><strong>从创建一个对象开始</strong></h2><p>创建对象的前提是先得有一个类。我们先自己创建一个person类。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//Person类</div><div class=\"line\">public class Person &#123;</div><div class=\"line\">    private String name;</div><div class=\"line\">    private int age;</div><div class=\"line\"></div><div class=\"line\">    public void eat()&#123;</div><div class=\"line\">        System.out.println(&quot;i am eating&quot;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>创建一个person对象。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person p = <span class=\"keyword\">new</span> Person();</div></pre></td></tr></table></figure></p>\n<p>怎么理解这句简单的代码呢？</p>\n<ul>\n<li><strong>new Person</strong> :一个Person类型的对象</li>\n<li><strong>()</strong> : 这个括号相当于调用了person的无参构造方法</li>\n<li><strong>p</strong> ： Person对象的引用</li>\n</ul>\n<p>有的人会认为p就是new出来的Person对象。这是错误的理解，p只是一个Person对象的引用而已。那么问题来了，什么是引用？什么又是对象呢？这个要从内存说起。</p>\n<h2 id=\"创建对象的过程\"><a href=\"#创建对象的过程\" class=\"headerlink\" title=\"创建对象的过程\"></a><strong>创建对象的过程</strong></h2><p>java大体上会把内存分为四块区域：堆，栈，静态区，常量区。</p>\n<ul>\n<li>堆 ： 位于RAM中，用于存放所有的java对象。</li>\n<li>栈 ： 位于RAM中，引用就存在于栈中。</li>\n<li>静态区 : 位于RAM中，被static修饰符修饰的变量会被放在这里</li>\n<li>常量区 ：位于ROM中， 很明显，放常量的。</li>\n</ul>\n<blockquote>\n<p>事实上，我们不需要关心java的对象，变量到底存在了哪里，因为jvm会帮我们处理好这些。但是理解了这些，有助于提高我们的水平。</p>\n</blockquote>\n<p>当执行这句代码的时候。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person p = <span class=\"keyword\">new</span> Person();</div></pre></td></tr></table></figure></p>\n<p>首先，会在堆中开辟一块空间存放这个新来的Person对象。然后，会创建一个引用p，存放在栈中，这个引用p指向Person对象（事实上是，p的值就是Person对象的内存地址）。</p>\n<p>这样，我们通过访问p，然后得到了Person的内存地址，进而找到了Person对象。</p>\n<p>然后又有了这样一句代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Person p2 = p;</div></pre></td></tr></table></figure>\n<p>这句代码的含义是：<br>    创建了一个新的引用，保存在栈中，引用的地址也指向Person的地址。这个时候，你通过p2来改变Person对象的状态，也会改变p的结果。因为它们指向同一个对象。（String除外，之后会专门讲String）</p>\n<p>此时，内存中是这样的：</p>\n<p><img src=\"http://img.blog.csdn.net/20161127181947666\" alt=\"这里写图片描述\"></p>\n<p>用一种很通俗的方式来讲解一下引用和对象。</p>\n<p>大家都应该用过windows吧。win有一个神奇的东西叫做快捷方式。我们桌面的图标大部分都是快捷方式。它并不是我们安装在电脑上的应用的可执行文件（不是.exe文件)，那么为什么点击它可以打开应用程序呢？这个我不用讲了把。</p>\n<p>我们的对象和引用就和快捷方式和它连接的文件一样。</p>\n<p>我们不直接对文件进行操作，而是通过快捷方式来进行操作。快捷方式不能独立存在，同样，引用也不能独立存在（你可以只创建一个引用，但是当你要使用它的时候必须得给它赋值，否则它将毫无用处）。</p>\n<p>一个文件可以有多个快捷方式，同样一个对象也可以有多个引用。而一个引用只能同时对应一个对象。</p>\n<blockquote>\n<p>在java里，“=”不能被看成是一个赋值语句，它不是在把一个对象赋给另外一个对象，它的执行过程实质上是将右边对象的地址传给了左边的引用，使得左边的引用指向了右边的对象。java表面上看起来没有指针，但它的引用其实质就是一个指针。在java里，“=”语句不应该被翻译成赋值语句，因为它所执行的确实不是一个简单的赋值过程，而是一个传地址的过程，被译成赋值语句会造成很多误解，译得不准确。</p>\n</blockquote>\n<h2 id=\"特例：基本数据类型\"><a href=\"#特例：基本数据类型\" class=\"headerlink\" title=\"特例：基本数据类型\"></a><strong>特例：基本数据类型</strong></h2><p>为什么会有特例呢？因为用new操作符创建的对象会存在堆里，二在堆里开辟空间等行为效率较操作栈要低。而我们平时写代码的时候会经常创建一些“小变量”，比如int i = 1；如果每次都用Interger来new一个，效率不是很高而且浪费内存。</p>\n<p>所以针对这些情况，java提供了“基本数据类型”，基本数据类型一共有八种，每一个基本数据类型存放在栈中，而他们的值存放在常量区中。</p>\n<p>举个例子：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">int i = 2;</div><div class=\"line\">int j = 2;</div></pre></td></tr></table></figure>\n<p>我们需要知道的是，在常量区中，相同的常量只会存在一个。当执行第一句代码时。先查找常量区中有没有2，没有，则开辟一个空间存放2，然后在栈中存入一个变量i，让i指向2；</p>\n<p>执行第二句的时候，查找发现2已经存在了，所以就不开辟新空间了。直接在栈中保存一个新变量j，让j指向2；</p>\n<p>当然，java堆每一个基本数据类型都提供了对应的包装类。我们依旧可以用new操作符来创建我们想要的变量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Integer i = new Integer(1);</div><div class=\"line\">Integer j = new Integer(1);</div></pre></td></tr></table></figure>\n<p>但是，用new操作符创建的对象是不同的，也就是说，此时，i和j指向不同的内存地址。因为每次调用new操作符，都会在堆开辟新的空间。</p>\n<p>当然，说到基本数据类型，不得不提一下java的经典设计。</p>\n<p>先看一段代码：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127213126561\" alt=\"这里写图片描述\"> </p>\n</blockquote>\n<p>为什么一个是true一个是false呢？</p>\n<p>我就不讲了，应该都知道吧。我就贴一个Integer的源码（jdk1.8）吧。</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127213328205\" alt=\"这里写图片描述\"></p>\n<p>Integer 类的内部定义了一个内部类，缓存了从-128到127的所有数字，所以，你懂得。</p>\n</blockquote>\n<h2 id=\"又一个特例-：String\"><a href=\"#又一个特例-：String\" class=\"headerlink\" title=\"又一个特例 ：String\"></a><strong>又一个特例 ：String</strong></h2><p>String是一个特殊的类，因为它被final修饰符所修饰，是一个不可改变的类。当然，看过java源码后你会发现，基本类型的各个包装类也被final所修饰。这里以String为例。</p>\n<p>我们来看这样一个例子</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127190238240\" alt=\"这里写图片描述\"></p>\n<p>执行第一句 ： 常量区开辟空间存放“abc”，s1存放在栈中指向“abc”</p>\n<p>执行第二句，s2 也指向 “abc”，</p>\n<p>执行第三句，因为“abc”已经存在，所以直接指向它。</p>\n<p>所以三个变量指向同一块内存地址，结果都为true。</p>\n<p>当s1内容改变的时候。这个时候，常量区开辟新的空间存放“bcd”，s1指向“bcd”，而s2和s3指向“abc”所以只有s2和s3相等。</p>\n</blockquote>\n<p>这种情况下，s1,s2,s3都是字符串常量，类似于基本数据类型。（如果执行的是s1 = “abc”,那么结果会都是true）</p>\n<p>我们再看一个例子：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127191904759\" alt=\"这里写图片描述\"></p>\n<p>执行第一行代码： 在堆里分配空间存放String对象，在常量区开辟空间存放常量“abc”，String对象指向常量，s1指向该对象。</p>\n<p>执行第二行代码：s2指向“abc”</p>\n<p>执行第三行代码： 在堆里分配新的空间存放String对象，新对象指向常量“abc”，s3指向该对象。</p>\n<p>到这里，很明显，s1和s2指向的是同一个对象（虽然两个String对象都指向同一个常量，但两个对象是不同的）</p>\n<p>接着就很诡异了，我们让s1 依旧= “abc”,但是结果s1和s2指向的地址不同了。</p>\n</blockquote>\n<p>怎么回事呢？这就是String类的特殊之处了，new出来的String不再是上面的字符串常量，而是字符串对象。</p>\n<p>由于String类是不可改变的，所以String对象也是不可改变的，我们每次给String赋值都相当于执行了一次new String()，然后让变量指向这个新对象，而不是在原来的对象上修改。</p>\n<p>当然，java还提供了StringBuffer类，这个是可以在原对象上做修改的。如果你需要修改原对象，那么请使用StringBuffer类。</p>\n<h2 id=\"值传递和引用传递的战争\"><a href=\"#值传递和引用传递的战争\" class=\"headerlink\" title=\"值传递和引用传递的战争\"></a><strong>值传递和引用传递的战争</strong></h2><p>java是值传递还是引用传递的呢？毫无疑问，java是值传递的。那么什么又叫值传递和引用传递呢？</p>\n<p>我们先来看一个例子：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127194158008\" alt=\"这里写图片描述\"> </p>\n</blockquote>\n<p>这是一个很经典的例子，我们希望调用了swap函数以后，a和b的值可以互换，但是事实上并没有。为什么会这样呢？</p>\n<p>这就是因为java是值传递的。也就是说，我们在调用一个需要传递参数的函数时，传递给函数的参数并不是我们传进去的参数本身，而是它的副本。说起来比较拗口，但是其实原理很简单。我们可以这样理解：</p>\n<p>一个有形参的函数，当别的函数调用它的时候，必须要传递数据。<br>比如swap函数，别的函数要调用swap就必须传两个整数过来。</p>\n<p>这个时候，有一个函数按耐不住寂寞，扔了两个整数过来，但是，swap函数有洁癖，它不喜欢用别人的东西，于是它把传过来的参数复制了一份，然后对复制的数据修修改改，而别人传过来的参数动根本没动。</p>\n<p>所以，当swap函数执行完毕之后，交换了的数据只是swap自己复制的那一份，而原来的数据没变。</p>\n<blockquote>\n<p>也可以理解为别的函数把数据传递给了swap函数的形参，最后改变的只是形参而实参没变，所以不会起到任何效果。</p>\n</blockquote>\n<p>我们再来看一个复杂一点的例子(Person类添加了get，set方法)：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127201149518\" alt=\"这里写图片描述\"></p>\n<p>可以看到，我们把p1传进去，它并没有被替换成新的对象。因为change函数操作的不是p1这个引用本身，而是这个引用的一个副本。</p>\n<p>你依然可以理解为，主函数将p1复制了一份然后变成了chagne函数的形参，最终指向新Person对象的是那个副本引用，而实参p1并没有改变。</p>\n</blockquote>\n<p>再来看一个例子：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161127201335005\" alt=\"这里写图片描述\"> </p>\n<p>这次为什么就改变了呢？分析一下。</p>\n<p>首先，new了一个Person对象，暂且叫他小明吧。然后p1指向小明。</p>\n<p>小明10岁了，随着时间的推移，小明的年龄要变了，调用了一下changgeAge方法，把小明的引用传了进去。</p>\n<p>传递的过程中，changgeAge也有洁癖，于是复制了一份小明的引用，这个副本也指向小明。</p>\n<p>然后changgeAge通过自己的副本引用，改变了小明的年龄。</p>\n<p>由于是小明这个对象被改变了，所以所有小明的引用调用方法得到的年龄都会改变</p>\n<p>所以就变了。</p>\n</blockquote>\n<p>最后简单的总结一下。</p>\n<p>java的传值过程，其实传的是副本，不管是变量还是引用。所以，不要期待把变量传递给一个函数来改变变量本身。</p>\n"},{"title":"开始","type":"linux","order":1,"_content":"\n在这里，我将会分享一些和linux有关的知识。包括各种环境的搭建以及一些小技巧。\n\n所有操作在腾讯云vps主机上操作\n\n系统为centOS 7 64位。","source":"study/linux/index.md","raw":"---\ntitle: 开始\ntype: linux\norder: 1\n---\n\n在这里，我将会分享一些和linux有关的知识。包括各种环境的搭建以及一些小技巧。\n\n所有操作在腾讯云vps主机上操作\n\n系统为centOS 7 64位。","date":"2016-12-13T09:04:22.000Z","updated":"2016-12-13T09:04:22.000Z","path":"study/linux/index.html","comments":1,"layout":"page","_id":"ciwoiwpez000a1a2dc8fqszw1","content":"<p>在这里，我将会分享一些和linux有关的知识。包括各种环境的搭建以及一些小技巧。</p>\n<p>所有操作在腾讯云vps主机上操作</p>\n<p>系统为centOS 7 64位。</p>\n","excerpt":"","more":"<p>在这里，我将会分享一些和linux有关的知识。包括各种环境的搭建以及一些小技巧。</p>\n<p>所有操作在腾讯云vps主机上操作</p>\n<p>系统为centOS 7 64位。</p>\n"},{"title":"nodejs环境的搭建","type":"linux","order":2,"_content":"\n## **nodejs环境的搭建**\n\n> nodejs的安装方法有很多种，可以通过编译源码或者类似于apt-get等方式。但是由于我们日后可能需要在nodejs的不同版本之间切换，所以这里给大家提供的是用nvm来安装。\n\n### **nvm是什么**\n\nnvm (Node Version Manager) 是 Nodejs 版本管理器，它让我们能方便的对 Nodejs 的版本进行切换。\n\n> 举个例子，假设，我们已经安装 nvm 了。如果，我们此时需要用 5.0 版本的 Nodejs ，但是我们本机没有装该版本，那么，我们先执行\n> nvm install 5.0 来安装该版本，然后执行 nvm use 5.0， 此时用的 Nodejs 的版本即为 5.0的。以后我们切换到 5.0 版本只需执行 nvm use 5.0 即可。当然，我们可以用 nvm install 来装更多的版本。\n\n\n### **安装nvm**\n\n> nvm github地址：https://github.com/creationix/nvm\n\n```js\n$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.6/install.sh | bash\n\n\n$ source ~/.bashrc\n\n\n$ command -v nvm\n\n//如果终端打印出“mvm”，证明安装成功\n```\n\n### **通过nvm安装nodejs**\n\n在终端输入\n\n```js\n$ nvm ls-remote\n```\n\n> 这个命令可以查看当前发布的所有nodejs的版本，从0.1.14到6.4.0\n\n我们选择安装当前使用人数最多的4.5.0版本（见官网）\n\n```js\n$ nvm install 4.5.0\n```\n\n指定 nvm 使用的 Node.js 版本\n\n``` js\n$ nvm use 4.5.0\n```\n\n预设使用 4.5.0 版本，否則每次重新連線登入，還需要重新 nvm use 一次\n\n```js\n$ nvm alias default 4.5.0\n```\n\n这样，nodejs就安装好了，可以通过node -v查看当前使用的版本。同时，npm也安装好了，版本为2.15.9","source":"study/linux/one.md","raw":"---\ntitle: nodejs环境的搭建\ntype: linux\norder: 2\n---\n\n## **nodejs环境的搭建**\n\n> nodejs的安装方法有很多种，可以通过编译源码或者类似于apt-get等方式。但是由于我们日后可能需要在nodejs的不同版本之间切换，所以这里给大家提供的是用nvm来安装。\n\n### **nvm是什么**\n\nnvm (Node Version Manager) 是 Nodejs 版本管理器，它让我们能方便的对 Nodejs 的版本进行切换。\n\n> 举个例子，假设，我们已经安装 nvm 了。如果，我们此时需要用 5.0 版本的 Nodejs ，但是我们本机没有装该版本，那么，我们先执行\n> nvm install 5.0 来安装该版本，然后执行 nvm use 5.0， 此时用的 Nodejs 的版本即为 5.0的。以后我们切换到 5.0 版本只需执行 nvm use 5.0 即可。当然，我们可以用 nvm install 来装更多的版本。\n\n\n### **安装nvm**\n\n> nvm github地址：https://github.com/creationix/nvm\n\n```js\n$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.6/install.sh | bash\n\n\n$ source ~/.bashrc\n\n\n$ command -v nvm\n\n//如果终端打印出“mvm”，证明安装成功\n```\n\n### **通过nvm安装nodejs**\n\n在终端输入\n\n```js\n$ nvm ls-remote\n```\n\n> 这个命令可以查看当前发布的所有nodejs的版本，从0.1.14到6.4.0\n\n我们选择安装当前使用人数最多的4.5.0版本（见官网）\n\n```js\n$ nvm install 4.5.0\n```\n\n指定 nvm 使用的 Node.js 版本\n\n``` js\n$ nvm use 4.5.0\n```\n\n预设使用 4.5.0 版本，否則每次重新連線登入，還需要重新 nvm use 一次\n\n```js\n$ nvm alias default 4.5.0\n```\n\n这样，nodejs就安装好了，可以通过node -v查看当前使用的版本。同时，npm也安装好了，版本为2.15.9","date":"2016-12-12T14:00:24.000Z","updated":"2016-12-12T12:38:42.000Z","path":"study/linux/one.html","comments":1,"layout":"page","_id":"ciwoiwpf0000b1a2du1yawxor","content":"<h2 id=\"nodejs环境的搭建\"><a href=\"#nodejs环境的搭建\" class=\"headerlink\" title=\"nodejs环境的搭建\"></a><strong>nodejs环境的搭建</strong></h2><blockquote>\n<p>nodejs的安装方法有很多种，可以通过编译源码或者类似于apt-get等方式。但是由于我们日后可能需要在nodejs的不同版本之间切换，所以这里给大家提供的是用nvm来安装。</p>\n</blockquote>\n<h3 id=\"nvm是什么\"><a href=\"#nvm是什么\" class=\"headerlink\" title=\"nvm是什么\"></a><strong>nvm是什么</strong></h3><p>nvm (Node Version Manager) 是 Nodejs 版本管理器，它让我们能方便的对 Nodejs 的版本进行切换。</p>\n<blockquote>\n<p>举个例子，假设，我们已经安装 nvm 了。如果，我们此时需要用 5.0 版本的 Nodejs ，但是我们本机没有装该版本，那么，我们先执行<br>nvm install 5.0 来安装该版本，然后执行 nvm use 5.0， 此时用的 Nodejs 的版本即为 5.0的。以后我们切换到 5.0 版本只需执行 nvm use 5.0 即可。当然，我们可以用 nvm install 来装更多的版本。</p>\n</blockquote>\n<h3 id=\"安装nvm\"><a href=\"#安装nvm\" class=\"headerlink\" title=\"安装nvm\"></a><strong>安装nvm</strong></h3><blockquote>\n<p>nvm github地址：<a href=\"https://github.com/creationix/nvm\" target=\"_blank\" rel=\"external\">https://github.com/creationix/nvm</a></p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.6/install.sh | bash</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$ source ~/.bashrc</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$ command -v nvm</div><div class=\"line\"></div><div class=\"line\">//如果终端打印出“mvm”，证明安装成功</div></pre></td></tr></table></figure>\n<h3 id=\"通过nvm安装nodejs\"><a href=\"#通过nvm安装nodejs\" class=\"headerlink\" title=\"通过nvm安装nodejs\"></a><strong>通过nvm安装nodejs</strong></h3><p>在终端输入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nvm ls-remote</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这个命令可以查看当前发布的所有nodejs的版本，从0.1.14到6.4.0</p>\n</blockquote>\n<p>我们选择安装当前使用人数最多的4.5.0版本（见官网）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nvm install <span class=\"number\">4.5</span><span class=\"number\">.0</span></div></pre></td></tr></table></figure>\n<p>指定 nvm 使用的 Node.js 版本</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nvm use <span class=\"number\">4.5</span><span class=\"number\">.0</span></div></pre></td></tr></table></figure>\n<p>预设使用 4.5.0 版本，否則每次重新連線登入，還需要重新 nvm use 一次</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nvm alias <span class=\"keyword\">default</span> <span class=\"number\">4.5</span><span class=\"number\">.0</span></div></pre></td></tr></table></figure>\n<p>这样，nodejs就安装好了，可以通过node -v查看当前使用的版本。同时，npm也安装好了，版本为2.15.9</p>\n","excerpt":"","more":"<h2 id=\"nodejs环境的搭建\"><a href=\"#nodejs环境的搭建\" class=\"headerlink\" title=\"nodejs环境的搭建\"></a><strong>nodejs环境的搭建</strong></h2><blockquote>\n<p>nodejs的安装方法有很多种，可以通过编译源码或者类似于apt-get等方式。但是由于我们日后可能需要在nodejs的不同版本之间切换，所以这里给大家提供的是用nvm来安装。</p>\n</blockquote>\n<h3 id=\"nvm是什么\"><a href=\"#nvm是什么\" class=\"headerlink\" title=\"nvm是什么\"></a><strong>nvm是什么</strong></h3><p>nvm (Node Version Manager) 是 Nodejs 版本管理器，它让我们能方便的对 Nodejs 的版本进行切换。</p>\n<blockquote>\n<p>举个例子，假设，我们已经安装 nvm 了。如果，我们此时需要用 5.0 版本的 Nodejs ，但是我们本机没有装该版本，那么，我们先执行<br>nvm install 5.0 来安装该版本，然后执行 nvm use 5.0， 此时用的 Nodejs 的版本即为 5.0的。以后我们切换到 5.0 版本只需执行 nvm use 5.0 即可。当然，我们可以用 nvm install 来装更多的版本。</p>\n</blockquote>\n<h3 id=\"安装nvm\"><a href=\"#安装nvm\" class=\"headerlink\" title=\"安装nvm\"></a><strong>安装nvm</strong></h3><blockquote>\n<p>nvm github地址：<a href=\"https://github.com/creationix/nvm\">https://github.com/creationix/nvm</a></p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ wget -qO- https://raw.githubusercontent.com/creationix/nvm/v0.31.6/install.sh | bash</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$ source ~/.bashrc</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">$ command -v nvm</div><div class=\"line\"></div><div class=\"line\">//如果终端打印出“mvm”，证明安装成功</div></pre></td></tr></table></figure>\n<h3 id=\"通过nvm安装nodejs\"><a href=\"#通过nvm安装nodejs\" class=\"headerlink\" title=\"通过nvm安装nodejs\"></a><strong>通过nvm安装nodejs</strong></h3><p>在终端输入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nvm ls-remote</div></pre></td></tr></table></figure>\n<blockquote>\n<p>这个命令可以查看当前发布的所有nodejs的版本，从0.1.14到6.4.0</p>\n</blockquote>\n<p>我们选择安装当前使用人数最多的4.5.0版本（见官网）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nvm install <span class=\"number\">4.5</span><span class=\"number\">.0</span></div></pre></td></tr></table></figure>\n<p>指定 nvm 使用的 Node.js 版本</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nvm use <span class=\"number\">4.5</span><span class=\"number\">.0</span></div></pre></td></tr></table></figure>\n<p>预设使用 4.5.0 版本，否則每次重新連線登入，還需要重新 nvm use 一次</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nvm alias <span class=\"keyword\">default</span> <span class=\"number\">4.5</span><span class=\"number\">.0</span></div></pre></td></tr></table></figure>\n<p>这样，nodejs就安装好了，可以通过node -v查看当前使用的版本。同时，npm也安装好了，版本为2.15.9</p>\n"},{"title":"linux安装tomcat","type":"linux","order":4,"_content":"\n## linux安装tomcat\n\n> 请先看上一篇，linux安装jdk。因为tomcat需要jdk的支持。\n\n\n### 如何安装\n\n新建一个文件夹用来存放tomcat\n```js\n//新建文件夹\nmkdir /usr/tomcat\n//切换到该文件夹下\ncd /usr/tomcat\n```\n\n//使用wget，下载tomcat包\n```\nwget -c http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.9/bin/apache-tomcat-8.5.9.tar.gz\n```\n\n下载文笔后，可以使用`ls` 命令查看：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161213164808670?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n解压下载的文件\n```js\ntar -zxvf apache-tomcat-8.5.9.tar.gz  \n```\n> ![这里写图片描述](http://img.blog.csdn.net/20161213164853342?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast) \n\n解压成功后，你的tomcat就安装好了。\n\n启动tomcat\n```js\n//切换到bin目录下\ncd apache-tomcat-8.5.9/bin \n//运行启动脚本\n./startup.sh \n```\n> ![这里写图片描述](http://img.blog.csdn.net/20161213165038793?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n启动成功。\n\n### 如果你有防火墙\n\n那么请这样做：\n\n编辑防火墙配置文件\n\n```js\nvi /etc/sysconfig/iptables\n```\n按“i”进入输入模式，添加以下内容\n\n```js\n-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT\n\n```\n\n按esc,输入“:wq”保存并退出。\n\n重新启动防火墙\n\n```js\nservice iptables restart\n```\n\n\n### 测试\n\n在浏览器里输入 ip:8080\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161213165339891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n关闭服务器\n```js\n./shutdown.sh\n```\n\ntomcat大概就是这样了，其他的操作你用过tomcat自然就懂了。\n\n### 其他\n\n默认下载的包是tomcat8的，如果你需要下载其他版本，请将wget命令后的地址换成你需要的版本的下载地址。下载地址的获取方式：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161213165522876?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)","source":"study/linux/three.md","raw":"---\ntitle: linux安装tomcat\ntype: linux\norder: 4\n---\n\n## linux安装tomcat\n\n> 请先看上一篇，linux安装jdk。因为tomcat需要jdk的支持。\n\n\n### 如何安装\n\n新建一个文件夹用来存放tomcat\n```js\n//新建文件夹\nmkdir /usr/tomcat\n//切换到该文件夹下\ncd /usr/tomcat\n```\n\n//使用wget，下载tomcat包\n```\nwget -c http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.9/bin/apache-tomcat-8.5.9.tar.gz\n```\n\n下载文笔后，可以使用`ls` 命令查看：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161213164808670?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n解压下载的文件\n```js\ntar -zxvf apache-tomcat-8.5.9.tar.gz  \n```\n> ![这里写图片描述](http://img.blog.csdn.net/20161213164853342?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast) \n\n解压成功后，你的tomcat就安装好了。\n\n启动tomcat\n```js\n//切换到bin目录下\ncd apache-tomcat-8.5.9/bin \n//运行启动脚本\n./startup.sh \n```\n> ![这里写图片描述](http://img.blog.csdn.net/20161213165038793?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n启动成功。\n\n### 如果你有防火墙\n\n那么请这样做：\n\n编辑防火墙配置文件\n\n```js\nvi /etc/sysconfig/iptables\n```\n按“i”进入输入模式，添加以下内容\n\n```js\n-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT\n\n```\n\n按esc,输入“:wq”保存并退出。\n\n重新启动防火墙\n\n```js\nservice iptables restart\n```\n\n\n### 测试\n\n在浏览器里输入 ip:8080\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161213165339891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n关闭服务器\n```js\n./shutdown.sh\n```\n\ntomcat大概就是这样了，其他的操作你用过tomcat自然就懂了。\n\n### 其他\n\n默认下载的包是tomcat8的，如果你需要下载其他版本，请将wget命令后的地址换成你需要的版本的下载地址。下载地址的获取方式：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161213165522876?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)","date":"2016-12-13T08:58:24.000Z","updated":"2016-12-13T08:58:24.000Z","path":"study/linux/three.html","comments":1,"layout":"page","_id":"ciwoiwpf1000c1a2d41y1773r","content":"<h2 id=\"linux安装tomcat\"><a href=\"#linux安装tomcat\" class=\"headerlink\" title=\"linux安装tomcat\"></a>linux安装tomcat</h2><blockquote>\n<p>请先看上一篇，linux安装jdk。因为tomcat需要jdk的支持。</p>\n</blockquote>\n<h3 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h3><p>新建一个文件夹用来存放tomcat<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//新建文件夹</span></div><div class=\"line\">mkdir /usr/tomcat</div><div class=\"line\"><span class=\"comment\">//切换到该文件夹下</span></div><div class=\"line\">cd /usr/tomcat</div></pre></td></tr></table></figure></p>\n<p>//使用wget，下载tomcat包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -c http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.9/bin/apache-tomcat-8.5.9.tar.gz</div></pre></td></tr></table></figure></p>\n<p>下载文笔后，可以使用<code>ls</code> 命令查看：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213164808670?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<p>解压下载的文件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf apache-tomcat<span class=\"number\">-8.5</span><span class=\"number\">.9</span>.tar.gz</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213164853342?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"> </p>\n</blockquote>\n<p>解压成功后，你的tomcat就安装好了。</p>\n<p>启动tomcat<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//切换到bin目录下</span></div><div class=\"line\">cd apache-tomcat<span class=\"number\">-8.5</span><span class=\"number\">.9</span>/bin </div><div class=\"line\"><span class=\"comment\">//运行启动脚本</span></div><div class=\"line\">./startup.sh</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213165038793?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<p>启动成功。</p>\n<h3 id=\"如果你有防火墙\"><a href=\"#如果你有防火墙\" class=\"headerlink\" title=\"如果你有防火墙\"></a>如果你有防火墙</h3><p>那么请这样做：</p>\n<p>编辑防火墙配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/sysconfig/iptables</div></pre></td></tr></table></figure>\n<p>按“i”进入输入模式，添加以下内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-A RH-Firewall<span class=\"number\">-1</span>-INPUT -m state --state NEW -m tcp -p tcp --dport <span class=\"number\">8080</span> -j ACCEPT</div></pre></td></tr></table></figure>\n<p>按esc,输入“:wq”保存并退出。</p>\n<p>重新启动防火墙</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service iptables restart</div></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>在浏览器里输入 ip:8080</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213165339891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<p>关闭服务器<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./shutdown.sh</div></pre></td></tr></table></figure></p>\n<p>tomcat大概就是这样了，其他的操作你用过tomcat自然就懂了。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>默认下载的包是tomcat8的，如果你需要下载其他版本，请将wget命令后的地址换成你需要的版本的下载地址。下载地址的获取方式：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213165522876?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>\n","excerpt":"","more":"<h2 id=\"linux安装tomcat\"><a href=\"#linux安装tomcat\" class=\"headerlink\" title=\"linux安装tomcat\"></a>linux安装tomcat</h2><blockquote>\n<p>请先看上一篇，linux安装jdk。因为tomcat需要jdk的支持。</p>\n</blockquote>\n<h3 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h3><p>新建一个文件夹用来存放tomcat<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//新建文件夹</span></div><div class=\"line\">mkdir /usr/tomcat</div><div class=\"line\"><span class=\"comment\">//切换到该文件夹下</span></div><div class=\"line\">cd /usr/tomcat</div></pre></td></tr></table></figure></p>\n<p>//使用wget，下载tomcat包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget -c http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.9/bin/apache-tomcat-8.5.9.tar.gz</div></pre></td></tr></table></figure></p>\n<p>下载文笔后，可以使用<code>ls</code> 命令查看：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213164808670?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<p>解压下载的文件<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">tar -zxvf apache-tomcat<span class=\"number\">-8.5</span><span class=\"number\">.9</span>.tar.gz</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213164853342?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"> </p>\n</blockquote>\n<p>解压成功后，你的tomcat就安装好了。</p>\n<p>启动tomcat<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//切换到bin目录下</span></div><div class=\"line\">cd apache-tomcat<span class=\"number\">-8.5</span><span class=\"number\">.9</span>/bin </div><div class=\"line\"><span class=\"comment\">//运行启动脚本</span></div><div class=\"line\">./startup.sh</div></pre></td></tr></table></figure></p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213165038793?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<p>启动成功。</p>\n<h3 id=\"如果你有防火墙\"><a href=\"#如果你有防火墙\" class=\"headerlink\" title=\"如果你有防火墙\"></a>如果你有防火墙</h3><p>那么请这样做：</p>\n<p>编辑防火墙配置文件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">vi /etc/sysconfig/iptables</div></pre></td></tr></table></figure>\n<p>按“i”进入输入模式，添加以下内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">-A RH-Firewall<span class=\"number\">-1</span>-INPUT -m state --state NEW -m tcp -p tcp --dport <span class=\"number\">8080</span> -j ACCEPT</div></pre></td></tr></table></figure>\n<p>按esc,输入“:wq”保存并退出。</p>\n<p>重新启动防火墙</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">service iptables restart</div></pre></td></tr></table></figure>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>在浏览器里输入 ip:8080</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213165339891?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<p>关闭服务器<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">./shutdown.sh</div></pre></td></tr></table></figure></p>\n<p>tomcat大概就是这样了，其他的操作你用过tomcat自然就懂了。</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>默认下载的包是tomcat8的，如果你需要下载其他版本，请将wget命令后的地址换成你需要的版本的下载地址。下载地址的获取方式：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213165522876?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>\n"},{"title":"开始","type":"nodejs","order":1,"_content":"\n我写不知道写点什么好，暂时就这样吧。。。","source":"study/nodejs/index.md","raw":"---\ntitle: 开始\ntype: nodejs\norder: 1\n---\n\n我写不知道写点什么好，暂时就这样吧。。。","date":"2016-12-12T14:00:24.000Z","updated":"2016-12-12T12:46:08.000Z","path":"study/nodejs/index.html","comments":1,"layout":"page","_id":"ciwoiwpf1000d1a2dmc0kz3ir","content":"<p>我写不知道写点什么好，暂时就这样吧。。。</p>\n","excerpt":"","more":"<p>我写不知道写点什么好，暂时就这样吧。。。</p>\n"},{"title":"使用express搭建nodejs项目","type":"nodejs","order":2,"_content":"\n最近对nodejs比较感兴趣，所以打算学习一下。但是在学习过程中遇到了一些麻烦，现在将这个过程与大家分享一下。\n\n## 环境\n\n - 系统 ubutu16.04 （win10下的虚拟机）\n - nodejs版本 4.4.7\n - npm版本 2.15.8\n\n> nodejs  github主页：https://github.com/nodejs/node\n> nodejs  官网：https://nodejs.org\n> nodejs 中文社区：https://cnodejs.org\n> express github主页：https://github.com/expressjs/express\n\n## 第一步，安装nodejs\n\n**windows**请直接到上诉官网中下载安装即可，现在安装nodejs会自动将npm也安装好。\n\n**Ubuntu系统**：\n首先确保系统安装来python,gcc,g++,如果没有则安装： \n（一般Ubuntu都已默认安装）\n\n```js\n$ sudo apt-get install python \n\n$ sudo apt-get install build-essential \n\n$ sudo apt-get install gcc \n\n$ sudo apt-get install g++ \n```\n\n确保都安装了之后，从nodeJS官网下载最新源代码包：node-v4.4.7.tar.gz\n\n解压：\n\n```js\n$ tar -zxf node-v4.4.7.tar.gz \n\n$ cd node-v4.4.7\n```\n\n默认安装： \n\n```js\n$ ./configure \n\n$ make \n\n$ sudo make install \n```\n\n选择目录方式安装： \n\n```js\n$ ./configure –prefix=/usr/node \n\n$ make -j 5 #5=CPU核数+1 \n\n$ sudo make install\n```\n\n> 当然，你也可以通过linux包管理器安装：\n> `apt get install nodejs -g`\n> `apt get install npm -g`\n> 但是个人不建议这么做，因为有时候会莫名其妙的出问题，还是直接编译源码比较实在（编译过程需要一些时间）。\n\n接下来通过查看版本确认已经安装成功：\n\n```js\n$ node -v\n```\n\n```js\n$ npm -v\n```\n\n## 第二步，安装express\n\n**Windows**：打开Node.js command prompt，输入：\n\t\n\n```js\nnpm install express -g\n```\n\n> -g是全局安装，在任何地方打开命令行都可以使用相应命令\n\n**Ubuntu** 打开终端，输入：\n\t\n\n```js\n$ sudo npm install express -g\n```\n\n> 请务必使用管理员权限安装，否则会安装失败\n\n```js\n$ sudo npm install -g express-generator@4  \n```\n\n \n\n>express4.0之后把创建一个APP的功能分离出来为express-generator，所以必须得安装它，否则没法正常使用express\n\n通过输入‘express -v’确认安装成功。（有些情况无法查看版本，但是可以正常使用）\n\n## 使用express建一个demo\n\n  \n 1. 打开一个用来放源码的目录，输入`$ express nodetest -e`  \n\n> 新建一个名为nodetest的项目，使用ejs作为模板。 ejs （Embedded JavaScript） 是一个标签替换引擎，其语法与 ASP、PHP 相似，易于学习，目前被广泛应用。Express 默认提供的引擎是 jade，它颠覆了传统的模板引擎，制定了一套完整的语法用来生成 HTML 的每个标签结构，功能强大但不易学习。Express 在初始化一个项目的时候需要指定模板引擎，默认支持Jade和ejs。\n\n 2. `$ cd nodetest && npm install`\n \n\n> 进去项目文件夹，并安装所需要的依赖。无参数的 npm install 的功能就是 检查当前目录下的 package.json，并自动安装所有指定的依赖。 \n\n 3. `$ npm start`\n \n\n> 启动项目。接下来，打开浏览器，输入地址 http://localhost:3000，你就可以看到一个简单的 Welcome to Express 页面了。\n\n\n> express以前的版本，启动项目的命令是\n> `\\$ node app.js`\n> 但是，使用最新版的这样是无法启动的，正确的启动命令是\n> `$ npm start`\n\n市面上讲nodejs的书籍并不多，而且node的版本更新太快，好多书上的例子用最新版的node已经无法运行了，所以，不要觉得书上的都是正确的，遇到问题多google。\n\n\n\n> 附nodejs教程，中文文档等\n> http://download.csdn.net/detail/qq_31655965/9603069\n> http://download.csdn.net/detail/qq_31655965/9603064\n\n     ","source":"study/nodejs/one.md","raw":"---\ntitle: 使用express搭建nodejs项目\ntype: nodejs\norder: 2\n---\n\n最近对nodejs比较感兴趣，所以打算学习一下。但是在学习过程中遇到了一些麻烦，现在将这个过程与大家分享一下。\n\n## 环境\n\n - 系统 ubutu16.04 （win10下的虚拟机）\n - nodejs版本 4.4.7\n - npm版本 2.15.8\n\n> nodejs  github主页：https://github.com/nodejs/node\n> nodejs  官网：https://nodejs.org\n> nodejs 中文社区：https://cnodejs.org\n> express github主页：https://github.com/expressjs/express\n\n## 第一步，安装nodejs\n\n**windows**请直接到上诉官网中下载安装即可，现在安装nodejs会自动将npm也安装好。\n\n**Ubuntu系统**：\n首先确保系统安装来python,gcc,g++,如果没有则安装： \n（一般Ubuntu都已默认安装）\n\n```js\n$ sudo apt-get install python \n\n$ sudo apt-get install build-essential \n\n$ sudo apt-get install gcc \n\n$ sudo apt-get install g++ \n```\n\n确保都安装了之后，从nodeJS官网下载最新源代码包：node-v4.4.7.tar.gz\n\n解压：\n\n```js\n$ tar -zxf node-v4.4.7.tar.gz \n\n$ cd node-v4.4.7\n```\n\n默认安装： \n\n```js\n$ ./configure \n\n$ make \n\n$ sudo make install \n```\n\n选择目录方式安装： \n\n```js\n$ ./configure –prefix=/usr/node \n\n$ make -j 5 #5=CPU核数+1 \n\n$ sudo make install\n```\n\n> 当然，你也可以通过linux包管理器安装：\n> `apt get install nodejs -g`\n> `apt get install npm -g`\n> 但是个人不建议这么做，因为有时候会莫名其妙的出问题，还是直接编译源码比较实在（编译过程需要一些时间）。\n\n接下来通过查看版本确认已经安装成功：\n\n```js\n$ node -v\n```\n\n```js\n$ npm -v\n```\n\n## 第二步，安装express\n\n**Windows**：打开Node.js command prompt，输入：\n\t\n\n```js\nnpm install express -g\n```\n\n> -g是全局安装，在任何地方打开命令行都可以使用相应命令\n\n**Ubuntu** 打开终端，输入：\n\t\n\n```js\n$ sudo npm install express -g\n```\n\n> 请务必使用管理员权限安装，否则会安装失败\n\n```js\n$ sudo npm install -g express-generator@4  \n```\n\n \n\n>express4.0之后把创建一个APP的功能分离出来为express-generator，所以必须得安装它，否则没法正常使用express\n\n通过输入‘express -v’确认安装成功。（有些情况无法查看版本，但是可以正常使用）\n\n## 使用express建一个demo\n\n  \n 1. 打开一个用来放源码的目录，输入`$ express nodetest -e`  \n\n> 新建一个名为nodetest的项目，使用ejs作为模板。 ejs （Embedded JavaScript） 是一个标签替换引擎，其语法与 ASP、PHP 相似，易于学习，目前被广泛应用。Express 默认提供的引擎是 jade，它颠覆了传统的模板引擎，制定了一套完整的语法用来生成 HTML 的每个标签结构，功能强大但不易学习。Express 在初始化一个项目的时候需要指定模板引擎，默认支持Jade和ejs。\n\n 2. `$ cd nodetest && npm install`\n \n\n> 进去项目文件夹，并安装所需要的依赖。无参数的 npm install 的功能就是 检查当前目录下的 package.json，并自动安装所有指定的依赖。 \n\n 3. `$ npm start`\n \n\n> 启动项目。接下来，打开浏览器，输入地址 http://localhost:3000，你就可以看到一个简单的 Welcome to Express 页面了。\n\n\n> express以前的版本，启动项目的命令是\n> `\\$ node app.js`\n> 但是，使用最新版的这样是无法启动的，正确的启动命令是\n> `$ npm start`\n\n市面上讲nodejs的书籍并不多，而且node的版本更新太快，好多书上的例子用最新版的node已经无法运行了，所以，不要觉得书上的都是正确的，遇到问题多google。\n\n\n\n> 附nodejs教程，中文文档等\n> http://download.csdn.net/detail/qq_31655965/9603069\n> http://download.csdn.net/detail/qq_31655965/9603064\n\n     ","date":"2016-12-12T14:00:24.000Z","updated":"2016-12-12T12:48:11.000Z","path":"study/nodejs/one.html","comments":1,"layout":"page","_id":"ciwoiwpf2000e1a2dexg0e7xk","content":"<p>最近对nodejs比较感兴趣，所以打算学习一下。但是在学习过程中遇到了一些麻烦，现在将这个过程与大家分享一下。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>系统 ubutu16.04 （win10下的虚拟机）</li>\n<li>nodejs版本 4.4.7</li>\n<li>npm版本 2.15.8</li>\n</ul>\n<blockquote>\n<p>nodejs  github主页：<a href=\"https://github.com/nodejs/node\" target=\"_blank\" rel=\"external\">https://github.com/nodejs/node</a><br>nodejs  官网：<a href=\"https://nodejs.org\" target=\"_blank\" rel=\"external\">https://nodejs.org</a><br>nodejs 中文社区：<a href=\"https://cnodejs.org\" target=\"_blank\" rel=\"external\">https://cnodejs.org</a><br>express github主页：<a href=\"https://github.com/expressjs/express\" target=\"_blank\" rel=\"external\">https://github.com/expressjs/express</a></p>\n</blockquote>\n<h2 id=\"第一步，安装nodejs\"><a href=\"#第一步，安装nodejs\" class=\"headerlink\" title=\"第一步，安装nodejs\"></a>第一步，安装nodejs</h2><p><strong>windows</strong>请直接到上诉官网中下载安装即可，现在安装nodejs会自动将npm也安装好。</p>\n<p><strong>Ubuntu系统</strong>：<br>首先确保系统安装来python,gcc,g++,如果没有则安装：<br>（一般Ubuntu都已默认安装）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install python </div><div class=\"line\"></div><div class=\"line\">$ sudo apt-get install build-essential </div><div class=\"line\"></div><div class=\"line\">$ sudo apt-get install gcc </div><div class=\"line\"></div><div class=\"line\">$ sudo apt-get install g++</div></pre></td></tr></table></figure>\n<p>确保都安装了之后，从nodeJS官网下载最新源代码包：node-v4.4.7.tar.gz</p>\n<p>解压：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ tar -zxf node-v4<span class=\"number\">.4</span><span class=\"number\">.7</span>.tar.gz </div><div class=\"line\"></div><div class=\"line\">$ cd node-v4<span class=\"number\">.4</span><span class=\"number\">.7</span></div></pre></td></tr></table></figure>\n<p>默认安装： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ./configure </div><div class=\"line\"></div><div class=\"line\">$ make </div><div class=\"line\"></div><div class=\"line\">$ sudo make install</div></pre></td></tr></table></figure>\n<p>选择目录方式安装： </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ./configure –prefix=/usr/node </div><div class=\"line\"></div><div class=\"line\">$ make -j 5 #5=CPU核数+1 </div><div class=\"line\"></div><div class=\"line\">$ sudo make install</div></pre></td></tr></table></figure>\n<blockquote>\n<p>当然，你也可以通过linux包管理器安装：<br><code>apt get install nodejs -g</code><br><code>apt get install npm -g</code><br>但是个人不建议这么做，因为有时候会莫名其妙的出问题，还是直接编译源码比较实在（编译过程需要一些时间）。</p>\n</blockquote>\n<p>接下来通过查看版本确认已经安装成功：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ node -v</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm -v</div></pre></td></tr></table></figure>\n<h2 id=\"第二步，安装express\"><a href=\"#第二步，安装express\" class=\"headerlink\" title=\"第二步，安装express\"></a>第二步，安装express</h2><p><strong>Windows</strong>：打开Node.js command prompt，输入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install express -g</div></pre></td></tr></table></figure>\n<blockquote>\n<p>-g是全局安装，在任何地方打开命令行都可以使用相应命令</p>\n</blockquote>\n<p><strong>Ubuntu</strong> 打开终端，输入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo npm install express -g</div></pre></td></tr></table></figure>\n<blockquote>\n<p>请务必使用管理员权限安装，否则会安装失败</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo npm install -g express-generator@<span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>express4.0之后把创建一个APP的功能分离出来为express-generator，所以必须得安装它，否则没法正常使用express</p>\n</blockquote>\n<p>通过输入‘express -v’确认安装成功。（有些情况无法查看版本，但是可以正常使用）</p>\n<h2 id=\"使用express建一个demo\"><a href=\"#使用express建一个demo\" class=\"headerlink\" title=\"使用express建一个demo\"></a>使用express建一个demo</h2><ol>\n<li>打开一个用来放源码的目录，输入<code>$ express nodetest -e</code>  </li>\n</ol>\n<blockquote>\n<p>新建一个名为nodetest的项目，使用ejs作为模板。 ejs （Embedded JavaScript） 是一个标签替换引擎，其语法与 ASP、PHP 相似，易于学习，目前被广泛应用。Express 默认提供的引擎是 jade，它颠覆了传统的模板引擎，制定了一套完整的语法用来生成 HTML 的每个标签结构，功能强大但不易学习。Express 在初始化一个项目的时候需要指定模板引擎，默认支持Jade和ejs。</p>\n</blockquote>\n<ol>\n<li><code>$ cd nodetest &amp;&amp; npm install</code></li>\n</ol>\n<blockquote>\n<p>进去项目文件夹，并安装所需要的依赖。无参数的 npm install 的功能就是 检查当前目录下的 package.json，并自动安装所有指定的依赖。 </p>\n</blockquote>\n<ol>\n<li><code>$ npm start</code></li>\n</ol>\n<blockquote>\n<p>启动项目。接下来，打开浏览器，输入地址 <a href=\"http://localhost:3000，你就可以看到一个简单的\" target=\"_blank\" rel=\"external\">http://localhost:3000，你就可以看到一个简单的</a> Welcome to Express 页面了。</p>\n<p>express以前的版本，启动项目的命令是<br><code>\\$ node app.js</code><br>但是，使用最新版的这样是无法启动的，正确的启动命令是<br><code>$ npm start</code></p>\n</blockquote>\n<p>市面上讲nodejs的书籍并不多，而且node的版本更新太快，好多书上的例子用最新版的node已经无法运行了，所以，不要觉得书上的都是正确的，遇到问题多google。</p>\n<blockquote>\n<p>附nodejs教程，中文文档等<br><a href=\"http://download.csdn.net/detail/qq_31655965/9603069\" target=\"_blank\" rel=\"external\">http://download.csdn.net/detail/qq_31655965/9603069</a><br><a href=\"http://download.csdn.net/detail/qq_31655965/9603064\" target=\"_blank\" rel=\"external\">http://download.csdn.net/detail/qq_31655965/9603064</a></p>\n</blockquote>\n","excerpt":"","more":"<p>最近对nodejs比较感兴趣，所以打算学习一下。但是在学习过程中遇到了一些麻烦，现在将这个过程与大家分享一下。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><ul>\n<li>系统 ubutu16.04 （win10下的虚拟机）</li>\n<li>nodejs版本 4.4.7</li>\n<li>npm版本 2.15.8</li>\n</ul>\n<blockquote>\n<p>nodejs  github主页：<a href=\"https://github.com/nodejs/node\">https://github.com/nodejs/node</a><br>nodejs  官网：<a href=\"https://nodejs.org\">https://nodejs.org</a><br>nodejs 中文社区：<a href=\"https://cnodejs.org\">https://cnodejs.org</a><br>express github主页：<a href=\"https://github.com/expressjs/express\">https://github.com/expressjs/express</a></p>\n</blockquote>\n<h2 id=\"第一步，安装nodejs\"><a href=\"#第一步，安装nodejs\" class=\"headerlink\" title=\"第一步，安装nodejs\"></a>第一步，安装nodejs</h2><p><strong>windows</strong>请直接到上诉官网中下载安装即可，现在安装nodejs会自动将npm也安装好。</p>\n<p><strong>Ubuntu系统</strong>：<br>首先确保系统安装来python,gcc,g++,如果没有则安装：<br>（一般Ubuntu都已默认安装）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install python </div><div class=\"line\"></div><div class=\"line\">$ sudo apt-get install build-essential </div><div class=\"line\"></div><div class=\"line\">$ sudo apt-get install gcc </div><div class=\"line\"></div><div class=\"line\">$ sudo apt-get install g++</div></pre></td></tr></table></figure>\n<p>确保都安装了之后，从nodeJS官网下载最新源代码包：node-v4.4.7.tar.gz</p>\n<p>解压：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ tar -zxf node-v4<span class=\"number\">.4</span><span class=\"number\">.7</span>.tar.gz </div><div class=\"line\"></div><div class=\"line\">$ cd node-v4<span class=\"number\">.4</span><span class=\"number\">.7</span></div></pre></td></tr></table></figure>\n<p>默认安装： </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ./configure </div><div class=\"line\"></div><div class=\"line\">$ make </div><div class=\"line\"></div><div class=\"line\">$ sudo make install</div></pre></td></tr></table></figure>\n<p>选择目录方式安装： </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ ./configure –prefix=/usr/node </div><div class=\"line\"></div><div class=\"line\">$ make -j 5 #5=CPU核数+1 </div><div class=\"line\"></div><div class=\"line\">$ sudo make install</div></pre></td></tr></table></figure>\n<blockquote>\n<p>当然，你也可以通过linux包管理器安装：<br><code>apt get install nodejs -g</code><br><code>apt get install npm -g</code><br>但是个人不建议这么做，因为有时候会莫名其妙的出问题，还是直接编译源码比较实在（编译过程需要一些时间）。</p>\n</blockquote>\n<p>接下来通过查看版本确认已经安装成功：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ node -v</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ npm -v</div></pre></td></tr></table></figure>\n<h2 id=\"第二步，安装express\"><a href=\"#第二步，安装express\" class=\"headerlink\" title=\"第二步，安装express\"></a>第二步，安装express</h2><p><strong>Windows</strong>：打开Node.js command prompt，输入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install express -g</div></pre></td></tr></table></figure>\n<blockquote>\n<p>-g是全局安装，在任何地方打开命令行都可以使用相应命令</p>\n</blockquote>\n<p><strong>Ubuntu</strong> 打开终端，输入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo npm install express -g</div></pre></td></tr></table></figure>\n<blockquote>\n<p>请务必使用管理员权限安装，否则会安装失败</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo npm install -g express-generator@<span class=\"number\">4</span></div></pre></td></tr></table></figure>\n<blockquote>\n<p>express4.0之后把创建一个APP的功能分离出来为express-generator，所以必须得安装它，否则没法正常使用express</p>\n</blockquote>\n<p>通过输入‘express -v’确认安装成功。（有些情况无法查看版本，但是可以正常使用）</p>\n<h2 id=\"使用express建一个demo\"><a href=\"#使用express建一个demo\" class=\"headerlink\" title=\"使用express建一个demo\"></a>使用express建一个demo</h2><ol>\n<li>打开一个用来放源码的目录，输入<code>$ express nodetest -e</code>  </li>\n</ol>\n<blockquote>\n<p>新建一个名为nodetest的项目，使用ejs作为模板。 ejs （Embedded JavaScript） 是一个标签替换引擎，其语法与 ASP、PHP 相似，易于学习，目前被广泛应用。Express 默认提供的引擎是 jade，它颠覆了传统的模板引擎，制定了一套完整的语法用来生成 HTML 的每个标签结构，功能强大但不易学习。Express 在初始化一个项目的时候需要指定模板引擎，默认支持Jade和ejs。</p>\n</blockquote>\n<ol>\n<li><code>$ cd nodetest &amp;&amp; npm install</code></li>\n</ol>\n<blockquote>\n<p>进去项目文件夹，并安装所需要的依赖。无参数的 npm install 的功能就是 检查当前目录下的 package.json，并自动安装所有指定的依赖。 </p>\n</blockquote>\n<ol>\n<li><code>$ npm start</code></li>\n</ol>\n<blockquote>\n<p>启动项目。接下来，打开浏览器，输入地址 <a href=\"http://localhost:3000，你就可以看到一个简单的\">http://localhost:3000，你就可以看到一个简单的</a> Welcome to Express 页面了。</p>\n<p>express以前的版本，启动项目的命令是<br><code>\\$ node app.js</code><br>但是，使用最新版的这样是无法启动的，正确的启动命令是<br><code>$ npm start</code></p>\n</blockquote>\n<p>市面上讲nodejs的书籍并不多，而且node的版本更新太快，好多书上的例子用最新版的node已经无法运行了，所以，不要觉得书上的都是正确的，遇到问题多google。</p>\n<blockquote>\n<p>附nodejs教程，中文文档等<br><a href=\"http://download.csdn.net/detail/qq_31655965/9603069\">http://download.csdn.net/detail/qq_31655965/9603069</a><br><a href=\"http://download.csdn.net/detail/qq_31655965/9603064\">http://download.csdn.net/detail/qq_31655965/9603064</a></p>\n</blockquote>\n"},{"title":"linux下安装jdk","type":"linux","order":3,"_content":"\n## linux下安装jdk\n\n### 先看一下你的系统有没有自带的jdk\n`java -version` \n如果有，会输出相应的版本信息。那么把自带的删了。用下面的方式：\n\n```js\nrpm -qa | grep jdk \nrpm -e --nodeps xxxx //卸载对应jdk，其中xxxx为所要卸载的jdk名称\n```\n\n如果没有，那么我们直接安装\n\n### 安装jdk\n先找一个放置jdk的目录。假如为/usr/java/：\n\n```js\n//新建文件夹\nmkdir /usr/java\n//切换到这个文件夹\ncd /usr/java\n\n//下载rpm文件\nwget --no-check-certificate --no-cookies --header \"Cookie: oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/8u112-b15/jdk-8u112-linux-x64.rpm\n\n```\n这个时候就是在下载jdk文件了。大概160M，网速快的话很快就好了。\n> ![这里写图片描述](http://img.blog.csdn.net/20161213162514447?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n可以使用`ls`命令，查看下载的文件。\n\n然后\n\n```js\n//给文件添加执行权限\nchmod +x jdk-8u112-linux-x64.rpm \n//使用rpm安装\nrpm -ivh jdk-8u112-linux-x64.rpm\n```\n> ![这里写图片描述](http://img.blog.csdn.net/20161213162753022?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n这样jdk就安装好了，测试一下\n\n```js\n//查看java版本\njava -version\n```\n> ![这里写图片描述](http://img.blog.csdn.net/20161213162633401?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n接下来配置环境变量：\n\n```js\n//编辑配置文件\nvi /etc/profile \n```\n打开配置文件，按“i”进入输入模式\n\n> 更多vi的用法，请查看我的vi使用讲解\n\n把配置文件里export PATH 中的PATH删掉。\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161213184507918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n在配置文件的最末尾输入以下内容\n\n```\nexport JAVA_HOME=/usr/java/jdk1.8.0_112\nexport PATH=$JAVA_HOME/bin:$PATH \nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar \n```\n然后按esc，输入“:wq”  按回车键，保存并退出\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161213162724975?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n重启配置文件：\n```js\nsource /etc/profile\n```\n\n这个时候，你就可以在任何位置使用jdk了，测试一下。\n\n```js\n//切换到根目录\ncd /  \n//运行这两个java命令，看到结果证明成功\njava\njavac\n```\n\n### 使用yum命令安装openjdk。\n\nopenjdk与oracle的jdk有什么区别请自行研究。大部分人都是用Oracle的。但是如果你想使用openjdk，那么你可以用下面的方法安装。\n\n```js\n//列出所有的可安装包\n yum list java*\n```\n\n \n>![这里写图片描述](http://img.blog.csdn.net/20161213150432654?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)  \n\n```\n//选择你需要的版本安装，比如：\nyum install java-1.7.0-openjdk \n```\n\n恩，安装好了\n\n### 其他 \n\n本文默认安装jdk1.8，如果你需要安装其他版本的jdk，请把wget命令后的下载地址换成你需要的版本地址。下载地址获取方法：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161213170150629?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast) \n\n官网 ： http://www.oracle.com/technetwork/cn/java/javase/overview/index.html","source":"study/linux/two.md","raw":"---\ntitle: linux下安装jdk\ntype: linux\norder: 3\n---\n\n## linux下安装jdk\n\n### 先看一下你的系统有没有自带的jdk\n`java -version` \n如果有，会输出相应的版本信息。那么把自带的删了。用下面的方式：\n\n```js\nrpm -qa | grep jdk \nrpm -e --nodeps xxxx //卸载对应jdk，其中xxxx为所要卸载的jdk名称\n```\n\n如果没有，那么我们直接安装\n\n### 安装jdk\n先找一个放置jdk的目录。假如为/usr/java/：\n\n```js\n//新建文件夹\nmkdir /usr/java\n//切换到这个文件夹\ncd /usr/java\n\n//下载rpm文件\nwget --no-check-certificate --no-cookies --header \"Cookie: oraclelicense=accept-securebackup-cookie\" http://download.oracle.com/otn-pub/java/jdk/8u112-b15/jdk-8u112-linux-x64.rpm\n\n```\n这个时候就是在下载jdk文件了。大概160M，网速快的话很快就好了。\n> ![这里写图片描述](http://img.blog.csdn.net/20161213162514447?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n可以使用`ls`命令，查看下载的文件。\n\n然后\n\n```js\n//给文件添加执行权限\nchmod +x jdk-8u112-linux-x64.rpm \n//使用rpm安装\nrpm -ivh jdk-8u112-linux-x64.rpm\n```\n> ![这里写图片描述](http://img.blog.csdn.net/20161213162753022?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n这样jdk就安装好了，测试一下\n\n```js\n//查看java版本\njava -version\n```\n> ![这里写图片描述](http://img.blog.csdn.net/20161213162633401?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n接下来配置环境变量：\n\n```js\n//编辑配置文件\nvi /etc/profile \n```\n打开配置文件，按“i”进入输入模式\n\n> 更多vi的用法，请查看我的vi使用讲解\n\n把配置文件里export PATH 中的PATH删掉。\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161213184507918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n在配置文件的最末尾输入以下内容\n\n```\nexport JAVA_HOME=/usr/java/jdk1.8.0_112\nexport PATH=$JAVA_HOME/bin:$PATH \nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar \n```\n然后按esc，输入“:wq”  按回车键，保存并退出\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161213162724975?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n重启配置文件：\n```js\nsource /etc/profile\n```\n\n这个时候，你就可以在任何位置使用jdk了，测试一下。\n\n```js\n//切换到根目录\ncd /  \n//运行这两个java命令，看到结果证明成功\njava\njavac\n```\n\n### 使用yum命令安装openjdk。\n\nopenjdk与oracle的jdk有什么区别请自行研究。大部分人都是用Oracle的。但是如果你想使用openjdk，那么你可以用下面的方法安装。\n\n```js\n//列出所有的可安装包\n yum list java*\n```\n\n \n>![这里写图片描述](http://img.blog.csdn.net/20161213150432654?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)  \n\n```\n//选择你需要的版本安装，比如：\nyum install java-1.7.0-openjdk \n```\n\n恩，安装好了\n\n### 其他 \n\n本文默认安装jdk1.8，如果你需要安装其他版本的jdk，请把wget命令后的下载地址换成你需要的版本地址。下载地址获取方法：\n\n> ![这里写图片描述](http://img.blog.csdn.net/20161213170150629?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast) \n\n官网 ： http://www.oracle.com/technetwork/cn/java/javase/overview/index.html","date":"2016-12-13T10:45:47.000Z","updated":"2016-12-13T10:45:47.000Z","path":"study/linux/two.html","comments":1,"layout":"page","_id":"ciwoiwpf2000f1a2doyknrz0u","content":"<h2 id=\"linux下安装jdk\"><a href=\"#linux下安装jdk\" class=\"headerlink\" title=\"linux下安装jdk\"></a>linux下安装jdk</h2><h3 id=\"先看一下你的系统有没有自带的jdk\"><a href=\"#先看一下你的系统有没有自带的jdk\" class=\"headerlink\" title=\"先看一下你的系统有没有自带的jdk\"></a>先看一下你的系统有没有自带的jdk</h3><p><code>java -version</code><br>如果有，会输出相应的版本信息。那么把自带的删了。用下面的方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpm -qa | grep jdk </div><div class=\"line\">rpm -e --nodeps xxxx <span class=\"comment\">//卸载对应jdk，其中xxxx为所要卸载的jdk名称</span></div></pre></td></tr></table></figure>\n<p>如果没有，那么我们直接安装</p>\n<h3 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h3><p>先找一个放置jdk的目录。假如为/usr/java/：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//新建文件夹</span></div><div class=\"line\">mkdir /usr/java</div><div class=\"line\"><span class=\"comment\">//切换到这个文件夹</span></div><div class=\"line\">cd /usr/java</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下载rpm文件</span></div><div class=\"line\">wget --no-check-certificate --no-cookies --header <span class=\"string\">\"Cookie: oraclelicense=accept-securebackup-cookie\"</span> http:<span class=\"comment\">//download.oracle.com/otn-pub/java/jdk/8u112-b15/jdk-8u112-linux-x64.rpm</span></div></pre></td></tr></table></figure>\n<p>这个时候就是在下载jdk文件了。大概160M，网速快的话很快就好了。</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213162514447?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<p>可以使用<code>ls</code>命令，查看下载的文件。</p>\n<p>然后</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//给文件添加执行权限</span></div><div class=\"line\">chmod +x jdk<span class=\"number\">-8</span>u112-linux-x64.rpm </div><div class=\"line\"><span class=\"comment\">//使用rpm安装</span></div><div class=\"line\">rpm -ivh jdk<span class=\"number\">-8</span>u112-linux-x64.rpm</div></pre></td></tr></table></figure>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213162753022?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<p>这样jdk就安装好了，测试一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//查看java版本</span></div><div class=\"line\">java -version</div></pre></td></tr></table></figure>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213162633401?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<p>接下来配置环境变量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//编辑配置文件</span></div><div class=\"line\">vi /etc/profile</div></pre></td></tr></table></figure>\n<p>打开配置文件，按“i”进入输入模式</p>\n<blockquote>\n<p>更多vi的用法，请查看我的vi使用讲解</p>\n</blockquote>\n<p>把配置文件里export PATH 中的PATH删掉。</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213184507918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<p>在配置文件的最末尾输入以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=/usr/java/jdk1.8.0_112</div><div class=\"line\">export PATH=$JAVA_HOME/bin:$PATH </div><div class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</div></pre></td></tr></table></figure>\n<p>然后按esc，输入“:wq”  按回车键，保存并退出</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213162724975?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<p>重启配置文件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source /etc/profile</div></pre></td></tr></table></figure></p>\n<p>这个时候，你就可以在任何位置使用jdk了，测试一下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//切换到根目录</span></div><div class=\"line\">cd /  </div><div class=\"line\"><span class=\"comment\">//运行这两个java命令，看到结果证明成功</span></div><div class=\"line\">java</div><div class=\"line\">javac</div></pre></td></tr></table></figure>\n<h3 id=\"使用yum命令安装openjdk。\"><a href=\"#使用yum命令安装openjdk。\" class=\"headerlink\" title=\"使用yum命令安装openjdk。\"></a>使用yum命令安装openjdk。</h3><p>openjdk与oracle的jdk有什么区别请自行研究。大部分人都是用Oracle的。但是如果你想使用openjdk，那么你可以用下面的方法安装。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//列出所有的可安装包</span></div><div class=\"line\"> yum list java*</div></pre></td></tr></table></figure>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213150432654?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">  </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//选择你需要的版本安装，比如：</div><div class=\"line\">yum install java-1.7.0-openjdk</div></pre></td></tr></table></figure>\n<p>恩，安装好了</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>本文默认安装jdk1.8，如果你需要安装其他版本的jdk，请把wget命令后的下载地址换成你需要的版本地址。下载地址获取方法：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213170150629?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"> </p>\n</blockquote>\n<p>官网 ： <a href=\"http://www.oracle.com/technetwork/cn/java/javase/overview/index.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/cn/java/javase/overview/index.html</a></p>\n","excerpt":"","more":"<h2 id=\"linux下安装jdk\"><a href=\"#linux下安装jdk\" class=\"headerlink\" title=\"linux下安装jdk\"></a>linux下安装jdk</h2><h3 id=\"先看一下你的系统有没有自带的jdk\"><a href=\"#先看一下你的系统有没有自带的jdk\" class=\"headerlink\" title=\"先看一下你的系统有没有自带的jdk\"></a>先看一下你的系统有没有自带的jdk</h3><p><code>java -version</code><br>如果有，会输出相应的版本信息。那么把自带的删了。用下面的方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">rpm -qa | grep jdk </div><div class=\"line\">rpm -e --nodeps xxxx <span class=\"comment\">//卸载对应jdk，其中xxxx为所要卸载的jdk名称</span></div></pre></td></tr></table></figure>\n<p>如果没有，那么我们直接安装</p>\n<h3 id=\"安装jdk\"><a href=\"#安装jdk\" class=\"headerlink\" title=\"安装jdk\"></a>安装jdk</h3><p>先找一个放置jdk的目录。假如为/usr/java/：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//新建文件夹</span></div><div class=\"line\">mkdir /usr/java</div><div class=\"line\"><span class=\"comment\">//切换到这个文件夹</span></div><div class=\"line\">cd /usr/java</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//下载rpm文件</span></div><div class=\"line\">wget --no-check-certificate --no-cookies --header <span class=\"string\">\"Cookie: oraclelicense=accept-securebackup-cookie\"</span> http:<span class=\"comment\">//download.oracle.com/otn-pub/java/jdk/8u112-b15/jdk-8u112-linux-x64.rpm</span></div></pre></td></tr></table></figure>\n<p>这个时候就是在下载jdk文件了。大概160M，网速快的话很快就好了。</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213162514447?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<p>可以使用<code>ls</code>命令，查看下载的文件。</p>\n<p>然后</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//给文件添加执行权限</span></div><div class=\"line\">chmod +x jdk<span class=\"number\">-8</span>u112-linux-x64.rpm </div><div class=\"line\"><span class=\"comment\">//使用rpm安装</span></div><div class=\"line\">rpm -ivh jdk<span class=\"number\">-8</span>u112-linux-x64.rpm</div></pre></td></tr></table></figure>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213162753022?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<p>这样jdk就安装好了，测试一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//查看java版本</span></div><div class=\"line\">java -version</div></pre></td></tr></table></figure>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213162633401?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<p>接下来配置环境变量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//编辑配置文件</span></div><div class=\"line\">vi /etc/profile</div></pre></td></tr></table></figure>\n<p>打开配置文件，按“i”进入输入模式</p>\n<blockquote>\n<p>更多vi的用法，请查看我的vi使用讲解</p>\n</blockquote>\n<p>把配置文件里export PATH 中的PATH删掉。</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213184507918?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<p>在配置文件的最末尾输入以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">export JAVA_HOME=/usr/java/jdk1.8.0_112</div><div class=\"line\">export PATH=$JAVA_HOME/bin:$PATH </div><div class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</div></pre></td></tr></table></figure>\n<p>然后按esc，输入“:wq”  按回车键，保存并退出</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213162724975?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"></p>\n</blockquote>\n<p>重启配置文件：<br><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">source /etc/profile</div></pre></td></tr></table></figure></p>\n<p>这个时候，你就可以在任何位置使用jdk了，测试一下。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//切换到根目录</span></div><div class=\"line\">cd /  </div><div class=\"line\"><span class=\"comment\">//运行这两个java命令，看到结果证明成功</span></div><div class=\"line\">java</div><div class=\"line\">javac</div></pre></td></tr></table></figure>\n<h3 id=\"使用yum命令安装openjdk。\"><a href=\"#使用yum命令安装openjdk。\" class=\"headerlink\" title=\"使用yum命令安装openjdk。\"></a>使用yum命令安装openjdk。</h3><p>openjdk与oracle的jdk有什么区别请自行研究。大部分人都是用Oracle的。但是如果你想使用openjdk，那么你可以用下面的方法安装。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//列出所有的可安装包</span></div><div class=\"line\"> yum list java*</div></pre></td></tr></table></figure>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213150432654?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\">  </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">//选择你需要的版本安装，比如：</div><div class=\"line\">yum install java-1.7.0-openjdk</div></pre></td></tr></table></figure>\n<p>恩，安装好了</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>本文默认安装jdk1.8，如果你需要安装其他版本的jdk，请把wget命令后的下载地址换成你需要的版本地址。下载地址获取方法：</p>\n<blockquote>\n<p><img src=\"http://img.blog.csdn.net/20161213170150629?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2NTU5NjU=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"这里写图片描述\"> </p>\n</blockquote>\n<p>官网 ： <a href=\"http://www.oracle.com/technetwork/cn/java/javase/overview/index.html\">http://www.oracle.com/technetwork/cn/java/javase/overview/index.html</a></p>\n"}],"Post":[{"_content":"","source":"_posts/index.md","raw":"","slug":"index","published":1,"date":"2016-12-13T11:01:50.000Z","updated":"2016-12-13T11:01:50.000Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"ciwoiwpdr00011a2dn5donag7","content":"","excerpt":"","more":""}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}